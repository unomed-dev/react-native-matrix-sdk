// This file was autogenerated by some hot garbage in the
// `uniffi-bindgen-react-native` crate. Trust me, you don't want to mess with
// it!
#include "matrix_sdk_ffi.hpp"

#include "UniffiJsiTypes.h"
#include <iostream>
#include <map>
#include <stdexcept>
#include <thread>
#include <utility>

namespace react = facebook::react;
namespace jsi = facebook::jsi;

// Calling into Rust.
extern "C" {
typedef void (*UniffiRustFutureContinuationCallback)(uint64_t data,
                                                     int8_t poll_result);
typedef void (*UniffiForeignFutureFree)(uint64_t handle);
typedef void (*UniffiCallbackInterfaceFree)(uint64_t handle);
typedef struct UniffiForeignFuture {
  uint64_t handle;
  UniffiForeignFutureFree free;
} UniffiForeignFuture;
typedef struct UniffiForeignFutureStructU8 {
  uint8_t return_value;
  RustCallStatus call_status;
} UniffiForeignFutureStructU8;
typedef void (*UniffiForeignFutureCompleteU8)(
    uint64_t callback_data, UniffiForeignFutureStructU8 result);
typedef struct UniffiForeignFutureStructI8 {
  int8_t return_value;
  RustCallStatus call_status;
} UniffiForeignFutureStructI8;
typedef void (*UniffiForeignFutureCompleteI8)(
    uint64_t callback_data, UniffiForeignFutureStructI8 result);
typedef struct UniffiForeignFutureStructU16 {
  uint16_t return_value;
  RustCallStatus call_status;
} UniffiForeignFutureStructU16;
typedef void (*UniffiForeignFutureCompleteU16)(
    uint64_t callback_data, UniffiForeignFutureStructU16 result);
typedef struct UniffiForeignFutureStructI16 {
  int16_t return_value;
  RustCallStatus call_status;
} UniffiForeignFutureStructI16;
typedef void (*UniffiForeignFutureCompleteI16)(
    uint64_t callback_data, UniffiForeignFutureStructI16 result);
typedef struct UniffiForeignFutureStructU32 {
  uint32_t return_value;
  RustCallStatus call_status;
} UniffiForeignFutureStructU32;
typedef void (*UniffiForeignFutureCompleteU32)(
    uint64_t callback_data, UniffiForeignFutureStructU32 result);
typedef struct UniffiForeignFutureStructI32 {
  int32_t return_value;
  RustCallStatus call_status;
} UniffiForeignFutureStructI32;
typedef void (*UniffiForeignFutureCompleteI32)(
    uint64_t callback_data, UniffiForeignFutureStructI32 result);
typedef struct UniffiForeignFutureStructU64 {
  uint64_t return_value;
  RustCallStatus call_status;
} UniffiForeignFutureStructU64;
typedef void (*UniffiForeignFutureCompleteU64)(
    uint64_t callback_data, UniffiForeignFutureStructU64 result);
typedef struct UniffiForeignFutureStructI64 {
  int64_t return_value;
  RustCallStatus call_status;
} UniffiForeignFutureStructI64;
typedef void (*UniffiForeignFutureCompleteI64)(
    uint64_t callback_data, UniffiForeignFutureStructI64 result);
typedef struct UniffiForeignFutureStructF32 {
  float return_value;
  RustCallStatus call_status;
} UniffiForeignFutureStructF32;
typedef void (*UniffiForeignFutureCompleteF32)(
    uint64_t callback_data, UniffiForeignFutureStructF32 result);
typedef struct UniffiForeignFutureStructF64 {
  double return_value;
  RustCallStatus call_status;
} UniffiForeignFutureStructF64;
typedef void (*UniffiForeignFutureCompleteF64)(
    uint64_t callback_data, UniffiForeignFutureStructF64 result);
typedef struct UniffiForeignFutureStructPointer {
  void *return_value;
  RustCallStatus call_status;
} UniffiForeignFutureStructPointer;
typedef void (*UniffiForeignFutureCompletePointer)(
    uint64_t callback_data, UniffiForeignFutureStructPointer result);
typedef struct UniffiForeignFutureStructRustBuffer {
  RustBuffer return_value;
  RustCallStatus call_status;
} UniffiForeignFutureStructRustBuffer;
typedef void (*UniffiForeignFutureCompleteRustBuffer)(
    uint64_t callback_data, UniffiForeignFutureStructRustBuffer result);
typedef struct UniffiForeignFutureStructVoid {
  RustCallStatus call_status;
} UniffiForeignFutureStructVoid;
typedef void (*UniffiForeignFutureCompleteVoid)(
    uint64_t callback_data, UniffiForeignFutureStructVoid result);
typedef void (*UniffiCallbackInterfaceBackupStateListenerMethod0)(
    uint64_t uniffi_handle, RustBuffer status, void *uniffi_out_return,
    RustCallStatus *rust_call_status);
typedef void (*UniffiCallbackInterfaceBackupSteadyStateListenerMethod0)(
    uint64_t uniffi_handle, RustBuffer status, void *uniffi_out_return,
    RustCallStatus *rust_call_status);
typedef void (*UniffiCallbackInterfaceClientDelegateMethod0)(
    uint64_t uniffi_handle, int8_t is_soft_logout, void *uniffi_out_return,
    RustCallStatus *rust_call_status);
typedef void (*UniffiCallbackInterfaceClientDelegateMethod1)(
    uint64_t uniffi_handle, void *uniffi_out_return,
    RustCallStatus *rust_call_status);
typedef void (*UniffiCallbackInterfaceClientSessionDelegateMethod0)(
    uint64_t uniffi_handle, RustBuffer user_id, RustBuffer *uniffi_out_return,
    RustCallStatus *rust_call_status);
typedef void (*UniffiCallbackInterfaceClientSessionDelegateMethod1)(
    uint64_t uniffi_handle, RustBuffer session, void *uniffi_out_return,
    RustCallStatus *rust_call_status);
typedef void (*UniffiCallbackInterfaceEnableRecoveryProgressListenerMethod0)(
    uint64_t uniffi_handle, RustBuffer status, void *uniffi_out_return,
    RustCallStatus *rust_call_status);
typedef void (*UniffiCallbackInterfaceIdentityStatusChangeListenerMethod0)(
    uint64_t uniffi_handle, RustBuffer identity_status_change,
    void *uniffi_out_return, RustCallStatus *rust_call_status);
typedef void (*UniffiCallbackInterfaceIgnoredUsersListenerMethod0)(
    uint64_t uniffi_handle, RustBuffer ignored_user_ids,
    void *uniffi_out_return, RustCallStatus *rust_call_status);
typedef void (*UniffiCallbackInterfaceKnockRequestsListenerMethod0)(
    uint64_t uniffi_handle, RustBuffer join_requests, void *uniffi_out_return,
    RustCallStatus *rust_call_status);
typedef void (*UniffiCallbackInterfaceNotificationSettingsDelegateMethod0)(
    uint64_t uniffi_handle, void *uniffi_out_return,
    RustCallStatus *rust_call_status);
typedef void (*UniffiCallbackInterfacePaginationStatusListenerMethod0)(
    uint64_t uniffi_handle, RustBuffer status, void *uniffi_out_return,
    RustCallStatus *rust_call_status);
typedef void (*UniffiCallbackInterfaceProgressWatcherMethod0)(
    uint64_t uniffi_handle, RustBuffer progress, void *uniffi_out_return,
    RustCallStatus *rust_call_status);
typedef void (*UniffiCallbackInterfaceQrLoginProgressListenerMethod0)(
    uint64_t uniffi_handle, RustBuffer state, void *uniffi_out_return,
    RustCallStatus *rust_call_status);
typedef void (*UniffiCallbackInterfaceRecoveryStateListenerMethod0)(
    uint64_t uniffi_handle, RustBuffer status, void *uniffi_out_return,
    RustCallStatus *rust_call_status);
typedef void (
    *UniffiCallbackInterfaceRoomDirectorySearchEntriesListenerMethod0)(
    uint64_t uniffi_handle, RustBuffer room_entries_update,
    void *uniffi_out_return, RustCallStatus *rust_call_status);
typedef void (*UniffiCallbackInterfaceRoomInfoListenerMethod0)(
    uint64_t uniffi_handle, RustBuffer room_info, void *uniffi_out_return,
    RustCallStatus *rust_call_status);
typedef void (*UniffiCallbackInterfaceRoomListEntriesListenerMethod0)(
    uint64_t uniffi_handle, RustBuffer room_entries_update,
    void *uniffi_out_return, RustCallStatus *rust_call_status);
typedef void (*UniffiCallbackInterfaceRoomListLoadingStateListenerMethod0)(
    uint64_t uniffi_handle, RustBuffer state, void *uniffi_out_return,
    RustCallStatus *rust_call_status);
typedef void (*UniffiCallbackInterfaceRoomListServiceStateListenerMethod0)(
    uint64_t uniffi_handle, RustBuffer state, void *uniffi_out_return,
    RustCallStatus *rust_call_status);
typedef void (
    *UniffiCallbackInterfaceRoomListServiceSyncIndicatorListenerMethod0)(
    uint64_t uniffi_handle, RustBuffer sync_indicator, void *uniffi_out_return,
    RustCallStatus *rust_call_status);
typedef void (*UniffiCallbackInterfaceSendQueueRoomErrorListenerMethod0)(
    uint64_t uniffi_handle, RustBuffer room_id, RustBuffer error,
    void *uniffi_out_return, RustCallStatus *rust_call_status);
typedef void (
    *UniffiCallbackInterfaceSessionVerificationControllerDelegateMethod0)(
    uint64_t uniffi_handle, RustBuffer details, void *uniffi_out_return,
    RustCallStatus *rust_call_status);
typedef void (
    *UniffiCallbackInterfaceSessionVerificationControllerDelegateMethod1)(
    uint64_t uniffi_handle, void *uniffi_out_return,
    RustCallStatus *rust_call_status);
typedef void (
    *UniffiCallbackInterfaceSessionVerificationControllerDelegateMethod2)(
    uint64_t uniffi_handle, void *uniffi_out_return,
    RustCallStatus *rust_call_status);
typedef void (
    *UniffiCallbackInterfaceSessionVerificationControllerDelegateMethod3)(
    uint64_t uniffi_handle, RustBuffer data, void *uniffi_out_return,
    RustCallStatus *rust_call_status);
typedef void (
    *UniffiCallbackInterfaceSessionVerificationControllerDelegateMethod4)(
    uint64_t uniffi_handle, void *uniffi_out_return,
    RustCallStatus *rust_call_status);
typedef void (
    *UniffiCallbackInterfaceSessionVerificationControllerDelegateMethod5)(
    uint64_t uniffi_handle, void *uniffi_out_return,
    RustCallStatus *rust_call_status);
typedef void (
    *UniffiCallbackInterfaceSessionVerificationControllerDelegateMethod6)(
    uint64_t uniffi_handle, void *uniffi_out_return,
    RustCallStatus *rust_call_status);
typedef void (*UniffiCallbackInterfaceSyncServiceStateObserverMethod0)(
    uint64_t uniffi_handle, RustBuffer state, void *uniffi_out_return,
    RustCallStatus *rust_call_status);
typedef void (*UniffiCallbackInterfaceTimelineListenerMethod0)(
    uint64_t uniffi_handle, RustBuffer diff, void *uniffi_out_return,
    RustCallStatus *rust_call_status);
typedef void (*UniffiCallbackInterfaceTypingNotificationsListenerMethod0)(
    uint64_t uniffi_handle, RustBuffer typing_user_ids, void *uniffi_out_return,
    RustCallStatus *rust_call_status);
typedef void (*UniffiCallbackInterfaceUnableToDecryptDelegateMethod0)(
    uint64_t uniffi_handle, RustBuffer info, void *uniffi_out_return,
    RustCallStatus *rust_call_status);
typedef void (*UniffiCallbackInterfaceVerificationStateListenerMethod0)(
    uint64_t uniffi_handle, RustBuffer status, void *uniffi_out_return,
    RustCallStatus *rust_call_status);
typedef void (*UniffiCallbackInterfaceWidgetCapabilitiesProviderMethod0)(
    uint64_t uniffi_handle, RustBuffer capabilities,
    RustBuffer *uniffi_out_return, RustCallStatus *rust_call_status);
typedef struct UniffiVTableCallbackInterfaceBackupStateListener {
  UniffiCallbackInterfaceBackupStateListenerMethod0 on_update;
  UniffiCallbackInterfaceFree uniffi_free;
} UniffiVTableCallbackInterfaceBackupStateListener;
typedef struct UniffiVTableCallbackInterfaceBackupSteadyStateListener {
  UniffiCallbackInterfaceBackupSteadyStateListenerMethod0 on_update;
  UniffiCallbackInterfaceFree uniffi_free;
} UniffiVTableCallbackInterfaceBackupSteadyStateListener;
typedef struct UniffiVTableCallbackInterfaceClientDelegate {
  UniffiCallbackInterfaceClientDelegateMethod0 did_receive_auth_error;
  UniffiCallbackInterfaceClientDelegateMethod1 did_refresh_tokens;
  UniffiCallbackInterfaceFree uniffi_free;
} UniffiVTableCallbackInterfaceClientDelegate;
typedef struct UniffiVTableCallbackInterfaceClientSessionDelegate {
  UniffiCallbackInterfaceClientSessionDelegateMethod0
      retrieve_session_from_keychain;
  UniffiCallbackInterfaceClientSessionDelegateMethod1 save_session_in_keychain;
  UniffiCallbackInterfaceFree uniffi_free;
} UniffiVTableCallbackInterfaceClientSessionDelegate;
typedef struct UniffiVTableCallbackInterfaceEnableRecoveryProgressListener {
  UniffiCallbackInterfaceEnableRecoveryProgressListenerMethod0 on_update;
  UniffiCallbackInterfaceFree uniffi_free;
} UniffiVTableCallbackInterfaceEnableRecoveryProgressListener;
typedef struct UniffiVTableCallbackInterfaceIdentityStatusChangeListener {
  UniffiCallbackInterfaceIdentityStatusChangeListenerMethod0 call;
  UniffiCallbackInterfaceFree uniffi_free;
} UniffiVTableCallbackInterfaceIdentityStatusChangeListener;
typedef struct UniffiVTableCallbackInterfaceIgnoredUsersListener {
  UniffiCallbackInterfaceIgnoredUsersListenerMethod0 call;
  UniffiCallbackInterfaceFree uniffi_free;
} UniffiVTableCallbackInterfaceIgnoredUsersListener;
typedef struct UniffiVTableCallbackInterfaceKnockRequestsListener {
  UniffiCallbackInterfaceKnockRequestsListenerMethod0 call;
  UniffiCallbackInterfaceFree uniffi_free;
} UniffiVTableCallbackInterfaceKnockRequestsListener;
typedef struct UniffiVTableCallbackInterfaceNotificationSettingsDelegate {
  UniffiCallbackInterfaceNotificationSettingsDelegateMethod0
      settings_did_change;
  UniffiCallbackInterfaceFree uniffi_free;
} UniffiVTableCallbackInterfaceNotificationSettingsDelegate;
typedef struct UniffiVTableCallbackInterfacePaginationStatusListener {
  UniffiCallbackInterfacePaginationStatusListenerMethod0 on_update;
  UniffiCallbackInterfaceFree uniffi_free;
} UniffiVTableCallbackInterfacePaginationStatusListener;
typedef struct UniffiVTableCallbackInterfaceProgressWatcher {
  UniffiCallbackInterfaceProgressWatcherMethod0 transmission_progress;
  UniffiCallbackInterfaceFree uniffi_free;
} UniffiVTableCallbackInterfaceProgressWatcher;
typedef struct UniffiVTableCallbackInterfaceQrLoginProgressListener {
  UniffiCallbackInterfaceQrLoginProgressListenerMethod0 on_update;
  UniffiCallbackInterfaceFree uniffi_free;
} UniffiVTableCallbackInterfaceQrLoginProgressListener;
typedef struct UniffiVTableCallbackInterfaceRecoveryStateListener {
  UniffiCallbackInterfaceRecoveryStateListenerMethod0 on_update;
  UniffiCallbackInterfaceFree uniffi_free;
} UniffiVTableCallbackInterfaceRecoveryStateListener;
typedef struct UniffiVTableCallbackInterfaceRoomDirectorySearchEntriesListener {
  UniffiCallbackInterfaceRoomDirectorySearchEntriesListenerMethod0 on_update;
  UniffiCallbackInterfaceFree uniffi_free;
} UniffiVTableCallbackInterfaceRoomDirectorySearchEntriesListener;
typedef struct UniffiVTableCallbackInterfaceRoomInfoListener {
  UniffiCallbackInterfaceRoomInfoListenerMethod0 call;
  UniffiCallbackInterfaceFree uniffi_free;
} UniffiVTableCallbackInterfaceRoomInfoListener;
typedef struct UniffiVTableCallbackInterfaceRoomListEntriesListener {
  UniffiCallbackInterfaceRoomListEntriesListenerMethod0 on_update;
  UniffiCallbackInterfaceFree uniffi_free;
} UniffiVTableCallbackInterfaceRoomListEntriesListener;
typedef struct UniffiVTableCallbackInterfaceRoomListLoadingStateListener {
  UniffiCallbackInterfaceRoomListLoadingStateListenerMethod0 on_update;
  UniffiCallbackInterfaceFree uniffi_free;
} UniffiVTableCallbackInterfaceRoomListLoadingStateListener;
typedef struct UniffiVTableCallbackInterfaceRoomListServiceStateListener {
  UniffiCallbackInterfaceRoomListServiceStateListenerMethod0 on_update;
  UniffiCallbackInterfaceFree uniffi_free;
} UniffiVTableCallbackInterfaceRoomListServiceStateListener;
typedef struct
    UniffiVTableCallbackInterfaceRoomListServiceSyncIndicatorListener {
  UniffiCallbackInterfaceRoomListServiceSyncIndicatorListenerMethod0 on_update;
  UniffiCallbackInterfaceFree uniffi_free;
} UniffiVTableCallbackInterfaceRoomListServiceSyncIndicatorListener;
typedef struct UniffiVTableCallbackInterfaceSendQueueRoomErrorListener {
  UniffiCallbackInterfaceSendQueueRoomErrorListenerMethod0 on_error;
  UniffiCallbackInterfaceFree uniffi_free;
} UniffiVTableCallbackInterfaceSendQueueRoomErrorListener;
typedef struct
    UniffiVTableCallbackInterfaceSessionVerificationControllerDelegate {
  UniffiCallbackInterfaceSessionVerificationControllerDelegateMethod0
      did_receive_verification_request;
  UniffiCallbackInterfaceSessionVerificationControllerDelegateMethod1
      did_accept_verification_request;
  UniffiCallbackInterfaceSessionVerificationControllerDelegateMethod2
      did_start_sas_verification;
  UniffiCallbackInterfaceSessionVerificationControllerDelegateMethod3
      did_receive_verification_data;
  UniffiCallbackInterfaceSessionVerificationControllerDelegateMethod4 did_fail;
  UniffiCallbackInterfaceSessionVerificationControllerDelegateMethod5
      did_cancel;
  UniffiCallbackInterfaceSessionVerificationControllerDelegateMethod6
      did_finish;
  UniffiCallbackInterfaceFree uniffi_free;
} UniffiVTableCallbackInterfaceSessionVerificationControllerDelegate;
typedef struct UniffiVTableCallbackInterfaceSyncServiceStateObserver {
  UniffiCallbackInterfaceSyncServiceStateObserverMethod0 on_update;
  UniffiCallbackInterfaceFree uniffi_free;
} UniffiVTableCallbackInterfaceSyncServiceStateObserver;
typedef struct UniffiVTableCallbackInterfaceTimelineListener {
  UniffiCallbackInterfaceTimelineListenerMethod0 on_update;
  UniffiCallbackInterfaceFree uniffi_free;
} UniffiVTableCallbackInterfaceTimelineListener;
typedef struct UniffiVTableCallbackInterfaceTypingNotificationsListener {
  UniffiCallbackInterfaceTypingNotificationsListenerMethod0 call;
  UniffiCallbackInterfaceFree uniffi_free;
} UniffiVTableCallbackInterfaceTypingNotificationsListener;
typedef struct UniffiVTableCallbackInterfaceUnableToDecryptDelegate {
  UniffiCallbackInterfaceUnableToDecryptDelegateMethod0 on_utd;
  UniffiCallbackInterfaceFree uniffi_free;
} UniffiVTableCallbackInterfaceUnableToDecryptDelegate;
typedef struct UniffiVTableCallbackInterfaceVerificationStateListener {
  UniffiCallbackInterfaceVerificationStateListenerMethod0 on_update;
  UniffiCallbackInterfaceFree uniffi_free;
} UniffiVTableCallbackInterfaceVerificationStateListener;
typedef struct UniffiVTableCallbackInterfaceWidgetCapabilitiesProvider {
  UniffiCallbackInterfaceWidgetCapabilitiesProviderMethod0 acquire_capabilities;
  UniffiCallbackInterfaceFree uniffi_free;
} UniffiVTableCallbackInterfaceWidgetCapabilitiesProvider;
void *uniffi_matrix_sdk_ffi_fn_clone_client(void *ptr,
                                            RustCallStatus *uniffi_out_err);
void uniffi_matrix_sdk_ffi_fn_free_client(void *ptr,
                                          RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t uniffi_matrix_sdk_ffi_fn_method_client_abort_oidc_auth(
    void *ptr, void *authorization_data);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_client_account_data(void *ptr,
                                                    RustBuffer event_type);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_client_account_url(void *ptr,
                                                   RustBuffer action);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_client_available_sliding_sync_versions(
    void *ptr);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_client_avatar_url(void *ptr);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_client_await_room_remote_echo(
    void *ptr, RustBuffer room_id);
RustBuffer uniffi_matrix_sdk_ffi_fn_method_client_cached_avatar_url(
    void *ptr, RustCallStatus *uniffi_out_err);
int8_t uniffi_matrix_sdk_ffi_fn_method_client_can_deactivate_account(
    void *ptr, RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_client_create_room(void *ptr,
                                                   RustBuffer request);
/*handle*/ uint64_t uniffi_matrix_sdk_ffi_fn_method_client_create_room_alias(
    void *ptr, RustBuffer room_alias, RustBuffer room_id);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_client_custom_login_with_jwt(
    void *ptr, RustBuffer jwt, RustBuffer initial_device_name,
    RustBuffer device_id);
/*handle*/ uint64_t uniffi_matrix_sdk_ffi_fn_method_client_deactivate_account(
    void *ptr, RustBuffer auth_data, int8_t erase_data);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_client_delete_pusher(void *ptr,
                                                     RustBuffer identifiers);
RustBuffer uniffi_matrix_sdk_ffi_fn_method_client_device_id(
    void *ptr, RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_client_display_name(void *ptr);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_client_enable_all_send_queues(void *ptr,
                                                              int8_t enable);
void *uniffi_matrix_sdk_ffi_fn_method_client_encryption(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_matrix_sdk_ffi_fn_method_client_get_dm_room(
    void *ptr, RustBuffer user_id, RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_client_get_media_content(void *ptr,
                                                         void *media_source);
/*handle*/ uint64_t uniffi_matrix_sdk_ffi_fn_method_client_get_media_file(
    void *ptr, void *media_source, RustBuffer filename, RustBuffer mime_type,
    int8_t use_cache, RustBuffer temp_dir);
/*handle*/ uint64_t uniffi_matrix_sdk_ffi_fn_method_client_get_media_thumbnail(
    void *ptr, void *media_source, uint64_t width, uint64_t height);
void *uniffi_matrix_sdk_ffi_fn_method_client_get_notification_settings(
    void *ptr, RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_client_get_profile(void *ptr,
                                                   RustBuffer user_id);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_client_get_recently_visited_rooms(void *ptr);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_client_get_room_preview_from_room_alias(
    void *ptr, RustBuffer room_alias);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_client_get_room_preview_from_room_id(
    void *ptr, RustBuffer room_id, RustBuffer via_servers);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_client_get_session_verification_controller(
    void *ptr);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_client_get_url(void *ptr, RustBuffer url);
RustBuffer uniffi_matrix_sdk_ffi_fn_method_client_homeserver(
    void *ptr, RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_client_homeserver_login_details(void *ptr);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_client_ignore_user(void *ptr,
                                                   RustBuffer user_id);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_client_ignored_users(void *ptr);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_client_is_room_alias_available(
    void *ptr, RustBuffer alias);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_client_join_room_by_id(void *ptr,
                                                       RustBuffer room_id);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_client_join_room_by_id_or_alias(
    void *ptr, RustBuffer room_id_or_alias, RustBuffer server_names);
/*handle*/ uint64_t uniffi_matrix_sdk_ffi_fn_method_client_knock(
    void *ptr, RustBuffer room_id_or_alias, RustBuffer reason,
    RustBuffer server_names);
/*handle*/ uint64_t uniffi_matrix_sdk_ffi_fn_method_client_login(
    void *ptr, RustBuffer username, RustBuffer password,
    RustBuffer initial_device_name, RustBuffer device_id);
/*handle*/ uint64_t uniffi_matrix_sdk_ffi_fn_method_client_login_with_email(
    void *ptr, RustBuffer email, RustBuffer password,
    RustBuffer initial_device_name, RustBuffer device_id);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_client_login_with_oidc_callback(
    void *ptr, void *authorization_data, RustBuffer callback_url);
/*handle*/ uint64_t uniffi_matrix_sdk_ffi_fn_method_client_logout(void *ptr);
/*handle*/ uint64_t uniffi_matrix_sdk_ffi_fn_method_client_notification_client(
    void *ptr, RustBuffer process_setup);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_client_remove_avatar(void *ptr);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_client_reset_server_capabilities(void *ptr);
/*handle*/ uint64_t uniffi_matrix_sdk_ffi_fn_method_client_resolve_room_alias(
    void *ptr, RustBuffer room_alias);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_client_restore_session(void *ptr,
                                                       RustBuffer session);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_client_room_alias_exists(void *ptr,
                                                         RustBuffer room_alias);
void *uniffi_matrix_sdk_ffi_fn_method_client_room_directory_search(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_matrix_sdk_ffi_fn_method_client_rooms(void *ptr,
                                             RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t uniffi_matrix_sdk_ffi_fn_method_client_search_users(
    void *ptr, RustBuffer search_term, uint64_t limit);
RustBuffer
uniffi_matrix_sdk_ffi_fn_method_client_server(void *ptr,
                                              RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_matrix_sdk_ffi_fn_method_client_session(void *ptr,
                                               RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t uniffi_matrix_sdk_ffi_fn_method_client_set_account_data(
    void *ptr, RustBuffer event_type, RustBuffer content);
RustBuffer uniffi_matrix_sdk_ffi_fn_method_client_set_delegate(
    void *ptr, RustBuffer delegate, RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_client_set_display_name(void *ptr,
                                                        RustBuffer name);
/*handle*/ uint64_t uniffi_matrix_sdk_ffi_fn_method_client_set_pusher(
    void *ptr, RustBuffer identifiers, RustBuffer kind,
    RustBuffer app_display_name, RustBuffer device_display_name,
    RustBuffer profile_tag, RustBuffer lang);
RustBuffer uniffi_matrix_sdk_ffi_fn_method_client_sliding_sync_version(
    void *ptr, RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t uniffi_matrix_sdk_ffi_fn_method_client_start_sso_login(
    void *ptr, RustBuffer redirect_url, RustBuffer idp_id);
void *uniffi_matrix_sdk_ffi_fn_method_client_subscribe_to_ignored_users(
    void *ptr, uint64_t listener, RustCallStatus *uniffi_out_err);
void *uniffi_matrix_sdk_ffi_fn_method_client_subscribe_to_send_queue_status(
    void *ptr, uint64_t listener, RustCallStatus *uniffi_out_err);
void *uniffi_matrix_sdk_ffi_fn_method_client_sync_service(
    void *ptr, RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_client_track_recently_visited_room(
    void *ptr, RustBuffer room);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_client_unignore_user(void *ptr,
                                                     RustBuffer user_id);
/*handle*/ uint64_t uniffi_matrix_sdk_ffi_fn_method_client_upload_avatar(
    void *ptr, RustBuffer mime_type, RustBuffer data);
/*handle*/ uint64_t uniffi_matrix_sdk_ffi_fn_method_client_upload_media(
    void *ptr, RustBuffer mime_type, RustBuffer data,
    RustBuffer progress_watcher);
/*handle*/ uint64_t uniffi_matrix_sdk_ffi_fn_method_client_url_for_oidc(
    void *ptr, RustBuffer oidc_configuration, RustBuffer prompt);
RustBuffer
uniffi_matrix_sdk_ffi_fn_method_client_user_id(void *ptr,
                                               RustCallStatus *uniffi_out_err);
RustBuffer uniffi_matrix_sdk_ffi_fn_method_client_user_id_server_name(
    void *ptr, RustCallStatus *uniffi_out_err);
void *
uniffi_matrix_sdk_ffi_fn_clone_clientbuilder(void *ptr,
                                             RustCallStatus *uniffi_out_err);
void uniffi_matrix_sdk_ffi_fn_free_clientbuilder(
    void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_matrix_sdk_ffi_fn_constructor_clientbuilder_new(
    RustCallStatus *uniffi_out_err);
void *uniffi_matrix_sdk_ffi_fn_method_clientbuilder_add_root_certificates(
    void *ptr, RustBuffer certificates, RustCallStatus *uniffi_out_err);
void *uniffi_matrix_sdk_ffi_fn_method_clientbuilder_auto_enable_backups(
    void *ptr, int8_t auto_enable_backups, RustCallStatus *uniffi_out_err);
void *uniffi_matrix_sdk_ffi_fn_method_clientbuilder_auto_enable_cross_signing(
    void *ptr, int8_t auto_enable_cross_signing,
    RustCallStatus *uniffi_out_err);
void *uniffi_matrix_sdk_ffi_fn_method_clientbuilder_backup_download_strategy(
    void *ptr, RustBuffer backup_download_strategy,
    RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_clientbuilder_build(void *ptr);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_clientbuilder_build_with_qr_code(
    void *ptr, void *qr_code_data, RustBuffer oidc_configuration,
    uint64_t progress_listener);
void *
uniffi_matrix_sdk_ffi_fn_method_clientbuilder_cross_process_store_locks_holder_name(
    void *ptr, RustBuffer holder_name, RustCallStatus *uniffi_out_err);
void *
uniffi_matrix_sdk_ffi_fn_method_clientbuilder_disable_automatic_token_refresh(
    void *ptr, RustCallStatus *uniffi_out_err);
void *
uniffi_matrix_sdk_ffi_fn_method_clientbuilder_disable_built_in_root_certificates(
    void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_matrix_sdk_ffi_fn_method_clientbuilder_disable_ssl_verification(
    void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_matrix_sdk_ffi_fn_method_clientbuilder_enable_oidc_refresh_lock(
    void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_matrix_sdk_ffi_fn_method_clientbuilder_homeserver_url(
    void *ptr, RustBuffer url, RustCallStatus *uniffi_out_err);
void *uniffi_matrix_sdk_ffi_fn_method_clientbuilder_passphrase(
    void *ptr, RustBuffer passphrase, RustCallStatus *uniffi_out_err);
void *uniffi_matrix_sdk_ffi_fn_method_clientbuilder_proxy(
    void *ptr, RustBuffer url, RustCallStatus *uniffi_out_err);
void *uniffi_matrix_sdk_ffi_fn_method_clientbuilder_request_config(
    void *ptr, RustBuffer config, RustCallStatus *uniffi_out_err);
void *
uniffi_matrix_sdk_ffi_fn_method_clientbuilder_room_decryption_trust_requirement(
    void *ptr, RustBuffer trust_requirement, RustCallStatus *uniffi_out_err);
void *uniffi_matrix_sdk_ffi_fn_method_clientbuilder_room_key_recipient_strategy(
    void *ptr, RustBuffer strategy, RustCallStatus *uniffi_out_err);
void *uniffi_matrix_sdk_ffi_fn_method_clientbuilder_server_name(
    void *ptr, RustBuffer server_name, RustCallStatus *uniffi_out_err);
void *
uniffi_matrix_sdk_ffi_fn_method_clientbuilder_server_name_or_homeserver_url(
    void *ptr, RustBuffer server_name_or_url, RustCallStatus *uniffi_out_err);
void *uniffi_matrix_sdk_ffi_fn_method_clientbuilder_session_paths(
    void *ptr, RustBuffer data_path, RustBuffer cache_path,
    RustCallStatus *uniffi_out_err);
void *uniffi_matrix_sdk_ffi_fn_method_clientbuilder_set_session_delegate(
    void *ptr, uint64_t session_delegate, RustCallStatus *uniffi_out_err);
void *
uniffi_matrix_sdk_ffi_fn_method_clientbuilder_sliding_sync_version_builder(
    void *ptr, RustBuffer version_builder, RustCallStatus *uniffi_out_err);
void *
uniffi_matrix_sdk_ffi_fn_method_clientbuilder_use_event_cache_persistent_storage(
    void *ptr, int8_t value, RustCallStatus *uniffi_out_err);
void *uniffi_matrix_sdk_ffi_fn_method_clientbuilder_user_agent(
    void *ptr, RustBuffer user_agent, RustCallStatus *uniffi_out_err);
void *uniffi_matrix_sdk_ffi_fn_method_clientbuilder_username(
    void *ptr, RustBuffer username, RustCallStatus *uniffi_out_err);
void *uniffi_matrix_sdk_ffi_fn_clone_encryption(void *ptr,
                                                RustCallStatus *uniffi_out_err);
void uniffi_matrix_sdk_ffi_fn_free_encryption(void *ptr,
                                              RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_encryption_backup_exists_on_server(void *ptr);
RustBuffer uniffi_matrix_sdk_ffi_fn_method_encryption_backup_state(
    void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_matrix_sdk_ffi_fn_method_encryption_backup_state_listener(
    void *ptr, uint64_t listener, RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_encryption_curve25519_key(void *ptr);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_encryption_disable_recovery(void *ptr);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_encryption_ed25519_key(void *ptr);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_encryption_enable_backups(void *ptr);
/*handle*/ uint64_t uniffi_matrix_sdk_ffi_fn_method_encryption_enable_recovery(
    void *ptr, int8_t wait_for_backups_to_upload, RustBuffer passphrase,
    uint64_t progress_listener);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_encryption_is_last_device(void *ptr);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_encryption_recover(void *ptr,
                                                   RustBuffer recovery_key);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_encryption_recover_and_reset(
    void *ptr, RustBuffer old_recovery_key);
RustBuffer uniffi_matrix_sdk_ffi_fn_method_encryption_recovery_state(
    void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_matrix_sdk_ffi_fn_method_encryption_recovery_state_listener(
    void *ptr, uint64_t listener, RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_encryption_reset_identity(void *ptr);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_encryption_reset_recovery_key(void *ptr);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_encryption_user_identity(void *ptr,
                                                         RustBuffer user_id);
RustBuffer uniffi_matrix_sdk_ffi_fn_method_encryption_verification_state(
    void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_matrix_sdk_ffi_fn_method_encryption_verification_state_listener(
    void *ptr, uint64_t listener, RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_encryption_wait_for_backup_upload_steady_state(
    void *ptr, RustBuffer progress_listener);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_encryption_wait_for_e2ee_initialization_tasks(
    void *ptr);
void *uniffi_matrix_sdk_ffi_fn_clone_homeserverlogindetails(
    void *ptr, RustCallStatus *uniffi_out_err);
void uniffi_matrix_sdk_ffi_fn_free_homeserverlogindetails(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_matrix_sdk_ffi_fn_method_homeserverlogindetails_sliding_sync_version(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_matrix_sdk_ffi_fn_method_homeserverlogindetails_supported_oidc_prompts(
    void *ptr, RustCallStatus *uniffi_out_err);
int8_t
uniffi_matrix_sdk_ffi_fn_method_homeserverlogindetails_supports_oidc_login(
    void *ptr, RustCallStatus *uniffi_out_err);
int8_t
uniffi_matrix_sdk_ffi_fn_method_homeserverlogindetails_supports_password_login(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_matrix_sdk_ffi_fn_method_homeserverlogindetails_url(
    void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_matrix_sdk_ffi_fn_clone_identityresethandle(
    void *ptr, RustCallStatus *uniffi_out_err);
void uniffi_matrix_sdk_ffi_fn_free_identityresethandle(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_matrix_sdk_ffi_fn_method_identityresethandle_auth_type(
    void *ptr, RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_identityresethandle_cancel(void *ptr);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_identityresethandle_reset(void *ptr,
                                                          RustBuffer auth);
void *
uniffi_matrix_sdk_ffi_fn_clone_inreplytodetails(void *ptr,
                                                RustCallStatus *uniffi_out_err);
void uniffi_matrix_sdk_ffi_fn_free_inreplytodetails(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_matrix_sdk_ffi_fn_method_inreplytodetails_event(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_matrix_sdk_ffi_fn_method_inreplytodetails_event_id(
    void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_matrix_sdk_ffi_fn_clone_knockrequestactions(
    void *ptr, RustCallStatus *uniffi_out_err);
void uniffi_matrix_sdk_ffi_fn_free_knockrequestactions(
    void *ptr, RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_knockrequestactions_accept(void *ptr);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_knockrequestactions_decline(void *ptr,
                                                            RustBuffer reason);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_knockrequestactions_decline_and_ban(
    void *ptr, RustBuffer reason);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_knockrequestactions_mark_as_seen(void *ptr);
void *uniffi_matrix_sdk_ffi_fn_clone_lazytimelineitemprovider(
    void *ptr, RustCallStatus *uniffi_out_err);
void uniffi_matrix_sdk_ffi_fn_free_lazytimelineitemprovider(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_matrix_sdk_ffi_fn_method_lazytimelineitemprovider_debug_info(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_matrix_sdk_ffi_fn_method_lazytimelineitemprovider_get_send_handle(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_matrix_sdk_ffi_fn_method_lazytimelineitemprovider_get_shields(
    void *ptr, int8_t strict, RustCallStatus *uniffi_out_err);
void *
uniffi_matrix_sdk_ffi_fn_clone_mediafilehandle(void *ptr,
                                               RustCallStatus *uniffi_out_err);
void uniffi_matrix_sdk_ffi_fn_free_mediafilehandle(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_matrix_sdk_ffi_fn_method_mediafilehandle_path(
    void *ptr, RustCallStatus *uniffi_out_err);
int8_t uniffi_matrix_sdk_ffi_fn_method_mediafilehandle_persist(
    void *ptr, RustBuffer path, RustCallStatus *uniffi_out_err);
void *
uniffi_matrix_sdk_ffi_fn_clone_mediasource(void *ptr,
                                           RustCallStatus *uniffi_out_err);
void uniffi_matrix_sdk_ffi_fn_free_mediasource(void *ptr,
                                               RustCallStatus *uniffi_out_err);
void *uniffi_matrix_sdk_ffi_fn_constructor_mediasource_from_json(
    RustBuffer json, RustCallStatus *uniffi_out_err);
void *uniffi_matrix_sdk_ffi_fn_constructor_mediasource_from_url(
    RustBuffer url, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_matrix_sdk_ffi_fn_method_mediasource_to_json(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_matrix_sdk_ffi_fn_method_mediasource_url(void *ptr,
                                                RustCallStatus *uniffi_out_err);
void *uniffi_matrix_sdk_ffi_fn_clone_notificationclient(
    void *ptr, RustCallStatus *uniffi_out_err);
void uniffi_matrix_sdk_ffi_fn_free_notificationclient(
    void *ptr, RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_notificationclient_get_notification(
    void *ptr, RustBuffer room_id, RustBuffer event_id);
void *uniffi_matrix_sdk_ffi_fn_clone_notificationsettings(
    void *ptr, RustCallStatus *uniffi_out_err);
void uniffi_matrix_sdk_ffi_fn_free_notificationsettings(
    void *ptr, RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_notificationsettings_can_homeserver_push_encrypted_event_to_device(
    void *ptr);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_notificationsettings_can_push_encrypted_event_to_device(
    void *ptr);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_notificationsettings_contains_keywords_rules(
    void *ptr);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_notificationsettings_get_default_room_notification_mode(
    void *ptr, int8_t is_encrypted, int8_t is_one_to_one);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_notificationsettings_get_room_notification_settings(
    void *ptr, RustBuffer room_id, int8_t is_encrypted, int8_t is_one_to_one);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_notificationsettings_get_rooms_with_user_defined_rules(
    void *ptr, RustBuffer enabled);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_notificationsettings_get_user_defined_room_notification_mode(
    void *ptr, RustBuffer room_id);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_notificationsettings_is_call_enabled(void *ptr);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_notificationsettings_is_invite_for_me_enabled(
    void *ptr);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_notificationsettings_is_room_mention_enabled(
    void *ptr);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_notificationsettings_is_user_mention_enabled(
    void *ptr);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_notificationsettings_restore_default_room_notification_mode(
    void *ptr, RustBuffer room_id);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_notificationsettings_set_call_enabled(
    void *ptr, int8_t enabled);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_notificationsettings_set_default_room_notification_mode(
    void *ptr, int8_t is_encrypted, int8_t is_one_to_one, RustBuffer mode);
void uniffi_matrix_sdk_ffi_fn_method_notificationsettings_set_delegate(
    void *ptr, RustBuffer delegate, RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_notificationsettings_set_invite_for_me_enabled(
    void *ptr, int8_t enabled);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_notificationsettings_set_room_mention_enabled(
    void *ptr, int8_t enabled);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_notificationsettings_set_room_notification_mode(
    void *ptr, RustBuffer room_id, RustBuffer mode);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_notificationsettings_set_user_mention_enabled(
    void *ptr, int8_t enabled);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_notificationsettings_unmute_room(
    void *ptr, RustBuffer room_id, int8_t is_encrypted, int8_t is_one_to_one);
void *uniffi_matrix_sdk_ffi_fn_clone_qrcodedata(void *ptr,
                                                RustCallStatus *uniffi_out_err);
void uniffi_matrix_sdk_ffi_fn_free_qrcodedata(void *ptr,
                                              RustCallStatus *uniffi_out_err);
void *uniffi_matrix_sdk_ffi_fn_constructor_qrcodedata_from_bytes(
    RustBuffer bytes, RustCallStatus *uniffi_out_err);
void *uniffi_matrix_sdk_ffi_fn_clone_room(void *ptr,
                                          RustCallStatus *uniffi_out_err);
void uniffi_matrix_sdk_ffi_fn_free_room(void *ptr,
                                        RustCallStatus *uniffi_out_err);
uint64_t uniffi_matrix_sdk_ffi_fn_method_room_active_members_count(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_matrix_sdk_ffi_fn_method_room_active_room_call_participants(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_matrix_sdk_ffi_fn_method_room_alternative_aliases(
    void *ptr, RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_room_apply_power_level_changes(
    void *ptr, RustBuffer changes);
RustBuffer
uniffi_matrix_sdk_ffi_fn_method_room_avatar_url(void *ptr,
                                                RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_room_ban_user(void *ptr, RustBuffer user_id,
                                              RustBuffer reason);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_room_can_user_ban(void *ptr,
                                                  RustBuffer user_id);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_room_can_user_invite(void *ptr,
                                                     RustBuffer user_id);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_room_can_user_kick(void *ptr,
                                                   RustBuffer user_id);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_room_can_user_pin_unpin(void *ptr,
                                                        RustBuffer user_id);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_room_can_user_redact_other(void *ptr,
                                                           RustBuffer user_id);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_room_can_user_redact_own(void *ptr,
                                                         RustBuffer user_id);
/*handle*/ uint64_t uniffi_matrix_sdk_ffi_fn_method_room_can_user_send_message(
    void *ptr, RustBuffer user_id, RustBuffer message);
/*handle*/ uint64_t uniffi_matrix_sdk_ffi_fn_method_room_can_user_send_state(
    void *ptr, RustBuffer user_id, RustBuffer state_event);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_room_can_user_trigger_room_notification(
    void *ptr, RustBuffer user_id);
RustBuffer uniffi_matrix_sdk_ffi_fn_method_room_canonical_alias(
    void *ptr, RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_room_clear_composer_draft(void *ptr);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_room_clear_event_cache_storage(void *ptr);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_room_discard_room_key(void *ptr);
RustBuffer uniffi_matrix_sdk_ffi_fn_method_room_display_name(
    void *ptr, RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_room_edit(void *ptr, RustBuffer event_id,
                                          void *new_content);
void uniffi_matrix_sdk_ffi_fn_method_room_enable_send_queue(
    void *ptr, int8_t enable, RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_room_get_power_levels(void *ptr);
int8_t uniffi_matrix_sdk_ffi_fn_method_room_has_active_room_call(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_matrix_sdk_ffi_fn_method_room_heroes(void *ptr,
                                            RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_matrix_sdk_ffi_fn_method_room_id(void *ptr,
                                        RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_room_ignore_device_trust_and_resend(
    void *ptr, RustBuffer devices, void *send_handle);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_room_ignore_user(void *ptr, RustBuffer user_id);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_room_invite_user_by_id(void *ptr,
                                                       RustBuffer user_id);
uint64_t uniffi_matrix_sdk_ffi_fn_method_room_invited_members_count(
    void *ptr, RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t uniffi_matrix_sdk_ffi_fn_method_room_inviter(void *ptr);
int8_t
uniffi_matrix_sdk_ffi_fn_method_room_is_direct(void *ptr,
                                               RustCallStatus *uniffi_out_err);
int8_t uniffi_matrix_sdk_ffi_fn_method_room_is_encrypted(
    void *ptr, RustCallStatus *uniffi_out_err);
int8_t
uniffi_matrix_sdk_ffi_fn_method_room_is_public(void *ptr,
                                               RustCallStatus *uniffi_out_err);
int8_t uniffi_matrix_sdk_ffi_fn_method_room_is_send_queue_enabled(
    void *ptr, RustCallStatus *uniffi_out_err);
int8_t
uniffi_matrix_sdk_ffi_fn_method_room_is_space(void *ptr,
                                              RustCallStatus *uniffi_out_err);
int8_t uniffi_matrix_sdk_ffi_fn_method_room_is_tombstoned(
    void *ptr, RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t uniffi_matrix_sdk_ffi_fn_method_room_join(void *ptr);
uint64_t uniffi_matrix_sdk_ffi_fn_method_room_joined_members_count(
    void *ptr, RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_room_kick_user(void *ptr, RustBuffer user_id,
                                               RustBuffer reason);
/*handle*/ uint64_t uniffi_matrix_sdk_ffi_fn_method_room_leave(void *ptr);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_room_load_composer_draft(void *ptr);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_room_mark_as_read(void *ptr,
                                                  RustBuffer receipt_type);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_room_matrix_to_event_permalink(
    void *ptr, RustBuffer event_id);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_room_matrix_to_permalink(void *ptr);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_room_member(void *ptr, RustBuffer user_id);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_room_member_avatar_url(void *ptr,
                                                       RustBuffer user_id);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_room_member_display_name(void *ptr,
                                                         RustBuffer user_id);
/*handle*/ uint64_t uniffi_matrix_sdk_ffi_fn_method_room_members(void *ptr);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_room_members_no_sync(void *ptr);
RustBuffer
uniffi_matrix_sdk_ffi_fn_method_room_membership(void *ptr,
                                                RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_room_message_filtered_timeline(
    void *ptr, RustBuffer internal_id_prefix, RustBuffer allowed_message_types,
    RustBuffer date_divider_mode);
RustBuffer uniffi_matrix_sdk_ffi_fn_method_room_own_user_id(
    void *ptr, RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t uniffi_matrix_sdk_ffi_fn_method_room_pinned_events_timeline(
    void *ptr, RustBuffer internal_id_prefix, uint16_t max_events_to_load,
    uint16_t max_concurrent_requests);
RustBuffer
uniffi_matrix_sdk_ffi_fn_method_room_raw_name(void *ptr,
                                              RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_room_redact(void *ptr, RustBuffer event_id,
                                            RustBuffer reason);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_room_remove_avatar(void *ptr);
/*handle*/ uint64_t uniffi_matrix_sdk_ffi_fn_method_room_report_content(
    void *ptr, RustBuffer event_id, RustBuffer score, RustBuffer reason);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_room_reset_power_levels(void *ptr);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_room_room_events_debug_string(void *ptr);
/*handle*/ uint64_t uniffi_matrix_sdk_ffi_fn_method_room_room_info(void *ptr);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_room_save_composer_draft(void *ptr,
                                                         RustBuffer draft);
/*handle*/ uint64_t uniffi_matrix_sdk_ffi_fn_method_room_send_call_notification(
    void *ptr, RustBuffer call_id, RustBuffer application,
    RustBuffer notify_type, RustBuffer mentions);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_room_send_call_notification_if_needed(
    void *ptr);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_room_send_raw(void *ptr, RustBuffer event_type,
                                              RustBuffer content);
/*handle*/ uint64_t uniffi_matrix_sdk_ffi_fn_method_room_set_is_favourite(
    void *ptr, int8_t is_favourite, RustBuffer tag_order);
/*handle*/ uint64_t uniffi_matrix_sdk_ffi_fn_method_room_set_is_low_priority(
    void *ptr, int8_t is_low_priority, RustBuffer tag_order);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_room_set_name(void *ptr, RustBuffer name);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_room_set_topic(void *ptr, RustBuffer topic);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_room_set_unread_flag(void *ptr,
                                                     int8_t new_value);
void *uniffi_matrix_sdk_ffi_fn_method_room_subscribe_to_identity_status_changes(
    void *ptr, uint64_t listener, RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_room_subscribe_to_knock_requests(
    void *ptr, uint64_t listener);
void *uniffi_matrix_sdk_ffi_fn_method_room_subscribe_to_room_info_updates(
    void *ptr, uint64_t listener, RustCallStatus *uniffi_out_err);
void *uniffi_matrix_sdk_ffi_fn_method_room_subscribe_to_typing_notifications(
    void *ptr, uint64_t listener, RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_room_suggested_role_for_user(
    void *ptr, RustBuffer user_id);
/*handle*/ uint64_t uniffi_matrix_sdk_ffi_fn_method_room_timeline(void *ptr);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_room_timeline_focused_on_event(
    void *ptr, RustBuffer event_id, uint16_t num_context_events,
    RustBuffer internal_id_prefix);
RustBuffer
uniffi_matrix_sdk_ffi_fn_method_room_topic(void *ptr,
                                           RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_room_typing_notice(void *ptr, int8_t is_typing);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_room_unban_user(void *ptr, RustBuffer user_id,
                                                RustBuffer reason);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_room_update_power_levels_for_users(
    void *ptr, RustBuffer updates);
/*handle*/ uint64_t uniffi_matrix_sdk_ffi_fn_method_room_upload_avatar(
    void *ptr, RustBuffer mime_type, RustBuffer data, RustBuffer media_info);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_room_withdraw_verification_and_resend(
    void *ptr, RustBuffer user_ids, void *send_handle);
void *uniffi_matrix_sdk_ffi_fn_clone_roomdirectorysearch(
    void *ptr, RustCallStatus *uniffi_out_err);
void uniffi_matrix_sdk_ffi_fn_free_roomdirectorysearch(
    void *ptr, RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_roomdirectorysearch_is_at_last_page(void *ptr);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_roomdirectorysearch_loaded_pages(void *ptr);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_roomdirectorysearch_next_page(void *ptr);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_roomdirectorysearch_results(void *ptr,
                                                            uint64_t listener);
/*handle*/ uint64_t uniffi_matrix_sdk_ffi_fn_method_roomdirectorysearch_search(
    void *ptr, RustBuffer filter, uint32_t batch_size,
    RustBuffer via_server_name);
void *uniffi_matrix_sdk_ffi_fn_clone_roomlist(void *ptr,
                                              RustCallStatus *uniffi_out_err);
void uniffi_matrix_sdk_ffi_fn_free_roomlist(void *ptr,
                                            RustCallStatus *uniffi_out_err);
void *uniffi_matrix_sdk_ffi_fn_method_roomlist_entries_with_dynamic_adapters(
    void *ptr, uint32_t page_size, uint64_t listener,
    RustCallStatus *uniffi_out_err);
RustBuffer uniffi_matrix_sdk_ffi_fn_method_roomlist_loading_state(
    void *ptr, uint64_t listener, RustCallStatus *uniffi_out_err);
void *
uniffi_matrix_sdk_ffi_fn_method_roomlist_room(void *ptr, RustBuffer room_id,
                                              RustCallStatus *uniffi_out_err);
void *uniffi_matrix_sdk_ffi_fn_clone_roomlistdynamicentriescontroller(
    void *ptr, RustCallStatus *uniffi_out_err);
void uniffi_matrix_sdk_ffi_fn_free_roomlistdynamicentriescontroller(
    void *ptr, RustCallStatus *uniffi_out_err);
void uniffi_matrix_sdk_ffi_fn_method_roomlistdynamicentriescontroller_add_one_page(
    void *ptr, RustCallStatus *uniffi_out_err);
void uniffi_matrix_sdk_ffi_fn_method_roomlistdynamicentriescontroller_reset_to_one_page(
    void *ptr, RustCallStatus *uniffi_out_err);
int8_t
uniffi_matrix_sdk_ffi_fn_method_roomlistdynamicentriescontroller_set_filter(
    void *ptr, RustBuffer kind, RustCallStatus *uniffi_out_err);
void *uniffi_matrix_sdk_ffi_fn_clone_roomlistentrieswithdynamicadaptersresult(
    void *ptr, RustCallStatus *uniffi_out_err);
void uniffi_matrix_sdk_ffi_fn_free_roomlistentrieswithdynamicadaptersresult(
    void *ptr, RustCallStatus *uniffi_out_err);
void *
uniffi_matrix_sdk_ffi_fn_method_roomlistentrieswithdynamicadaptersresult_controller(
    void *ptr, RustCallStatus *uniffi_out_err);
void *
uniffi_matrix_sdk_ffi_fn_method_roomlistentrieswithdynamicadaptersresult_entries_stream(
    void *ptr, RustCallStatus *uniffi_out_err);
void *
uniffi_matrix_sdk_ffi_fn_clone_roomlistitem(void *ptr,
                                            RustCallStatus *uniffi_out_err);
void uniffi_matrix_sdk_ffi_fn_free_roomlistitem(void *ptr,
                                                RustCallStatus *uniffi_out_err);
RustBuffer uniffi_matrix_sdk_ffi_fn_method_roomlistitem_avatar_url(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_matrix_sdk_ffi_fn_method_roomlistitem_canonical_alias(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_matrix_sdk_ffi_fn_method_roomlistitem_display_name(
    void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_matrix_sdk_ffi_fn_method_roomlistitem_full_room(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_matrix_sdk_ffi_fn_method_roomlistitem_id(void *ptr,
                                                RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t uniffi_matrix_sdk_ffi_fn_method_roomlistitem_init_timeline(
    void *ptr, RustBuffer event_type_filter, RustBuffer internal_id_prefix);
void *uniffi_matrix_sdk_ffi_fn_method_roomlistitem_invited_room(
    void *ptr, RustCallStatus *uniffi_out_err);
int8_t uniffi_matrix_sdk_ffi_fn_method_roomlistitem_is_direct(
    void *ptr, RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_roomlistitem_is_encrypted(void *ptr);
int8_t uniffi_matrix_sdk_ffi_fn_method_roomlistitem_is_timeline_initialized(
    void *ptr, RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_roomlistitem_latest_event(void *ptr);
RustBuffer uniffi_matrix_sdk_ffi_fn_method_roomlistitem_membership(
    void *ptr, RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_roomlistitem_preview_room(void *ptr,
                                                          RustBuffer via);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_roomlistitem_room_info(void *ptr);
void *
uniffi_matrix_sdk_ffi_fn_clone_roomlistservice(void *ptr,
                                               RustCallStatus *uniffi_out_err);
void uniffi_matrix_sdk_ffi_fn_free_roomlistservice(
    void *ptr, RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_roomlistservice_all_rooms(void *ptr);
void *uniffi_matrix_sdk_ffi_fn_method_roomlistservice_room(
    void *ptr, RustBuffer room_id, RustCallStatus *uniffi_out_err);
void *uniffi_matrix_sdk_ffi_fn_method_roomlistservice_state(
    void *ptr, uint64_t listener, RustCallStatus *uniffi_out_err);
void uniffi_matrix_sdk_ffi_fn_method_roomlistservice_subscribe_to_rooms(
    void *ptr, RustBuffer room_ids, RustCallStatus *uniffi_out_err);
void *uniffi_matrix_sdk_ffi_fn_method_roomlistservice_sync_indicator(
    void *ptr, uint32_t delay_before_showing_in_ms,
    uint32_t delay_before_hiding_in_ms, uint64_t listener,
    RustCallStatus *uniffi_out_err);
void *uniffi_matrix_sdk_ffi_fn_clone_roommembersiterator(
    void *ptr, RustCallStatus *uniffi_out_err);
void uniffi_matrix_sdk_ffi_fn_free_roommembersiterator(
    void *ptr, RustCallStatus *uniffi_out_err);
uint32_t uniffi_matrix_sdk_ffi_fn_method_roommembersiterator_len(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_matrix_sdk_ffi_fn_method_roommembersiterator_next_chunk(
    void *ptr, uint32_t chunk_size, RustCallStatus *uniffi_out_err);
void *uniffi_matrix_sdk_ffi_fn_clone_roommessageeventcontentwithoutrelation(
    void *ptr, RustCallStatus *uniffi_out_err);
void uniffi_matrix_sdk_ffi_fn_free_roommessageeventcontentwithoutrelation(
    void *ptr, RustCallStatus *uniffi_out_err);
void *
uniffi_matrix_sdk_ffi_fn_method_roommessageeventcontentwithoutrelation_with_mentions(
    void *ptr, RustBuffer mentions, RustCallStatus *uniffi_out_err);
void *
uniffi_matrix_sdk_ffi_fn_clone_roompreview(void *ptr,
                                           RustCallStatus *uniffi_out_err);
void uniffi_matrix_sdk_ffi_fn_free_roompreview(void *ptr,
                                               RustCallStatus *uniffi_out_err);
RustBuffer uniffi_matrix_sdk_ffi_fn_method_roompreview_info(
    void *ptr, RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_roompreview_inviter(void *ptr);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_roompreview_leave(void *ptr);
void *uniffi_matrix_sdk_ffi_fn_clone_sendattachmentjoinhandle(
    void *ptr, RustCallStatus *uniffi_out_err);
void uniffi_matrix_sdk_ffi_fn_free_sendattachmentjoinhandle(
    void *ptr, RustCallStatus *uniffi_out_err);
void uniffi_matrix_sdk_ffi_fn_method_sendattachmentjoinhandle_cancel(
    void *ptr, RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_sendattachmentjoinhandle_join(void *ptr);
void *uniffi_matrix_sdk_ffi_fn_clone_sendhandle(void *ptr,
                                                RustCallStatus *uniffi_out_err);
void uniffi_matrix_sdk_ffi_fn_free_sendhandle(void *ptr,
                                              RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t uniffi_matrix_sdk_ffi_fn_method_sendhandle_abort(void *ptr);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_sendhandle_try_resend(void *ptr);
void *uniffi_matrix_sdk_ffi_fn_clone_sessionverificationcontroller(
    void *ptr, RustCallStatus *uniffi_out_err);
void uniffi_matrix_sdk_ffi_fn_free_sessionverificationcontroller(
    void *ptr, RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_sessionverificationcontroller_accept_verification_request(
    void *ptr);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_sessionverificationcontroller_acknowledge_verification_request(
    void *ptr, RustBuffer sender_id, RustBuffer flow_id);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_sessionverificationcontroller_approve_verification(
    void *ptr);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_sessionverificationcontroller_cancel_verification(
    void *ptr);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_sessionverificationcontroller_decline_verification(
    void *ptr);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_sessionverificationcontroller_request_verification(
    void *ptr);
void uniffi_matrix_sdk_ffi_fn_method_sessionverificationcontroller_set_delegate(
    void *ptr, RustBuffer delegate, RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_sessionverificationcontroller_start_sas_verification(
    void *ptr);
void *uniffi_matrix_sdk_ffi_fn_clone_sessionverificationemoji(
    void *ptr, RustCallStatus *uniffi_out_err);
void uniffi_matrix_sdk_ffi_fn_free_sessionverificationemoji(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_matrix_sdk_ffi_fn_method_sessionverificationemoji_description(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_matrix_sdk_ffi_fn_method_sessionverificationemoji_symbol(
    void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_matrix_sdk_ffi_fn_clone_span(void *ptr,
                                          RustCallStatus *uniffi_out_err);
void uniffi_matrix_sdk_ffi_fn_free_span(void *ptr,
                                        RustCallStatus *uniffi_out_err);
void *uniffi_matrix_sdk_ffi_fn_constructor_span_current(
    RustCallStatus *uniffi_out_err);
void *uniffi_matrix_sdk_ffi_fn_constructor_span_new(
    RustBuffer file, RustBuffer line, RustBuffer level, RustBuffer target,
    RustBuffer name, RustCallStatus *uniffi_out_err);
void uniffi_matrix_sdk_ffi_fn_method_span_enter(void *ptr,
                                                RustCallStatus *uniffi_out_err);
void uniffi_matrix_sdk_ffi_fn_method_span_exit(void *ptr,
                                               RustCallStatus *uniffi_out_err);
int8_t
uniffi_matrix_sdk_ffi_fn_method_span_is_none(void *ptr,
                                             RustCallStatus *uniffi_out_err);
void *uniffi_matrix_sdk_ffi_fn_clone_ssohandler(void *ptr,
                                                RustCallStatus *uniffi_out_err);
void uniffi_matrix_sdk_ffi_fn_free_ssohandler(void *ptr,
                                              RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_ssohandler_finish(void *ptr,
                                                  RustBuffer callback_url);
RustBuffer
uniffi_matrix_sdk_ffi_fn_method_ssohandler_url(void *ptr,
                                               RustCallStatus *uniffi_out_err);
void *
uniffi_matrix_sdk_ffi_fn_clone_syncservice(void *ptr,
                                           RustCallStatus *uniffi_out_err);
void uniffi_matrix_sdk_ffi_fn_free_syncservice(void *ptr,
                                               RustCallStatus *uniffi_out_err);
void *uniffi_matrix_sdk_ffi_fn_method_syncservice_room_list_service(
    void *ptr, RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_syncservice_start(void *ptr);
void *uniffi_matrix_sdk_ffi_fn_method_syncservice_state(
    void *ptr, uint64_t listener, RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t uniffi_matrix_sdk_ffi_fn_method_syncservice_stop(void *ptr);
void *uniffi_matrix_sdk_ffi_fn_clone_syncservicebuilder(
    void *ptr, RustCallStatus *uniffi_out_err);
void uniffi_matrix_sdk_ffi_fn_free_syncservicebuilder(
    void *ptr, RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_syncservicebuilder_finish(void *ptr);
void *
uniffi_matrix_sdk_ffi_fn_method_syncservicebuilder_with_cross_process_lock(
    void *ptr, RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_syncservicebuilder_with_utd_hook(
    void *ptr, uint64_t delegate);
void *uniffi_matrix_sdk_ffi_fn_clone_taskhandle(void *ptr,
                                                RustCallStatus *uniffi_out_err);
void uniffi_matrix_sdk_ffi_fn_free_taskhandle(void *ptr,
                                              RustCallStatus *uniffi_out_err);
void uniffi_matrix_sdk_ffi_fn_method_taskhandle_cancel(
    void *ptr, RustCallStatus *uniffi_out_err);
int8_t uniffi_matrix_sdk_ffi_fn_method_taskhandle_is_finished(
    void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_matrix_sdk_ffi_fn_clone_timeline(void *ptr,
                                              RustCallStatus *uniffi_out_err);
void uniffi_matrix_sdk_ffi_fn_free_timeline(void *ptr,
                                            RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_timeline_add_listener(void *ptr,
                                                      uint64_t listener);
RustBuffer uniffi_matrix_sdk_ffi_fn_method_timeline_create_message_content(
    void *ptr, RustBuffer msg_type, RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t uniffi_matrix_sdk_ffi_fn_method_timeline_create_poll(
    void *ptr, RustBuffer question, RustBuffer answers, uint8_t max_selections,
    RustBuffer poll_kind);
/*handle*/ uint64_t uniffi_matrix_sdk_ffi_fn_method_timeline_edit(
    void *ptr, RustBuffer event_or_transaction_id, RustBuffer new_content);
void uniffi_matrix_sdk_ffi_fn_method_timeline_end_poll(
    void *ptr, RustBuffer poll_start_event_id, RustBuffer text,
    RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_timeline_fetch_details_for_event(
    void *ptr, RustBuffer event_id);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_timeline_fetch_members(void *ptr);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_timeline_focused_paginate_forwards(
    void *ptr, uint16_t num_events);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_timeline_get_event_timeline_item_by_event_id(
    void *ptr, RustBuffer event_id);
/*handle*/ uint64_t uniffi_matrix_sdk_ffi_fn_method_timeline_load_reply_details(
    void *ptr, RustBuffer event_id_str);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_timeline_mark_as_read(void *ptr,
                                                      RustBuffer receipt_type);
/*handle*/ uint64_t uniffi_matrix_sdk_ffi_fn_method_timeline_paginate_backwards(
    void *ptr, uint16_t num_events);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_timeline_pin_event(void *ptr,
                                                   RustBuffer event_id);
/*handle*/ uint64_t uniffi_matrix_sdk_ffi_fn_method_timeline_redact_event(
    void *ptr, RustBuffer event_or_transaction_id, RustBuffer reason);
void uniffi_matrix_sdk_ffi_fn_method_timeline_retry_decryption(
    void *ptr, RustBuffer session_ids, RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t uniffi_matrix_sdk_ffi_fn_method_timeline_send(void *ptr,
                                                                  void *msg);
void *uniffi_matrix_sdk_ffi_fn_method_timeline_send_audio(
    void *ptr, RustBuffer url, RustBuffer audio_info, RustBuffer caption,
    RustBuffer formatted_caption, RustBuffer progress_watcher,
    int8_t use_send_queue, RustCallStatus *uniffi_out_err);
void *uniffi_matrix_sdk_ffi_fn_method_timeline_send_file(
    void *ptr, RustBuffer url, RustBuffer file_info, RustBuffer caption,
    RustBuffer formatted_caption, RustBuffer progress_watcher,
    int8_t use_send_queue, RustCallStatus *uniffi_out_err);
void *uniffi_matrix_sdk_ffi_fn_method_timeline_send_image(
    void *ptr, RustBuffer url, RustBuffer thumbnail_url, RustBuffer image_info,
    RustBuffer caption, RustBuffer formatted_caption,
    RustBuffer progress_watcher, int8_t use_send_queue,
    RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t uniffi_matrix_sdk_ffi_fn_method_timeline_send_location(
    void *ptr, RustBuffer body, RustBuffer geo_uri, RustBuffer description,
    RustBuffer zoom_level, RustBuffer asset_type);
/*handle*/ uint64_t uniffi_matrix_sdk_ffi_fn_method_timeline_send_poll_response(
    void *ptr, RustBuffer poll_start_event_id, RustBuffer answers);
/*handle*/ uint64_t uniffi_matrix_sdk_ffi_fn_method_timeline_send_read_receipt(
    void *ptr, RustBuffer receipt_type, RustBuffer event_id);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_timeline_send_reply(void *ptr, void *msg,
                                                    RustBuffer event_id);
void *uniffi_matrix_sdk_ffi_fn_method_timeline_send_video(
    void *ptr, RustBuffer url, RustBuffer thumbnail_url, RustBuffer video_info,
    RustBuffer caption, RustBuffer formatted_caption,
    RustBuffer progress_watcher, int8_t use_send_queue,
    RustCallStatus *uniffi_out_err);
void *uniffi_matrix_sdk_ffi_fn_method_timeline_send_voice_message(
    void *ptr, RustBuffer url, RustBuffer audio_info, RustBuffer waveform,
    RustBuffer caption, RustBuffer formatted_caption,
    RustBuffer progress_watcher, int8_t use_send_queue,
    RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_timeline_subscribe_to_back_pagination_status(
    void *ptr, uint64_t listener);
/*handle*/ uint64_t uniffi_matrix_sdk_ffi_fn_method_timeline_toggle_reaction(
    void *ptr, RustBuffer item_id, RustBuffer key);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_timeline_unpin_event(void *ptr,
                                                     RustBuffer event_id);
void *
uniffi_matrix_sdk_ffi_fn_clone_timelinediff(void *ptr,
                                            RustCallStatus *uniffi_out_err);
void uniffi_matrix_sdk_ffi_fn_free_timelinediff(void *ptr,
                                                RustCallStatus *uniffi_out_err);
RustBuffer uniffi_matrix_sdk_ffi_fn_method_timelinediff_append(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_matrix_sdk_ffi_fn_method_timelinediff_change(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_matrix_sdk_ffi_fn_method_timelinediff_insert(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_matrix_sdk_ffi_fn_method_timelinediff_push_back(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_matrix_sdk_ffi_fn_method_timelinediff_push_front(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_matrix_sdk_ffi_fn_method_timelinediff_remove(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_matrix_sdk_ffi_fn_method_timelinediff_reset(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_matrix_sdk_ffi_fn_method_timelinediff_set(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_matrix_sdk_ffi_fn_method_timelinediff_truncate(
    void *ptr, RustCallStatus *uniffi_out_err);
void *
uniffi_matrix_sdk_ffi_fn_clone_timelineevent(void *ptr,
                                             RustCallStatus *uniffi_out_err);
void uniffi_matrix_sdk_ffi_fn_free_timelineevent(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_matrix_sdk_ffi_fn_method_timelineevent_event_id(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_matrix_sdk_ffi_fn_method_timelineevent_event_type(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_matrix_sdk_ffi_fn_method_timelineevent_sender_id(
    void *ptr, RustCallStatus *uniffi_out_err);
uint64_t uniffi_matrix_sdk_ffi_fn_method_timelineevent_timestamp(
    void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_matrix_sdk_ffi_fn_clone_timelineeventtypefilter(
    void *ptr, RustCallStatus *uniffi_out_err);
void uniffi_matrix_sdk_ffi_fn_free_timelineeventtypefilter(
    void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_matrix_sdk_ffi_fn_constructor_timelineeventtypefilter_exclude(
    RustBuffer event_types, RustCallStatus *uniffi_out_err);
void *uniffi_matrix_sdk_ffi_fn_constructor_timelineeventtypefilter_include(
    RustBuffer event_types, RustCallStatus *uniffi_out_err);
void *
uniffi_matrix_sdk_ffi_fn_clone_timelineitem(void *ptr,
                                            RustCallStatus *uniffi_out_err);
void uniffi_matrix_sdk_ffi_fn_free_timelineitem(void *ptr,
                                                RustCallStatus *uniffi_out_err);
RustBuffer uniffi_matrix_sdk_ffi_fn_method_timelineitem_as_event(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_matrix_sdk_ffi_fn_method_timelineitem_as_virtual(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_matrix_sdk_ffi_fn_method_timelineitem_fmt_debug(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_matrix_sdk_ffi_fn_method_timelineitem_unique_id(
    void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_matrix_sdk_ffi_fn_clone_unreadnotificationscount(
    void *ptr, RustCallStatus *uniffi_out_err);
void uniffi_matrix_sdk_ffi_fn_free_unreadnotificationscount(
    void *ptr, RustCallStatus *uniffi_out_err);
int8_t
uniffi_matrix_sdk_ffi_fn_method_unreadnotificationscount_has_notifications(
    void *ptr, RustCallStatus *uniffi_out_err);
uint32_t
uniffi_matrix_sdk_ffi_fn_method_unreadnotificationscount_highlight_count(
    void *ptr, RustCallStatus *uniffi_out_err);
uint32_t
uniffi_matrix_sdk_ffi_fn_method_unreadnotificationscount_notification_count(
    void *ptr, RustCallStatus *uniffi_out_err);
void *
uniffi_matrix_sdk_ffi_fn_clone_useridentity(void *ptr,
                                            RustCallStatus *uniffi_out_err);
void uniffi_matrix_sdk_ffi_fn_free_useridentity(void *ptr,
                                                RustCallStatus *uniffi_out_err);
int8_t uniffi_matrix_sdk_ffi_fn_method_useridentity_is_verified(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_matrix_sdk_ffi_fn_method_useridentity_master_key(
    void *ptr, RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t uniffi_matrix_sdk_ffi_fn_method_useridentity_pin(void *ptr);
void *
uniffi_matrix_sdk_ffi_fn_clone_widgetdriver(void *ptr,
                                            RustCallStatus *uniffi_out_err);
void uniffi_matrix_sdk_ffi_fn_free_widgetdriver(void *ptr,
                                                RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t uniffi_matrix_sdk_ffi_fn_method_widgetdriver_run(
    void *ptr, void *room, uint64_t capabilities_provider);
void *uniffi_matrix_sdk_ffi_fn_clone_widgetdriverhandle(
    void *ptr, RustCallStatus *uniffi_out_err);
void uniffi_matrix_sdk_ffi_fn_free_widgetdriverhandle(
    void *ptr, RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_widgetdriverhandle_recv(void *ptr);
/*handle*/ uint64_t
uniffi_matrix_sdk_ffi_fn_method_widgetdriverhandle_send(void *ptr,
                                                        RustBuffer msg);
void uniffi_matrix_sdk_ffi_fn_init_callback_vtable_backupstatelistener(
    UniffiVTableCallbackInterfaceBackupStateListener *vtable);
void uniffi_matrix_sdk_ffi_fn_init_callback_vtable_backupsteadystatelistener(
    UniffiVTableCallbackInterfaceBackupSteadyStateListener *vtable);
void uniffi_matrix_sdk_ffi_fn_init_callback_vtable_clientdelegate(
    UniffiVTableCallbackInterfaceClientDelegate *vtable);
void uniffi_matrix_sdk_ffi_fn_init_callback_vtable_clientsessiondelegate(
    UniffiVTableCallbackInterfaceClientSessionDelegate *vtable);
void uniffi_matrix_sdk_ffi_fn_init_callback_vtable_enablerecoveryprogresslistener(
    UniffiVTableCallbackInterfaceEnableRecoveryProgressListener *vtable);
void uniffi_matrix_sdk_ffi_fn_init_callback_vtable_identitystatuschangelistener(
    UniffiVTableCallbackInterfaceIdentityStatusChangeListener *vtable);
void uniffi_matrix_sdk_ffi_fn_init_callback_vtable_ignoreduserslistener(
    UniffiVTableCallbackInterfaceIgnoredUsersListener *vtable);
void uniffi_matrix_sdk_ffi_fn_init_callback_vtable_knockrequestslistener(
    UniffiVTableCallbackInterfaceKnockRequestsListener *vtable);
void uniffi_matrix_sdk_ffi_fn_init_callback_vtable_notificationsettingsdelegate(
    UniffiVTableCallbackInterfaceNotificationSettingsDelegate *vtable);
void uniffi_matrix_sdk_ffi_fn_init_callback_vtable_paginationstatuslistener(
    UniffiVTableCallbackInterfacePaginationStatusListener *vtable);
void uniffi_matrix_sdk_ffi_fn_init_callback_vtable_progresswatcher(
    UniffiVTableCallbackInterfaceProgressWatcher *vtable);
void uniffi_matrix_sdk_ffi_fn_init_callback_vtable_qrloginprogresslistener(
    UniffiVTableCallbackInterfaceQrLoginProgressListener *vtable);
void uniffi_matrix_sdk_ffi_fn_init_callback_vtable_recoverystatelistener(
    UniffiVTableCallbackInterfaceRecoveryStateListener *vtable);
void uniffi_matrix_sdk_ffi_fn_init_callback_vtable_roomdirectorysearchentrieslistener(
    UniffiVTableCallbackInterfaceRoomDirectorySearchEntriesListener *vtable);
void uniffi_matrix_sdk_ffi_fn_init_callback_vtable_roominfolistener(
    UniffiVTableCallbackInterfaceRoomInfoListener *vtable);
void uniffi_matrix_sdk_ffi_fn_init_callback_vtable_roomlistentrieslistener(
    UniffiVTableCallbackInterfaceRoomListEntriesListener *vtable);
void uniffi_matrix_sdk_ffi_fn_init_callback_vtable_roomlistloadingstatelistener(
    UniffiVTableCallbackInterfaceRoomListLoadingStateListener *vtable);
void uniffi_matrix_sdk_ffi_fn_init_callback_vtable_roomlistservicestatelistener(
    UniffiVTableCallbackInterfaceRoomListServiceStateListener *vtable);
void uniffi_matrix_sdk_ffi_fn_init_callback_vtable_roomlistservicesyncindicatorlistener(
    UniffiVTableCallbackInterfaceRoomListServiceSyncIndicatorListener *vtable);
void uniffi_matrix_sdk_ffi_fn_init_callback_vtable_sendqueueroomerrorlistener(
    UniffiVTableCallbackInterfaceSendQueueRoomErrorListener *vtable);
void uniffi_matrix_sdk_ffi_fn_init_callback_vtable_sessionverificationcontrollerdelegate(
    UniffiVTableCallbackInterfaceSessionVerificationControllerDelegate *vtable);
void uniffi_matrix_sdk_ffi_fn_init_callback_vtable_syncservicestateobserver(
    UniffiVTableCallbackInterfaceSyncServiceStateObserver *vtable);
void uniffi_matrix_sdk_ffi_fn_init_callback_vtable_timelinelistener(
    UniffiVTableCallbackInterfaceTimelineListener *vtable);
void uniffi_matrix_sdk_ffi_fn_init_callback_vtable_typingnotificationslistener(
    UniffiVTableCallbackInterfaceTypingNotificationsListener *vtable);
void uniffi_matrix_sdk_ffi_fn_init_callback_vtable_unabletodecryptdelegate(
    UniffiVTableCallbackInterfaceUnableToDecryptDelegate *vtable);
void uniffi_matrix_sdk_ffi_fn_init_callback_vtable_verificationstatelistener(
    UniffiVTableCallbackInterfaceVerificationStateListener *vtable);
void uniffi_matrix_sdk_ffi_fn_init_callback_vtable_widgetcapabilitiesprovider(
    UniffiVTableCallbackInterfaceWidgetCapabilitiesProvider *vtable);
void *uniffi_matrix_sdk_ffi_fn_func_content_without_relation_from_message(
    RustBuffer message, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_matrix_sdk_ffi_fn_func_create_caption_edit(
    RustBuffer caption, RustBuffer formatted_caption,
    RustCallStatus *uniffi_out_err);
RustBuffer uniffi_matrix_sdk_ffi_fn_func_gen_transaction_id(
    RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t uniffi_matrix_sdk_ffi_fn_func_generate_webview_url(
    RustBuffer widget_settings, void *room, RustBuffer props);
RustBuffer uniffi_matrix_sdk_ffi_fn_func_get_element_call_required_permissions(
    RustBuffer own_user_id, RustBuffer own_device_id,
    RustCallStatus *uniffi_out_err);
int8_t uniffi_matrix_sdk_ffi_fn_func_is_room_alias_format_valid(
    RustBuffer alias, RustCallStatus *uniffi_out_err);
void uniffi_matrix_sdk_ffi_fn_func_log_event(RustBuffer file, RustBuffer line,
                                             RustBuffer level,
                                             RustBuffer target,
                                             RustBuffer message,
                                             RustCallStatus *uniffi_out_err);
RustBuffer uniffi_matrix_sdk_ffi_fn_func_make_element_well_known(
    RustBuffer string, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_matrix_sdk_ffi_fn_func_make_widget_driver(
    RustBuffer settings, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_matrix_sdk_ffi_fn_func_matrix_to_room_alias_permalink(
    RustBuffer room_alias, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_matrix_sdk_ffi_fn_func_matrix_to_user_permalink(
    RustBuffer user_id, RustCallStatus *uniffi_out_err);
void *uniffi_matrix_sdk_ffi_fn_func_message_event_content_from_html(
    RustBuffer body, RustBuffer html_body, RustCallStatus *uniffi_out_err);
void *uniffi_matrix_sdk_ffi_fn_func_message_event_content_from_html_as_emote(
    RustBuffer body, RustBuffer html_body, RustCallStatus *uniffi_out_err);
void *uniffi_matrix_sdk_ffi_fn_func_message_event_content_from_markdown(
    RustBuffer md, RustCallStatus *uniffi_out_err);
void *
uniffi_matrix_sdk_ffi_fn_func_message_event_content_from_markdown_as_emote(
    RustBuffer md, RustCallStatus *uniffi_out_err);
void *uniffi_matrix_sdk_ffi_fn_func_message_event_content_new(
    RustBuffer msgtype, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_matrix_sdk_ffi_fn_func_new_virtual_element_call_widget(
    RustBuffer props, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_matrix_sdk_ffi_fn_func_parse_matrix_entity_from(
    RustBuffer uri, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_matrix_sdk_ffi_fn_func_room_alias_name_from_room_display_name(
    RustBuffer room_name, RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_matrix_sdk_ffi_fn_func_sdk_git_sha(RustCallStatus *uniffi_out_err);
void uniffi_matrix_sdk_ffi_fn_func_setup_tracing(
    RustBuffer config, RustCallStatus *uniffi_out_err);
int64_t uniffi_matrix_sdk_ffi_fn_func_suggested_power_level_for_role(
    RustBuffer role, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_matrix_sdk_ffi_fn_func_suggested_role_for_power_level(
    int64_t power_level, RustCallStatus *uniffi_out_err);
RustBuffer ffi_matrix_sdk_ffi_rustbuffer_alloc(uint64_t size,
                                               RustCallStatus *uniffi_out_err);
RustBuffer
ffi_matrix_sdk_ffi_rustbuffer_from_bytes(ForeignBytes bytes,
                                         RustCallStatus *uniffi_out_err);
void ffi_matrix_sdk_ffi_rustbuffer_free(RustBuffer buf,
                                        RustCallStatus *uniffi_out_err);
RustBuffer
ffi_matrix_sdk_ffi_rustbuffer_reserve(RustBuffer buf, uint64_t additional,
                                      RustCallStatus *uniffi_out_err);
void ffi_matrix_sdk_ffi_rust_future_poll_u8(
    /*handle*/ uint64_t handle, UniffiRustFutureContinuationCallback callback,
    /*handle*/ uint64_t callback_data);
void ffi_matrix_sdk_ffi_rust_future_cancel_u8(
    /*handle*/ uint64_t handle);
void ffi_matrix_sdk_ffi_rust_future_free_u8(
    /*handle*/ uint64_t handle);
uint8_t ffi_matrix_sdk_ffi_rust_future_complete_u8(
    /*handle*/ uint64_t handle, RustCallStatus *uniffi_out_err);
void ffi_matrix_sdk_ffi_rust_future_poll_i8(
    /*handle*/ uint64_t handle, UniffiRustFutureContinuationCallback callback,
    /*handle*/ uint64_t callback_data);
void ffi_matrix_sdk_ffi_rust_future_cancel_i8(
    /*handle*/ uint64_t handle);
void ffi_matrix_sdk_ffi_rust_future_free_i8(
    /*handle*/ uint64_t handle);
int8_t ffi_matrix_sdk_ffi_rust_future_complete_i8(
    /*handle*/ uint64_t handle, RustCallStatus *uniffi_out_err);
void ffi_matrix_sdk_ffi_rust_future_poll_u16(
    /*handle*/ uint64_t handle, UniffiRustFutureContinuationCallback callback,
    /*handle*/ uint64_t callback_data);
void ffi_matrix_sdk_ffi_rust_future_cancel_u16(
    /*handle*/ uint64_t handle);
void ffi_matrix_sdk_ffi_rust_future_free_u16(
    /*handle*/ uint64_t handle);
uint16_t ffi_matrix_sdk_ffi_rust_future_complete_u16(
    /*handle*/ uint64_t handle, RustCallStatus *uniffi_out_err);
void ffi_matrix_sdk_ffi_rust_future_poll_i16(
    /*handle*/ uint64_t handle, UniffiRustFutureContinuationCallback callback,
    /*handle*/ uint64_t callback_data);
void ffi_matrix_sdk_ffi_rust_future_cancel_i16(
    /*handle*/ uint64_t handle);
void ffi_matrix_sdk_ffi_rust_future_free_i16(
    /*handle*/ uint64_t handle);
int16_t ffi_matrix_sdk_ffi_rust_future_complete_i16(
    /*handle*/ uint64_t handle, RustCallStatus *uniffi_out_err);
void ffi_matrix_sdk_ffi_rust_future_poll_u32(
    /*handle*/ uint64_t handle, UniffiRustFutureContinuationCallback callback,
    /*handle*/ uint64_t callback_data);
void ffi_matrix_sdk_ffi_rust_future_cancel_u32(
    /*handle*/ uint64_t handle);
void ffi_matrix_sdk_ffi_rust_future_free_u32(
    /*handle*/ uint64_t handle);
uint32_t ffi_matrix_sdk_ffi_rust_future_complete_u32(
    /*handle*/ uint64_t handle, RustCallStatus *uniffi_out_err);
void ffi_matrix_sdk_ffi_rust_future_poll_i32(
    /*handle*/ uint64_t handle, UniffiRustFutureContinuationCallback callback,
    /*handle*/ uint64_t callback_data);
void ffi_matrix_sdk_ffi_rust_future_cancel_i32(
    /*handle*/ uint64_t handle);
void ffi_matrix_sdk_ffi_rust_future_free_i32(
    /*handle*/ uint64_t handle);
int32_t ffi_matrix_sdk_ffi_rust_future_complete_i32(
    /*handle*/ uint64_t handle, RustCallStatus *uniffi_out_err);
void ffi_matrix_sdk_ffi_rust_future_poll_u64(
    /*handle*/ uint64_t handle, UniffiRustFutureContinuationCallback callback,
    /*handle*/ uint64_t callback_data);
void ffi_matrix_sdk_ffi_rust_future_cancel_u64(
    /*handle*/ uint64_t handle);
void ffi_matrix_sdk_ffi_rust_future_free_u64(
    /*handle*/ uint64_t handle);
uint64_t ffi_matrix_sdk_ffi_rust_future_complete_u64(
    /*handle*/ uint64_t handle, RustCallStatus *uniffi_out_err);
void ffi_matrix_sdk_ffi_rust_future_poll_i64(
    /*handle*/ uint64_t handle, UniffiRustFutureContinuationCallback callback,
    /*handle*/ uint64_t callback_data);
void ffi_matrix_sdk_ffi_rust_future_cancel_i64(
    /*handle*/ uint64_t handle);
void ffi_matrix_sdk_ffi_rust_future_free_i64(
    /*handle*/ uint64_t handle);
int64_t ffi_matrix_sdk_ffi_rust_future_complete_i64(
    /*handle*/ uint64_t handle, RustCallStatus *uniffi_out_err);
void ffi_matrix_sdk_ffi_rust_future_poll_f32(
    /*handle*/ uint64_t handle, UniffiRustFutureContinuationCallback callback,
    /*handle*/ uint64_t callback_data);
void ffi_matrix_sdk_ffi_rust_future_cancel_f32(
    /*handle*/ uint64_t handle);
void ffi_matrix_sdk_ffi_rust_future_free_f32(
    /*handle*/ uint64_t handle);
float ffi_matrix_sdk_ffi_rust_future_complete_f32(
    /*handle*/ uint64_t handle, RustCallStatus *uniffi_out_err);
void ffi_matrix_sdk_ffi_rust_future_poll_f64(
    /*handle*/ uint64_t handle, UniffiRustFutureContinuationCallback callback,
    /*handle*/ uint64_t callback_data);
void ffi_matrix_sdk_ffi_rust_future_cancel_f64(
    /*handle*/ uint64_t handle);
void ffi_matrix_sdk_ffi_rust_future_free_f64(
    /*handle*/ uint64_t handle);
double ffi_matrix_sdk_ffi_rust_future_complete_f64(
    /*handle*/ uint64_t handle, RustCallStatus *uniffi_out_err);
void ffi_matrix_sdk_ffi_rust_future_poll_pointer(
    /*handle*/ uint64_t handle, UniffiRustFutureContinuationCallback callback,
    /*handle*/ uint64_t callback_data);
void ffi_matrix_sdk_ffi_rust_future_cancel_pointer(
    /*handle*/ uint64_t handle);
void ffi_matrix_sdk_ffi_rust_future_free_pointer(
    /*handle*/ uint64_t handle);
void *ffi_matrix_sdk_ffi_rust_future_complete_pointer(
    /*handle*/ uint64_t handle, RustCallStatus *uniffi_out_err);
void ffi_matrix_sdk_ffi_rust_future_poll_rust_buffer(
    /*handle*/ uint64_t handle, UniffiRustFutureContinuationCallback callback,
    /*handle*/ uint64_t callback_data);
void ffi_matrix_sdk_ffi_rust_future_cancel_rust_buffer(
    /*handle*/ uint64_t handle);
void ffi_matrix_sdk_ffi_rust_future_free_rust_buffer(
    /*handle*/ uint64_t handle);
RustBuffer ffi_matrix_sdk_ffi_rust_future_complete_rust_buffer(
    /*handle*/ uint64_t handle, RustCallStatus *uniffi_out_err);
void ffi_matrix_sdk_ffi_rust_future_poll_void(
    /*handle*/ uint64_t handle, UniffiRustFutureContinuationCallback callback,
    /*handle*/ uint64_t callback_data);
void ffi_matrix_sdk_ffi_rust_future_cancel_void(
    /*handle*/ uint64_t handle);
void ffi_matrix_sdk_ffi_rust_future_free_void(
    /*handle*/ uint64_t handle);
void ffi_matrix_sdk_ffi_rust_future_complete_void(
    /*handle*/ uint64_t handle, RustCallStatus *uniffi_out_err);
uint16_t
uniffi_matrix_sdk_ffi_checksum_func_content_without_relation_from_message();
uint16_t uniffi_matrix_sdk_ffi_checksum_func_create_caption_edit();
uint16_t uniffi_matrix_sdk_ffi_checksum_func_gen_transaction_id();
uint16_t uniffi_matrix_sdk_ffi_checksum_func_generate_webview_url();
uint16_t
uniffi_matrix_sdk_ffi_checksum_func_get_element_call_required_permissions();
uint16_t uniffi_matrix_sdk_ffi_checksum_func_is_room_alias_format_valid();
uint16_t uniffi_matrix_sdk_ffi_checksum_func_log_event();
uint16_t uniffi_matrix_sdk_ffi_checksum_func_make_element_well_known();
uint16_t uniffi_matrix_sdk_ffi_checksum_func_make_widget_driver();
uint16_t uniffi_matrix_sdk_ffi_checksum_func_matrix_to_room_alias_permalink();
uint16_t uniffi_matrix_sdk_ffi_checksum_func_matrix_to_user_permalink();
uint16_t uniffi_matrix_sdk_ffi_checksum_func_message_event_content_from_html();
uint16_t
uniffi_matrix_sdk_ffi_checksum_func_message_event_content_from_html_as_emote();
uint16_t
uniffi_matrix_sdk_ffi_checksum_func_message_event_content_from_markdown();
uint16_t
uniffi_matrix_sdk_ffi_checksum_func_message_event_content_from_markdown_as_emote();
uint16_t uniffi_matrix_sdk_ffi_checksum_func_message_event_content_new();
uint16_t uniffi_matrix_sdk_ffi_checksum_func_new_virtual_element_call_widget();
uint16_t uniffi_matrix_sdk_ffi_checksum_func_parse_matrix_entity_from();
uint16_t
uniffi_matrix_sdk_ffi_checksum_func_room_alias_name_from_room_display_name();
uint16_t uniffi_matrix_sdk_ffi_checksum_func_sdk_git_sha();
uint16_t uniffi_matrix_sdk_ffi_checksum_func_setup_tracing();
uint16_t uniffi_matrix_sdk_ffi_checksum_func_suggested_power_level_for_role();
uint16_t uniffi_matrix_sdk_ffi_checksum_func_suggested_role_for_power_level();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_client_abort_oidc_auth();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_client_account_data();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_client_account_url();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_client_available_sliding_sync_versions();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_client_avatar_url();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_client_await_room_remote_echo();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_client_cached_avatar_url();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_client_can_deactivate_account();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_client_create_room();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_client_create_room_alias();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_client_custom_login_with_jwt();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_client_deactivate_account();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_client_delete_pusher();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_client_device_id();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_client_display_name();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_client_enable_all_send_queues();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_client_encryption();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_client_get_dm_room();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_client_get_media_content();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_client_get_media_file();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_client_get_media_thumbnail();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_client_get_notification_settings();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_client_get_profile();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_client_get_recently_visited_rooms();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_client_get_room_preview_from_room_alias();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_client_get_room_preview_from_room_id();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_client_get_session_verification_controller();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_client_get_url();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_client_homeserver();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_client_homeserver_login_details();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_client_ignore_user();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_client_ignored_users();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_client_is_room_alias_available();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_client_join_room_by_id();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_client_join_room_by_id_or_alias();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_client_knock();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_client_login();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_client_login_with_email();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_client_login_with_oidc_callback();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_client_logout();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_client_notification_client();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_client_remove_avatar();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_client_reset_server_capabilities();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_client_resolve_room_alias();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_client_restore_session();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_client_room_alias_exists();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_client_room_directory_search();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_client_rooms();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_client_search_users();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_client_server();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_client_session();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_client_set_account_data();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_client_set_delegate();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_client_set_display_name();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_client_set_pusher();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_client_sliding_sync_version();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_client_start_sso_login();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_client_subscribe_to_ignored_users();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_client_subscribe_to_send_queue_status();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_client_sync_service();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_client_track_recently_visited_room();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_client_unignore_user();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_client_upload_avatar();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_client_upload_media();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_client_url_for_oidc();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_client_user_id();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_client_user_id_server_name();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_add_root_certificates();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_auto_enable_backups();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_auto_enable_cross_signing();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_backup_download_strategy();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_build();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_build_with_qr_code();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_cross_process_store_locks_holder_name();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_disable_automatic_token_refresh();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_disable_built_in_root_certificates();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_disable_ssl_verification();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_enable_oidc_refresh_lock();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_homeserver_url();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_passphrase();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_proxy();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_request_config();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_room_decryption_trust_requirement();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_room_key_recipient_strategy();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_server_name();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_server_name_or_homeserver_url();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_session_paths();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_set_session_delegate();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_sliding_sync_version_builder();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_use_event_cache_persistent_storage();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_user_agent();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_username();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_encryption_backup_exists_on_server();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_encryption_backup_state();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_encryption_backup_state_listener();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_encryption_curve25519_key();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_encryption_disable_recovery();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_encryption_ed25519_key();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_encryption_enable_backups();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_encryption_enable_recovery();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_encryption_is_last_device();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_encryption_recover();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_encryption_recover_and_reset();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_encryption_recovery_state();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_encryption_recovery_state_listener();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_encryption_reset_identity();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_encryption_reset_recovery_key();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_encryption_user_identity();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_encryption_verification_state();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_encryption_verification_state_listener();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_encryption_wait_for_backup_upload_steady_state();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_encryption_wait_for_e2ee_initialization_tasks();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_homeserverlogindetails_sliding_sync_version();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_homeserverlogindetails_supported_oidc_prompts();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_homeserverlogindetails_supports_oidc_login();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_homeserverlogindetails_supports_password_login();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_homeserverlogindetails_url();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_identityresethandle_auth_type();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_identityresethandle_cancel();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_identityresethandle_reset();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_inreplytodetails_event();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_inreplytodetails_event_id();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_knockrequestactions_accept();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_knockrequestactions_decline();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_knockrequestactions_decline_and_ban();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_knockrequestactions_mark_as_seen();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_lazytimelineitemprovider_debug_info();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_lazytimelineitemprovider_get_send_handle();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_lazytimelineitemprovider_get_shields();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_mediafilehandle_path();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_mediafilehandle_persist();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_mediasource_to_json();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_mediasource_url();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_notificationclient_get_notification();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_can_homeserver_push_encrypted_event_to_device();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_can_push_encrypted_event_to_device();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_contains_keywords_rules();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_get_default_room_notification_mode();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_get_room_notification_settings();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_get_rooms_with_user_defined_rules();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_get_user_defined_room_notification_mode();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_is_call_enabled();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_is_invite_for_me_enabled();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_is_room_mention_enabled();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_is_user_mention_enabled();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_restore_default_room_notification_mode();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_set_call_enabled();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_set_default_room_notification_mode();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_set_delegate();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_set_invite_for_me_enabled();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_set_room_mention_enabled();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_set_room_notification_mode();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_set_user_mention_enabled();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_unmute_room();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_room_active_members_count();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_room_active_room_call_participants();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_room_alternative_aliases();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_room_apply_power_level_changes();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_room_avatar_url();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_room_ban_user();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_room_can_user_ban();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_room_can_user_invite();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_room_can_user_kick();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_room_can_user_pin_unpin();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_room_can_user_redact_other();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_room_can_user_redact_own();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_room_can_user_send_message();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_room_can_user_send_state();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_room_can_user_trigger_room_notification();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_room_canonical_alias();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_room_clear_composer_draft();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_room_clear_event_cache_storage();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_room_discard_room_key();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_room_display_name();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_room_edit();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_room_enable_send_queue();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_room_get_power_levels();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_room_has_active_room_call();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_room_heroes();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_room_id();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_room_ignore_device_trust_and_resend();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_room_ignore_user();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_room_invite_user_by_id();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_room_invited_members_count();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_room_inviter();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_room_is_direct();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_room_is_encrypted();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_room_is_public();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_room_is_send_queue_enabled();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_room_is_space();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_room_is_tombstoned();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_room_join();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_room_joined_members_count();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_room_kick_user();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_room_leave();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_room_load_composer_draft();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_room_mark_as_read();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_room_matrix_to_event_permalink();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_room_matrix_to_permalink();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_room_member();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_room_member_avatar_url();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_room_member_display_name();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_room_members();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_room_members_no_sync();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_room_membership();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_room_message_filtered_timeline();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_room_own_user_id();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_room_pinned_events_timeline();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_room_raw_name();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_room_redact();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_room_remove_avatar();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_room_report_content();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_room_reset_power_levels();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_room_room_events_debug_string();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_room_room_info();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_room_save_composer_draft();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_room_send_call_notification();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_room_send_call_notification_if_needed();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_room_send_raw();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_room_set_is_favourite();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_room_set_is_low_priority();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_room_set_name();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_room_set_topic();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_room_set_unread_flag();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_room_subscribe_to_identity_status_changes();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_room_subscribe_to_knock_requests();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_room_subscribe_to_room_info_updates();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_room_subscribe_to_typing_notifications();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_room_suggested_role_for_user();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_room_timeline();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_room_timeline_focused_on_event();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_room_topic();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_room_typing_notice();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_room_unban_user();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_room_update_power_levels_for_users();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_room_upload_avatar();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_room_withdraw_verification_and_resend();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_roomdirectorysearch_is_at_last_page();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_roomdirectorysearch_loaded_pages();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_roomdirectorysearch_next_page();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_roomdirectorysearch_results();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_roomdirectorysearch_search();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_roomlist_entries_with_dynamic_adapters();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_roomlist_loading_state();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_roomlist_room();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_roomlistdynamicentriescontroller_add_one_page();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_roomlistdynamicentriescontroller_reset_to_one_page();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_roomlistdynamicentriescontroller_set_filter();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_roomlistentrieswithdynamicadaptersresult_controller();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_roomlistentrieswithdynamicadaptersresult_entries_stream();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_roomlistitem_avatar_url();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_roomlistitem_canonical_alias();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_roomlistitem_display_name();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_roomlistitem_full_room();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_roomlistitem_id();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_roomlistitem_init_timeline();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_roomlistitem_invited_room();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_roomlistitem_is_direct();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_roomlistitem_is_encrypted();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_roomlistitem_is_timeline_initialized();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_roomlistitem_latest_event();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_roomlistitem_membership();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_roomlistitem_preview_room();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_roomlistitem_room_info();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_roomlistservice_all_rooms();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_roomlistservice_room();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_roomlistservice_state();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_roomlistservice_subscribe_to_rooms();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_roomlistservice_sync_indicator();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_roommembersiterator_len();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_roommembersiterator_next_chunk();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_roommessageeventcontentwithoutrelation_with_mentions();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_roompreview_info();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_roompreview_inviter();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_roompreview_leave();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_sendattachmentjoinhandle_cancel();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_sendattachmentjoinhandle_join();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_sendhandle_abort();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_sendhandle_try_resend();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontroller_accept_verification_request();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontroller_acknowledge_verification_request();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontroller_approve_verification();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontroller_cancel_verification();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontroller_decline_verification();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontroller_request_verification();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontroller_set_delegate();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontroller_start_sas_verification();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_sessionverificationemoji_description();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_sessionverificationemoji_symbol();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_span_enter();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_span_exit();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_span_is_none();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_ssohandler_finish();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_ssohandler_url();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_syncservice_room_list_service();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_syncservice_start();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_syncservice_state();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_syncservice_stop();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_syncservicebuilder_finish();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_syncservicebuilder_with_cross_process_lock();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_syncservicebuilder_with_utd_hook();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_taskhandle_cancel();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_taskhandle_is_finished();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_timeline_add_listener();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_timeline_create_message_content();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_timeline_create_poll();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_timeline_edit();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_timeline_end_poll();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_timeline_fetch_details_for_event();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_timeline_fetch_members();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_timeline_focused_paginate_forwards();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_timeline_get_event_timeline_item_by_event_id();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_timeline_load_reply_details();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_timeline_mark_as_read();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_timeline_paginate_backwards();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_timeline_pin_event();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_timeline_redact_event();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_timeline_retry_decryption();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_timeline_send();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_timeline_send_audio();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_timeline_send_file();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_timeline_send_image();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_timeline_send_location();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_timeline_send_poll_response();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_timeline_send_read_receipt();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_timeline_send_reply();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_timeline_send_video();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_timeline_send_voice_message();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_timeline_subscribe_to_back_pagination_status();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_timeline_toggle_reaction();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_timeline_unpin_event();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_timelinediff_append();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_timelinediff_change();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_timelinediff_insert();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_timelinediff_push_back();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_timelinediff_push_front();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_timelinediff_remove();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_timelinediff_reset();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_timelinediff_set();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_timelinediff_truncate();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_timelineevent_event_id();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_timelineevent_event_type();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_timelineevent_sender_id();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_timelineevent_timestamp();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_timelineitem_as_event();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_timelineitem_as_virtual();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_timelineitem_fmt_debug();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_timelineitem_unique_id();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_unreadnotificationscount_has_notifications();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_unreadnotificationscount_highlight_count();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_unreadnotificationscount_notification_count();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_useridentity_is_verified();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_useridentity_master_key();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_useridentity_pin();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_widgetdriver_run();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_widgetdriverhandle_recv();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_widgetdriverhandle_send();
uint16_t uniffi_matrix_sdk_ffi_checksum_constructor_clientbuilder_new();
uint16_t uniffi_matrix_sdk_ffi_checksum_constructor_mediasource_from_json();
uint16_t uniffi_matrix_sdk_ffi_checksum_constructor_mediasource_from_url();
uint16_t uniffi_matrix_sdk_ffi_checksum_constructor_qrcodedata_from_bytes();
uint16_t uniffi_matrix_sdk_ffi_checksum_constructor_span_current();
uint16_t uniffi_matrix_sdk_ffi_checksum_constructor_span_new();
uint16_t
uniffi_matrix_sdk_ffi_checksum_constructor_timelineeventtypefilter_exclude();
uint16_t
uniffi_matrix_sdk_ffi_checksum_constructor_timelineeventtypefilter_include();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_backupstatelistener_on_update();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_backupsteadystatelistener_on_update();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_clientdelegate_did_receive_auth_error();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_clientdelegate_did_refresh_tokens();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_clientsessiondelegate_retrieve_session_from_keychain();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_clientsessiondelegate_save_session_in_keychain();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_enablerecoveryprogresslistener_on_update();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_identitystatuschangelistener_call();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_ignoreduserslistener_call();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_knockrequestslistener_call();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_notificationsettingsdelegate_settings_did_change();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_paginationstatuslistener_on_update();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_progresswatcher_transmission_progress();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_qrloginprogresslistener_on_update();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_recoverystatelistener_on_update();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_roomdirectorysearchentrieslistener_on_update();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_roominfolistener_call();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_roomlistentrieslistener_on_update();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_roomlistloadingstatelistener_on_update();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_roomlistservicestatelistener_on_update();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_roomlistservicesyncindicatorlistener_on_update();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_sendqueueroomerrorlistener_on_error();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontrollerdelegate_did_receive_verification_request();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontrollerdelegate_did_accept_verification_request();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontrollerdelegate_did_start_sas_verification();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontrollerdelegate_did_receive_verification_data();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontrollerdelegate_did_fail();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontrollerdelegate_did_cancel();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontrollerdelegate_did_finish();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_syncservicestateobserver_on_update();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_timelinelistener_on_update();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_typingnotificationslistener_call();
uint16_t uniffi_matrix_sdk_ffi_checksum_method_unabletodecryptdelegate_on_utd();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_verificationstatelistener_on_update();
uint16_t
uniffi_matrix_sdk_ffi_checksum_method_widgetcapabilitiesprovider_acquire_capabilities();
uint32_t ffi_matrix_sdk_ffi_uniffi_contract_version();
}

namespace uniffi::matrix_sdk_ffi {
template <typename T> struct Bridging;

using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <typename T> struct Bridging<ReferenceHolder<T>> {
  static jsi::Value jsNew(jsi::Runtime &rt) {
    auto holder = jsi::Object(rt);
    return holder;
  }
  static T fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
                  const jsi::Value &value) {
    auto obj = value.asObject(rt);
    if (obj.hasProperty(rt, "pointee")) {
      auto pointee = obj.getProperty(rt, "pointee");
      return uniffi::matrix_sdk_ffi::Bridging<T>::fromJs(rt, callInvoker,
                                                         pointee);
    }
    throw jsi::JSError(rt,
                       "Expected ReferenceHolder to have a pointee property. "
                       "This is likely a bug in uniffi-bindgen-react-native");
  }
};
} // namespace uniffi::matrix_sdk_ffi
namespace uniffi::matrix_sdk_ffi {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<RustBuffer> {
  static RustBuffer rustbuffer_alloc(int32_t size) {
    RustCallStatus status = {UNIFFI_CALL_STATUS_OK};
    return ffi_matrix_sdk_ffi_rustbuffer_alloc(size, &status);
  }

  static void rustbuffer_free(RustBuffer buf) {
    RustCallStatus status = {UNIFFI_CALL_STATUS_OK};
    ffi_matrix_sdk_ffi_rustbuffer_free(buf, &status);
  }

  static RustBuffer rustbuffer_from_bytes(ForeignBytes bytes) {
    RustCallStatus status = {UNIFFI_CALL_STATUS_OK};
    return ffi_matrix_sdk_ffi_rustbuffer_from_bytes(bytes, &status);
  }

  static RustBuffer fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker>,
                           const jsi::Value &value) {
    try {
      auto buffer =
          uniffi_jsi::Bridging<jsi::ArrayBuffer>::value_to_arraybuffer(rt,
                                                                       value);
      auto bytes = ForeignBytes{
          .len = static_cast<int32_t>(buffer.length(rt)),
          .data = buffer.data(rt),
      };

      // This buffer is constructed from foreign bytes. Rust scaffolding copies
      // the bytes, to make the RustBuffer.
      auto buf = rustbuffer_from_bytes(bytes);
      // Once it leaves this function, the buffer is immediately passed back
      // into Rust, where it's used to deserialize into the Rust versions of the
      // arguments. At that point, the copy is destroyed.
      return buf;
    } catch (const std::logic_error &e) {
      throw jsi::JSError(rt, e.what());
    }
  }

  static jsi::Value toJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker>,
                         RustBuffer buf) {
    // We need to make a copy of the bytes from Rust's memory space into
    // Javascripts memory space. We need to do this because the two languages
    // manages memory very differently: a garbage collector needs to track all
    // the memory at runtime, Rust is doing it all closer to compile time.
    uint8_t *bytes = new uint8_t[buf.len];
    std::memcpy(bytes, buf.data, buf.len);

    // Construct an ArrayBuffer with copy of the bytes from the RustBuffer.
    auto payload = std::make_shared<uniffi_jsi::CMutableBuffer>(
        uniffi_jsi::CMutableBuffer((uint8_t *)bytes, buf.len));
    auto arrayBuffer = jsi::ArrayBuffer(rt, payload);

    // Once we have a Javascript version, we no longer need the Rust version, so
    // we can call into Rust to tell it it's okay to free that memory.
    rustbuffer_free(buf);

    // Finally, return the ArrayBuffer.
    return uniffi_jsi::Bridging<jsi::ArrayBuffer>::arraybuffer_to_value(
        rt, arrayBuffer);
    ;
  }
};

} // namespace uniffi::matrix_sdk_ffi

namespace uniffi::matrix_sdk_ffi {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<RustCallStatus> {
  static jsi::Value jsSuccess(jsi::Runtime &rt) {
    auto statusObject = jsi::Object(rt);
    statusObject.setProperty(rt, "code", jsi::Value(rt, UNIFFI_CALL_STATUS_OK));
    return statusObject;
  }
  static RustCallStatus rustSuccess(jsi::Runtime &rt) {
    return {UNIFFI_CALL_STATUS_OK};
  }
  static void copyIntoJs(jsi::Runtime &rt,
                         std::shared_ptr<CallInvoker> callInvoker,
                         const RustCallStatus status,
                         const jsi::Value &jsStatus) {
    auto statusObject = jsStatus.asObject(rt);
    if (status.error_buf.data != nullptr) {
      auto rbuf = Bridging<RustBuffer>::toJs(rt, callInvoker, status.error_buf);
      statusObject.setProperty(rt, "errorBuf", rbuf);
    }
    if (status.code != UNIFFI_CALL_STATUS_OK) {
      auto code =
          uniffi_jsi::Bridging<uint8_t>::toJs(rt, callInvoker, status.code);
      statusObject.setProperty(rt, "code", code);
    }
  }

  static RustCallStatus fromJs(jsi::Runtime &rt,
                               std::shared_ptr<CallInvoker> invoker,
                               const jsi::Value &jsStatus) {
    RustCallStatus status;
    auto statusObject = jsStatus.asObject(rt);
    if (statusObject.hasProperty(rt, "errorBuf")) {
      auto rbuf = statusObject.getProperty(rt, "errorBuf");
      status.error_buf = Bridging<RustBuffer>::fromJs(rt, invoker, rbuf);
    }
    if (statusObject.hasProperty(rt, "code")) {
      auto code = statusObject.getProperty(rt, "code");
      status.code = uniffi_jsi::Bridging<uint8_t>::fromJs(rt, invoker, code);
    }
    return status;
  }

  static void copyFromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> invoker,
                         const jsi::Value &jsStatus, RustCallStatus *status) {
    auto statusObject = jsStatus.asObject(rt);
    if (statusObject.hasProperty(rt, "errorBuf")) {
      auto rbuf = statusObject.getProperty(rt, "errorBuf");
      status->error_buf = Bridging<RustBuffer>::fromJs(rt, invoker, rbuf);
    }
    if (statusObject.hasProperty(rt, "code")) {
      auto code = statusObject.getProperty(rt, "code");
      status->code = uniffi_jsi::Bridging<uint8_t>::fromJs(rt, invoker, code);
    }
  }
};

} // namespace uniffi::matrix_sdk_ffi
// In other uniffi bindings, it is assumed that the foreign language holds on
// to the vtable, which the Rust just gets a pointer to.
// Here, we need to hold on to them, but also be able to clear them at just the
// right time so we can support hot-reloading.
namespace uniffi::matrix_sdk_ffi::registry {
template <typename T> class VTableHolder {
public:
  T vtable;
  VTableHolder(T v) : vtable(v) {}
};

// Mutex to bind the storage and setting of vtable together.
// We declare it here, but the lock is taken by callers of the putTable
// method who are also sending a pointer to Rust.
static std::mutex vtableMutex;

// Registry to hold all vtables so they persist even when JS objects are GC'd.
// The only reason this exists is to prevent a dangling pointer in the
// Rust machinery: i.e. we don't need to access or write to this registry
// after startup.
// Registry to hold all vtables so they persist even when JS objects are GC'd.
// Maps string identifiers to vtable holders using type erasure
static std::unordered_map<std::string, std::shared_ptr<void>> vtableRegistry;

// Add a vtable to the registry with an identifier
template <typename T>
static T *putTable(std::string_view identifier, T vtable) {
  auto holder = std::make_shared<VTableHolder<T>>(vtable);
  // Store the raw pointer to the vtable before type erasure
  T *rawPtr = &(holder->vtable);
  // Store the holder using type erasure with the string identifier
  vtableRegistry[std::string(identifier)] = std::shared_ptr<void>(holder);
  return rawPtr;
}

// Clear the registry.
//
// Conceptually, this is called after teardown of the module (i.e. after
// teardown of the jsi::Runtime). However, because Rust is dropping callbacks
// because the Runtime is being torn down, we must keep the registry intact
// until after the runtime goes away.
//
// Therefore, in practice we should call this when the next runtime is
// being stood up.
static void clearRegistry() {
  std::lock_guard<std::mutex> lock(vtableMutex);
  vtableRegistry.clear();
}
} // namespace uniffi::matrix_sdk_ffi::registry

// This calls into Rust.
// Implementation of callback function calling from Rust to JS
// RustFutureContinuationCallback

// Callback function:
// uniffi::matrix_sdk_ffi::cb::rustfuturecontinuationcallback::UniffiRustFutureContinuationCallback
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::matrix_sdk_ffi::cb::rustfuturecontinuationcallback {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t, int8_t)> rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue, uint64_t rs_data,
                 int8_t rs_pollResult) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_data = uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_data);
  auto js_pollResult =
      uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, rs_pollResult);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_data, js_pollResult);

  } catch (const jsi::JSError &error) {
    std::cout << "Error in callback UniffiRustFutureContinuationCallback: "
              << error.what() << std::endl;
    throw error;
  }
}

static void callback(uint64_t rs_data, int8_t rs_pollResult) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_data, rs_pollResult);
}

static UniffiRustFutureContinuationCallback
makeCallbackFunction( // uniffi::matrix_sdk_ffi::cb::rustfuturecontinuationcallback
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](uint64_t rs_data,
                                               int8_t rs_pollResult) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_data,
         rs_pollResult](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_data, rs_pollResult);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.

    callInvoker->invokeNonBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeMatrixSdkFfi, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace uniffi::matrix_sdk_ffi::cb::rustfuturecontinuationcallback
  // Implementation of callback function calling from JS to Rust
  // ForeignFutureFree, passed from Rust to JS as part of async callbacks.
namespace uniffi::matrix_sdk_ffi {
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureFree> {
  static jsi::Value toJs(jsi::Runtime &rt,
                         std::shared_ptr<CallInvoker> callInvoker,
                         UniffiForeignFutureFree rsCallback) {
    return jsi::Function::createFromHostFunction(
        rt, jsi::PropNameID::forAscii(rt, "--ForeignFutureFree"), 1,
        [rsCallback, callInvoker](jsi::Runtime &rt, const jsi::Value &thisValue,
                                  const jsi::Value *arguments,
                                  size_t count) -> jsi::Value {
          return intoRust(rt, callInvoker, thisValue, arguments, count,
                          rsCallback);
        });
  }

  static jsi::Value intoRust(jsi::Runtime &rt,
                             std::shared_ptr<CallInvoker> callInvoker,
                             const jsi::Value &thisValue,
                             const jsi::Value *args, size_t count,
                             UniffiForeignFutureFree func) {
    // Convert the arguments into the Rust, with Bridging<T>::fromJs,
    // then call the rs_callback with those arguments.
    func(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]));

    return jsi::Value::undefined();
  }
};
} // namespace uniffi::matrix_sdk_ffi
  // Implementation of free callback function CallbackInterfaceFree

// Callback function:
// uniffi::matrix_sdk_ffi::st::foreignfuture::foreignfuture::free::UniffiCallbackInterfaceFree
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::matrix_sdk_ffi::st::foreignfuture::foreignfuture::free {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t)> rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_handle) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_handle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_handle);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_handle);

  } catch (const jsi::JSError &error) {
    std::cout << "Error in callback UniffiCallbackInterfaceFree: "
              << error.what() << std::endl;
    throw error;
  }
}

static void callback(uint64_t rs_handle) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_handle);
}

static UniffiCallbackInterfaceFree
makeCallbackFunction( // uniffi::matrix_sdk_ffi::st::foreignfuture::foreignfuture::free
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](uint64_t rs_handle) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_handle](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_handle);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.

    callInvoker->invokeNonBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeMatrixSdkFfi, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace uniffi::matrix_sdk_ffi::st::foreignfuture::foreignfuture::free

// Callback function:
// uniffi::matrix_sdk_ffi::st::vtablecallbackinterfacebackupstatelistener::vtablecallbackinterfacebackupstatelistener::free::UniffiCallbackInterfaceFree
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::matrix_sdk_ffi::st::
    vtablecallbackinterfacebackupstatelistener::
        vtablecallbackinterfacebackupstatelistener::free {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t)> rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_handle) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_handle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_handle);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_handle);

  } catch (const jsi::JSError &error) {
    std::cout << "Error in callback UniffiCallbackInterfaceFree: "
              << error.what() << std::endl;
    throw error;
  }
}

static void callback(uint64_t rs_handle) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_handle);
}

static UniffiCallbackInterfaceFree
makeCallbackFunction( // uniffi::matrix_sdk_ffi::st::vtablecallbackinterfacebackupstatelistener::vtablecallbackinterfacebackupstatelistener::free
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](uint64_t rs_handle) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_handle](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_handle);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.

    callInvoker->invokeNonBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeMatrixSdkFfi, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace
  // uniffi::matrix_sdk_ffi::st::vtablecallbackinterfacebackupstatelistener::vtablecallbackinterfacebackupstatelistener::free

// Callback function:
// uniffi::matrix_sdk_ffi::st::vtablecallbackinterfacebackupsteadystatelistener::vtablecallbackinterfacebackupsteadystatelistener::free::UniffiCallbackInterfaceFree
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::matrix_sdk_ffi::st::
    vtablecallbackinterfacebackupsteadystatelistener::
        vtablecallbackinterfacebackupsteadystatelistener::free {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t)> rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_handle) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_handle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_handle);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_handle);

  } catch (const jsi::JSError &error) {
    std::cout << "Error in callback UniffiCallbackInterfaceFree: "
              << error.what() << std::endl;
    throw error;
  }
}

static void callback(uint64_t rs_handle) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_handle);
}

static UniffiCallbackInterfaceFree
makeCallbackFunction( // uniffi::matrix_sdk_ffi::st::vtablecallbackinterfacebackupsteadystatelistener::vtablecallbackinterfacebackupsteadystatelistener::free
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](uint64_t rs_handle) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_handle](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_handle);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.

    callInvoker->invokeNonBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeMatrixSdkFfi, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace
  // uniffi::matrix_sdk_ffi::st::vtablecallbackinterfacebackupsteadystatelistener::vtablecallbackinterfacebackupsteadystatelistener::free

// Callback function:
// uniffi::matrix_sdk_ffi::st::vtablecallbackinterfaceclientdelegate::vtablecallbackinterfaceclientdelegate::free::UniffiCallbackInterfaceFree
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::matrix_sdk_ffi::st::vtablecallbackinterfaceclientdelegate::
    vtablecallbackinterfaceclientdelegate::free {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t)> rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_handle) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_handle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_handle);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_handle);

  } catch (const jsi::JSError &error) {
    std::cout << "Error in callback UniffiCallbackInterfaceFree: "
              << error.what() << std::endl;
    throw error;
  }
}

static void callback(uint64_t rs_handle) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_handle);
}

static UniffiCallbackInterfaceFree
makeCallbackFunction( // uniffi::matrix_sdk_ffi::st::vtablecallbackinterfaceclientdelegate::vtablecallbackinterfaceclientdelegate::free
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](uint64_t rs_handle) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_handle](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_handle);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.

    callInvoker->invokeNonBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeMatrixSdkFfi, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace
  // uniffi::matrix_sdk_ffi::st::vtablecallbackinterfaceclientdelegate::vtablecallbackinterfaceclientdelegate::free

// Callback function:
// uniffi::matrix_sdk_ffi::st::vtablecallbackinterfaceclientsessiondelegate::vtablecallbackinterfaceclientsessiondelegate::free::UniffiCallbackInterfaceFree
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::matrix_sdk_ffi::st::
    vtablecallbackinterfaceclientsessiondelegate::
        vtablecallbackinterfaceclientsessiondelegate::free {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t)> rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_handle) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_handle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_handle);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_handle);

  } catch (const jsi::JSError &error) {
    std::cout << "Error in callback UniffiCallbackInterfaceFree: "
              << error.what() << std::endl;
    throw error;
  }
}

static void callback(uint64_t rs_handle) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_handle);
}

static UniffiCallbackInterfaceFree
makeCallbackFunction( // uniffi::matrix_sdk_ffi::st::vtablecallbackinterfaceclientsessiondelegate::vtablecallbackinterfaceclientsessiondelegate::free
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](uint64_t rs_handle) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_handle](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_handle);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.

    callInvoker->invokeNonBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeMatrixSdkFfi, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace
  // uniffi::matrix_sdk_ffi::st::vtablecallbackinterfaceclientsessiondelegate::vtablecallbackinterfaceclientsessiondelegate::free

// Callback function:
// uniffi::matrix_sdk_ffi::st::vtablecallbackinterfaceenablerecoveryprogresslistener::vtablecallbackinterfaceenablerecoveryprogresslistener::free::UniffiCallbackInterfaceFree
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::matrix_sdk_ffi::st::
    vtablecallbackinterfaceenablerecoveryprogresslistener::
        vtablecallbackinterfaceenablerecoveryprogresslistener::free {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t)> rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_handle) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_handle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_handle);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_handle);

  } catch (const jsi::JSError &error) {
    std::cout << "Error in callback UniffiCallbackInterfaceFree: "
              << error.what() << std::endl;
    throw error;
  }
}

static void callback(uint64_t rs_handle) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_handle);
}

static UniffiCallbackInterfaceFree
makeCallbackFunction( // uniffi::matrix_sdk_ffi::st::vtablecallbackinterfaceenablerecoveryprogresslistener::vtablecallbackinterfaceenablerecoveryprogresslistener::free
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](uint64_t rs_handle) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_handle](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_handle);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.

    callInvoker->invokeNonBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeMatrixSdkFfi, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace
  // uniffi::matrix_sdk_ffi::st::vtablecallbackinterfaceenablerecoveryprogresslistener::vtablecallbackinterfaceenablerecoveryprogresslistener::free

// Callback function:
// uniffi::matrix_sdk_ffi::st::vtablecallbackinterfaceidentitystatuschangelistener::vtablecallbackinterfaceidentitystatuschangelistener::free::UniffiCallbackInterfaceFree
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::matrix_sdk_ffi::st::
    vtablecallbackinterfaceidentitystatuschangelistener::
        vtablecallbackinterfaceidentitystatuschangelistener::free {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t)> rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_handle) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_handle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_handle);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_handle);

  } catch (const jsi::JSError &error) {
    std::cout << "Error in callback UniffiCallbackInterfaceFree: "
              << error.what() << std::endl;
    throw error;
  }
}

static void callback(uint64_t rs_handle) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_handle);
}

static UniffiCallbackInterfaceFree
makeCallbackFunction( // uniffi::matrix_sdk_ffi::st::vtablecallbackinterfaceidentitystatuschangelistener::vtablecallbackinterfaceidentitystatuschangelistener::free
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](uint64_t rs_handle) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_handle](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_handle);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.

    callInvoker->invokeNonBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeMatrixSdkFfi, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace
  // uniffi::matrix_sdk_ffi::st::vtablecallbackinterfaceidentitystatuschangelistener::vtablecallbackinterfaceidentitystatuschangelistener::free

// Callback function:
// uniffi::matrix_sdk_ffi::st::vtablecallbackinterfaceignoreduserslistener::vtablecallbackinterfaceignoreduserslistener::free::UniffiCallbackInterfaceFree
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::matrix_sdk_ffi::st::
    vtablecallbackinterfaceignoreduserslistener::
        vtablecallbackinterfaceignoreduserslistener::free {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t)> rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_handle) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_handle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_handle);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_handle);

  } catch (const jsi::JSError &error) {
    std::cout << "Error in callback UniffiCallbackInterfaceFree: "
              << error.what() << std::endl;
    throw error;
  }
}

static void callback(uint64_t rs_handle) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_handle);
}

static UniffiCallbackInterfaceFree
makeCallbackFunction( // uniffi::matrix_sdk_ffi::st::vtablecallbackinterfaceignoreduserslistener::vtablecallbackinterfaceignoreduserslistener::free
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](uint64_t rs_handle) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_handle](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_handle);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.

    callInvoker->invokeNonBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeMatrixSdkFfi, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace
  // uniffi::matrix_sdk_ffi::st::vtablecallbackinterfaceignoreduserslistener::vtablecallbackinterfaceignoreduserslistener::free

// Callback function:
// uniffi::matrix_sdk_ffi::st::vtablecallbackinterfaceknockrequestslistener::vtablecallbackinterfaceknockrequestslistener::free::UniffiCallbackInterfaceFree
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::matrix_sdk_ffi::st::
    vtablecallbackinterfaceknockrequestslistener::
        vtablecallbackinterfaceknockrequestslistener::free {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t)> rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_handle) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_handle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_handle);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_handle);

  } catch (const jsi::JSError &error) {
    std::cout << "Error in callback UniffiCallbackInterfaceFree: "
              << error.what() << std::endl;
    throw error;
  }
}

static void callback(uint64_t rs_handle) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_handle);
}

static UniffiCallbackInterfaceFree
makeCallbackFunction( // uniffi::matrix_sdk_ffi::st::vtablecallbackinterfaceknockrequestslistener::vtablecallbackinterfaceknockrequestslistener::free
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](uint64_t rs_handle) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_handle](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_handle);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.

    callInvoker->invokeNonBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeMatrixSdkFfi, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace
  // uniffi::matrix_sdk_ffi::st::vtablecallbackinterfaceknockrequestslistener::vtablecallbackinterfaceknockrequestslistener::free

// Callback function:
// uniffi::matrix_sdk_ffi::st::vtablecallbackinterfacenotificationsettingsdelegate::vtablecallbackinterfacenotificationsettingsdelegate::free::UniffiCallbackInterfaceFree
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::matrix_sdk_ffi::st::
    vtablecallbackinterfacenotificationsettingsdelegate::
        vtablecallbackinterfacenotificationsettingsdelegate::free {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t)> rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_handle) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_handle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_handle);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_handle);

  } catch (const jsi::JSError &error) {
    std::cout << "Error in callback UniffiCallbackInterfaceFree: "
              << error.what() << std::endl;
    throw error;
  }
}

static void callback(uint64_t rs_handle) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_handle);
}

static UniffiCallbackInterfaceFree
makeCallbackFunction( // uniffi::matrix_sdk_ffi::st::vtablecallbackinterfacenotificationsettingsdelegate::vtablecallbackinterfacenotificationsettingsdelegate::free
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](uint64_t rs_handle) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_handle](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_handle);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.

    callInvoker->invokeNonBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeMatrixSdkFfi, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace
  // uniffi::matrix_sdk_ffi::st::vtablecallbackinterfacenotificationsettingsdelegate::vtablecallbackinterfacenotificationsettingsdelegate::free

// Callback function:
// uniffi::matrix_sdk_ffi::st::vtablecallbackinterfacepaginationstatuslistener::vtablecallbackinterfacepaginationstatuslistener::free::UniffiCallbackInterfaceFree
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::matrix_sdk_ffi::st::
    vtablecallbackinterfacepaginationstatuslistener::
        vtablecallbackinterfacepaginationstatuslistener::free {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t)> rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_handle) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_handle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_handle);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_handle);

  } catch (const jsi::JSError &error) {
    std::cout << "Error in callback UniffiCallbackInterfaceFree: "
              << error.what() << std::endl;
    throw error;
  }
}

static void callback(uint64_t rs_handle) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_handle);
}

static UniffiCallbackInterfaceFree
makeCallbackFunction( // uniffi::matrix_sdk_ffi::st::vtablecallbackinterfacepaginationstatuslistener::vtablecallbackinterfacepaginationstatuslistener::free
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](uint64_t rs_handle) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_handle](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_handle);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.

    callInvoker->invokeNonBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeMatrixSdkFfi, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace
  // uniffi::matrix_sdk_ffi::st::vtablecallbackinterfacepaginationstatuslistener::vtablecallbackinterfacepaginationstatuslistener::free

// Callback function:
// uniffi::matrix_sdk_ffi::st::vtablecallbackinterfaceprogresswatcher::vtablecallbackinterfaceprogresswatcher::free::UniffiCallbackInterfaceFree
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::matrix_sdk_ffi::st::vtablecallbackinterfaceprogresswatcher::
    vtablecallbackinterfaceprogresswatcher::free {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t)> rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_handle) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_handle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_handle);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_handle);

  } catch (const jsi::JSError &error) {
    std::cout << "Error in callback UniffiCallbackInterfaceFree: "
              << error.what() << std::endl;
    throw error;
  }
}

static void callback(uint64_t rs_handle) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_handle);
}

static UniffiCallbackInterfaceFree
makeCallbackFunction( // uniffi::matrix_sdk_ffi::st::vtablecallbackinterfaceprogresswatcher::vtablecallbackinterfaceprogresswatcher::free
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](uint64_t rs_handle) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_handle](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_handle);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.

    callInvoker->invokeNonBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeMatrixSdkFfi, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace
  // uniffi::matrix_sdk_ffi::st::vtablecallbackinterfaceprogresswatcher::vtablecallbackinterfaceprogresswatcher::free

// Callback function:
// uniffi::matrix_sdk_ffi::st::vtablecallbackinterfaceqrloginprogresslistener::vtablecallbackinterfaceqrloginprogresslistener::free::UniffiCallbackInterfaceFree
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::matrix_sdk_ffi::st::
    vtablecallbackinterfaceqrloginprogresslistener::
        vtablecallbackinterfaceqrloginprogresslistener::free {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t)> rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_handle) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_handle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_handle);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_handle);

  } catch (const jsi::JSError &error) {
    std::cout << "Error in callback UniffiCallbackInterfaceFree: "
              << error.what() << std::endl;
    throw error;
  }
}

static void callback(uint64_t rs_handle) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_handle);
}

static UniffiCallbackInterfaceFree
makeCallbackFunction( // uniffi::matrix_sdk_ffi::st::vtablecallbackinterfaceqrloginprogresslistener::vtablecallbackinterfaceqrloginprogresslistener::free
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](uint64_t rs_handle) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_handle](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_handle);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.

    callInvoker->invokeNonBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeMatrixSdkFfi, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace
  // uniffi::matrix_sdk_ffi::st::vtablecallbackinterfaceqrloginprogresslistener::vtablecallbackinterfaceqrloginprogresslistener::free

// Callback function:
// uniffi::matrix_sdk_ffi::st::vtablecallbackinterfacerecoverystatelistener::vtablecallbackinterfacerecoverystatelistener::free::UniffiCallbackInterfaceFree
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::matrix_sdk_ffi::st::
    vtablecallbackinterfacerecoverystatelistener::
        vtablecallbackinterfacerecoverystatelistener::free {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t)> rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_handle) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_handle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_handle);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_handle);

  } catch (const jsi::JSError &error) {
    std::cout << "Error in callback UniffiCallbackInterfaceFree: "
              << error.what() << std::endl;
    throw error;
  }
}

static void callback(uint64_t rs_handle) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_handle);
}

static UniffiCallbackInterfaceFree
makeCallbackFunction( // uniffi::matrix_sdk_ffi::st::vtablecallbackinterfacerecoverystatelistener::vtablecallbackinterfacerecoverystatelistener::free
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](uint64_t rs_handle) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_handle](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_handle);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.

    callInvoker->invokeNonBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeMatrixSdkFfi, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace
  // uniffi::matrix_sdk_ffi::st::vtablecallbackinterfacerecoverystatelistener::vtablecallbackinterfacerecoverystatelistener::free

// Callback function:
// uniffi::matrix_sdk_ffi::st::vtablecallbackinterfaceroomdirectorysearchentrieslistener::vtablecallbackinterfaceroomdirectorysearchentrieslistener::free::UniffiCallbackInterfaceFree
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::matrix_sdk_ffi::st::
    vtablecallbackinterfaceroomdirectorysearchentrieslistener::
        vtablecallbackinterfaceroomdirectorysearchentrieslistener::free {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t)> rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_handle) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_handle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_handle);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_handle);

  } catch (const jsi::JSError &error) {
    std::cout << "Error in callback UniffiCallbackInterfaceFree: "
              << error.what() << std::endl;
    throw error;
  }
}

static void callback(uint64_t rs_handle) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_handle);
}

static UniffiCallbackInterfaceFree
makeCallbackFunction( // uniffi::matrix_sdk_ffi::st::vtablecallbackinterfaceroomdirectorysearchentrieslistener::vtablecallbackinterfaceroomdirectorysearchentrieslistener::free
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](uint64_t rs_handle) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_handle](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_handle);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.

    callInvoker->invokeNonBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeMatrixSdkFfi, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace
  // uniffi::matrix_sdk_ffi::st::vtablecallbackinterfaceroomdirectorysearchentrieslistener::vtablecallbackinterfaceroomdirectorysearchentrieslistener::free

// Callback function:
// uniffi::matrix_sdk_ffi::st::vtablecallbackinterfaceroominfolistener::vtablecallbackinterfaceroominfolistener::free::UniffiCallbackInterfaceFree
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::matrix_sdk_ffi::st::vtablecallbackinterfaceroominfolistener::
    vtablecallbackinterfaceroominfolistener::free {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t)> rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_handle) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_handle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_handle);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_handle);

  } catch (const jsi::JSError &error) {
    std::cout << "Error in callback UniffiCallbackInterfaceFree: "
              << error.what() << std::endl;
    throw error;
  }
}

static void callback(uint64_t rs_handle) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_handle);
}

static UniffiCallbackInterfaceFree
makeCallbackFunction( // uniffi::matrix_sdk_ffi::st::vtablecallbackinterfaceroominfolistener::vtablecallbackinterfaceroominfolistener::free
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](uint64_t rs_handle) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_handle](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_handle);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.

    callInvoker->invokeNonBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeMatrixSdkFfi, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace
  // uniffi::matrix_sdk_ffi::st::vtablecallbackinterfaceroominfolistener::vtablecallbackinterfaceroominfolistener::free

// Callback function:
// uniffi::matrix_sdk_ffi::st::vtablecallbackinterfaceroomlistentrieslistener::vtablecallbackinterfaceroomlistentrieslistener::free::UniffiCallbackInterfaceFree
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::matrix_sdk_ffi::st::
    vtablecallbackinterfaceroomlistentrieslistener::
        vtablecallbackinterfaceroomlistentrieslistener::free {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t)> rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_handle) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_handle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_handle);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_handle);

  } catch (const jsi::JSError &error) {
    std::cout << "Error in callback UniffiCallbackInterfaceFree: "
              << error.what() << std::endl;
    throw error;
  }
}

static void callback(uint64_t rs_handle) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_handle);
}

static UniffiCallbackInterfaceFree
makeCallbackFunction( // uniffi::matrix_sdk_ffi::st::vtablecallbackinterfaceroomlistentrieslistener::vtablecallbackinterfaceroomlistentrieslistener::free
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](uint64_t rs_handle) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_handle](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_handle);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.

    callInvoker->invokeNonBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeMatrixSdkFfi, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace
  // uniffi::matrix_sdk_ffi::st::vtablecallbackinterfaceroomlistentrieslistener::vtablecallbackinterfaceroomlistentrieslistener::free

// Callback function:
// uniffi::matrix_sdk_ffi::st::vtablecallbackinterfaceroomlistloadingstatelistener::vtablecallbackinterfaceroomlistloadingstatelistener::free::UniffiCallbackInterfaceFree
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::matrix_sdk_ffi::st::
    vtablecallbackinterfaceroomlistloadingstatelistener::
        vtablecallbackinterfaceroomlistloadingstatelistener::free {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t)> rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_handle) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_handle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_handle);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_handle);

  } catch (const jsi::JSError &error) {
    std::cout << "Error in callback UniffiCallbackInterfaceFree: "
              << error.what() << std::endl;
    throw error;
  }
}

static void callback(uint64_t rs_handle) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_handle);
}

static UniffiCallbackInterfaceFree
makeCallbackFunction( // uniffi::matrix_sdk_ffi::st::vtablecallbackinterfaceroomlistloadingstatelistener::vtablecallbackinterfaceroomlistloadingstatelistener::free
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](uint64_t rs_handle) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_handle](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_handle);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.

    callInvoker->invokeNonBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeMatrixSdkFfi, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace
  // uniffi::matrix_sdk_ffi::st::vtablecallbackinterfaceroomlistloadingstatelistener::vtablecallbackinterfaceroomlistloadingstatelistener::free

// Callback function:
// uniffi::matrix_sdk_ffi::st::vtablecallbackinterfaceroomlistservicestatelistener::vtablecallbackinterfaceroomlistservicestatelistener::free::UniffiCallbackInterfaceFree
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::matrix_sdk_ffi::st::
    vtablecallbackinterfaceroomlistservicestatelistener::
        vtablecallbackinterfaceroomlistservicestatelistener::free {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t)> rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_handle) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_handle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_handle);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_handle);

  } catch (const jsi::JSError &error) {
    std::cout << "Error in callback UniffiCallbackInterfaceFree: "
              << error.what() << std::endl;
    throw error;
  }
}

static void callback(uint64_t rs_handle) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_handle);
}

static UniffiCallbackInterfaceFree
makeCallbackFunction( // uniffi::matrix_sdk_ffi::st::vtablecallbackinterfaceroomlistservicestatelistener::vtablecallbackinterfaceroomlistservicestatelistener::free
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](uint64_t rs_handle) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_handle](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_handle);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.

    callInvoker->invokeNonBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeMatrixSdkFfi, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace
  // uniffi::matrix_sdk_ffi::st::vtablecallbackinterfaceroomlistservicestatelistener::vtablecallbackinterfaceroomlistservicestatelistener::free

// Callback function:
// uniffi::matrix_sdk_ffi::st::vtablecallbackinterfaceroomlistservicesyncindicatorlistener::vtablecallbackinterfaceroomlistservicesyncindicatorlistener::free::UniffiCallbackInterfaceFree
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::matrix_sdk_ffi::st::
    vtablecallbackinterfaceroomlistservicesyncindicatorlistener::
        vtablecallbackinterfaceroomlistservicesyncindicatorlistener::free {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t)> rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_handle) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_handle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_handle);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_handle);

  } catch (const jsi::JSError &error) {
    std::cout << "Error in callback UniffiCallbackInterfaceFree: "
              << error.what() << std::endl;
    throw error;
  }
}

static void callback(uint64_t rs_handle) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_handle);
}

static UniffiCallbackInterfaceFree
makeCallbackFunction( // uniffi::matrix_sdk_ffi::st::vtablecallbackinterfaceroomlistservicesyncindicatorlistener::vtablecallbackinterfaceroomlistservicesyncindicatorlistener::free
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](uint64_t rs_handle) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_handle](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_handle);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.

    callInvoker->invokeNonBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeMatrixSdkFfi, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace
  // uniffi::matrix_sdk_ffi::st::vtablecallbackinterfaceroomlistservicesyncindicatorlistener::vtablecallbackinterfaceroomlistservicesyncindicatorlistener::free

// Callback function:
// uniffi::matrix_sdk_ffi::st::vtablecallbackinterfacesendqueueroomerrorlistener::vtablecallbackinterfacesendqueueroomerrorlistener::free::UniffiCallbackInterfaceFree
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::matrix_sdk_ffi::st::
    vtablecallbackinterfacesendqueueroomerrorlistener::
        vtablecallbackinterfacesendqueueroomerrorlistener::free {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t)> rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_handle) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_handle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_handle);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_handle);

  } catch (const jsi::JSError &error) {
    std::cout << "Error in callback UniffiCallbackInterfaceFree: "
              << error.what() << std::endl;
    throw error;
  }
}

static void callback(uint64_t rs_handle) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_handle);
}

static UniffiCallbackInterfaceFree
makeCallbackFunction( // uniffi::matrix_sdk_ffi::st::vtablecallbackinterfacesendqueueroomerrorlistener::vtablecallbackinterfacesendqueueroomerrorlistener::free
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](uint64_t rs_handle) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_handle](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_handle);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.

    callInvoker->invokeNonBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeMatrixSdkFfi, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace
  // uniffi::matrix_sdk_ffi::st::vtablecallbackinterfacesendqueueroomerrorlistener::vtablecallbackinterfacesendqueueroomerrorlistener::free

// Callback function:
// uniffi::matrix_sdk_ffi::st::vtablecallbackinterfacesessionverificationcontrollerdelegate::vtablecallbackinterfacesessionverificationcontrollerdelegate::free::UniffiCallbackInterfaceFree
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::matrix_sdk_ffi::st::
    vtablecallbackinterfacesessionverificationcontrollerdelegate::
        vtablecallbackinterfacesessionverificationcontrollerdelegate::free {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t)> rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_handle) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_handle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_handle);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_handle);

  } catch (const jsi::JSError &error) {
    std::cout << "Error in callback UniffiCallbackInterfaceFree: "
              << error.what() << std::endl;
    throw error;
  }
}

static void callback(uint64_t rs_handle) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_handle);
}

static UniffiCallbackInterfaceFree
makeCallbackFunction( // uniffi::matrix_sdk_ffi::st::vtablecallbackinterfacesessionverificationcontrollerdelegate::vtablecallbackinterfacesessionverificationcontrollerdelegate::free
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](uint64_t rs_handle) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_handle](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_handle);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.

    callInvoker->invokeNonBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeMatrixSdkFfi, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace
  // uniffi::matrix_sdk_ffi::st::vtablecallbackinterfacesessionverificationcontrollerdelegate::vtablecallbackinterfacesessionverificationcontrollerdelegate::free

// Callback function:
// uniffi::matrix_sdk_ffi::st::vtablecallbackinterfacesyncservicestateobserver::vtablecallbackinterfacesyncservicestateobserver::free::UniffiCallbackInterfaceFree
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::matrix_sdk_ffi::st::
    vtablecallbackinterfacesyncservicestateobserver::
        vtablecallbackinterfacesyncservicestateobserver::free {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t)> rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_handle) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_handle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_handle);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_handle);

  } catch (const jsi::JSError &error) {
    std::cout << "Error in callback UniffiCallbackInterfaceFree: "
              << error.what() << std::endl;
    throw error;
  }
}

static void callback(uint64_t rs_handle) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_handle);
}

static UniffiCallbackInterfaceFree
makeCallbackFunction( // uniffi::matrix_sdk_ffi::st::vtablecallbackinterfacesyncservicestateobserver::vtablecallbackinterfacesyncservicestateobserver::free
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](uint64_t rs_handle) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_handle](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_handle);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.

    callInvoker->invokeNonBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeMatrixSdkFfi, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace
  // uniffi::matrix_sdk_ffi::st::vtablecallbackinterfacesyncservicestateobserver::vtablecallbackinterfacesyncservicestateobserver::free

// Callback function:
// uniffi::matrix_sdk_ffi::st::vtablecallbackinterfacetimelinelistener::vtablecallbackinterfacetimelinelistener::free::UniffiCallbackInterfaceFree
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::matrix_sdk_ffi::st::vtablecallbackinterfacetimelinelistener::
    vtablecallbackinterfacetimelinelistener::free {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t)> rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_handle) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_handle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_handle);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_handle);

  } catch (const jsi::JSError &error) {
    std::cout << "Error in callback UniffiCallbackInterfaceFree: "
              << error.what() << std::endl;
    throw error;
  }
}

static void callback(uint64_t rs_handle) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_handle);
}

static UniffiCallbackInterfaceFree
makeCallbackFunction( // uniffi::matrix_sdk_ffi::st::vtablecallbackinterfacetimelinelistener::vtablecallbackinterfacetimelinelistener::free
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](uint64_t rs_handle) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_handle](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_handle);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.

    callInvoker->invokeNonBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeMatrixSdkFfi, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace
  // uniffi::matrix_sdk_ffi::st::vtablecallbackinterfacetimelinelistener::vtablecallbackinterfacetimelinelistener::free

// Callback function:
// uniffi::matrix_sdk_ffi::st::vtablecallbackinterfacetypingnotificationslistener::vtablecallbackinterfacetypingnotificationslistener::free::UniffiCallbackInterfaceFree
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::matrix_sdk_ffi::st::
    vtablecallbackinterfacetypingnotificationslistener::
        vtablecallbackinterfacetypingnotificationslistener::free {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t)> rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_handle) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_handle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_handle);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_handle);

  } catch (const jsi::JSError &error) {
    std::cout << "Error in callback UniffiCallbackInterfaceFree: "
              << error.what() << std::endl;
    throw error;
  }
}

static void callback(uint64_t rs_handle) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_handle);
}

static UniffiCallbackInterfaceFree
makeCallbackFunction( // uniffi::matrix_sdk_ffi::st::vtablecallbackinterfacetypingnotificationslistener::vtablecallbackinterfacetypingnotificationslistener::free
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](uint64_t rs_handle) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_handle](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_handle);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.

    callInvoker->invokeNonBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeMatrixSdkFfi, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace
  // uniffi::matrix_sdk_ffi::st::vtablecallbackinterfacetypingnotificationslistener::vtablecallbackinterfacetypingnotificationslistener::free

// Callback function:
// uniffi::matrix_sdk_ffi::st::vtablecallbackinterfaceunabletodecryptdelegate::vtablecallbackinterfaceunabletodecryptdelegate::free::UniffiCallbackInterfaceFree
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::matrix_sdk_ffi::st::
    vtablecallbackinterfaceunabletodecryptdelegate::
        vtablecallbackinterfaceunabletodecryptdelegate::free {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t)> rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_handle) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_handle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_handle);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_handle);

  } catch (const jsi::JSError &error) {
    std::cout << "Error in callback UniffiCallbackInterfaceFree: "
              << error.what() << std::endl;
    throw error;
  }
}

static void callback(uint64_t rs_handle) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_handle);
}

static UniffiCallbackInterfaceFree
makeCallbackFunction( // uniffi::matrix_sdk_ffi::st::vtablecallbackinterfaceunabletodecryptdelegate::vtablecallbackinterfaceunabletodecryptdelegate::free
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](uint64_t rs_handle) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_handle](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_handle);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.

    callInvoker->invokeNonBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeMatrixSdkFfi, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace
  // uniffi::matrix_sdk_ffi::st::vtablecallbackinterfaceunabletodecryptdelegate::vtablecallbackinterfaceunabletodecryptdelegate::free

// Callback function:
// uniffi::matrix_sdk_ffi::st::vtablecallbackinterfaceverificationstatelistener::vtablecallbackinterfaceverificationstatelistener::free::UniffiCallbackInterfaceFree
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::matrix_sdk_ffi::st::
    vtablecallbackinterfaceverificationstatelistener::
        vtablecallbackinterfaceverificationstatelistener::free {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t)> rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_handle) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_handle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_handle);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_handle);

  } catch (const jsi::JSError &error) {
    std::cout << "Error in callback UniffiCallbackInterfaceFree: "
              << error.what() << std::endl;
    throw error;
  }
}

static void callback(uint64_t rs_handle) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_handle);
}

static UniffiCallbackInterfaceFree
makeCallbackFunction( // uniffi::matrix_sdk_ffi::st::vtablecallbackinterfaceverificationstatelistener::vtablecallbackinterfaceverificationstatelistener::free
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](uint64_t rs_handle) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_handle](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_handle);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.

    callInvoker->invokeNonBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeMatrixSdkFfi, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace
  // uniffi::matrix_sdk_ffi::st::vtablecallbackinterfaceverificationstatelistener::vtablecallbackinterfaceverificationstatelistener::free

// Callback function:
// uniffi::matrix_sdk_ffi::st::vtablecallbackinterfacewidgetcapabilitiesprovider::vtablecallbackinterfacewidgetcapabilitiesprovider::free::UniffiCallbackInterfaceFree
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::matrix_sdk_ffi::st::
    vtablecallbackinterfacewidgetcapabilitiesprovider::
        vtablecallbackinterfacewidgetcapabilitiesprovider::free {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t)> rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_handle) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_handle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_handle);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_handle);

  } catch (const jsi::JSError &error) {
    std::cout << "Error in callback UniffiCallbackInterfaceFree: "
              << error.what() << std::endl;
    throw error;
  }
}

static void callback(uint64_t rs_handle) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_handle);
}

static UniffiCallbackInterfaceFree
makeCallbackFunction( // uniffi::matrix_sdk_ffi::st::vtablecallbackinterfacewidgetcapabilitiesprovider::vtablecallbackinterfacewidgetcapabilitiesprovider::free
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](uint64_t rs_handle) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_handle](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_handle);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.

    callInvoker->invokeNonBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeMatrixSdkFfi, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace
  // uniffi::matrix_sdk_ffi::st::vtablecallbackinterfacewidgetcapabilitiesprovider::vtablecallbackinterfacewidgetcapabilitiesprovider::free
namespace uniffi::matrix_sdk_ffi {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFuture> {
  static UniffiForeignFuture fromJs(jsi::Runtime &rt,
                                    std::shared_ptr<CallInvoker> callInvoker,
                                    const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(rt, "Expected an object for UniffiForeignFuture");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiForeignFuture rsObject;

    // Create the vtable from the js callbacks.
    rsObject.handle = uniffi_jsi::Bridging<uint64_t>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "handle"));
    rsObject.free = uniffi::matrix_sdk_ffi::st::foreignfuture::foreignfuture::
        free::makeCallbackFunction(rt, callInvoker,
                                   jsObject.getProperty(rt, "free"));

    return rsObject;
  }
};

} // namespace uniffi::matrix_sdk_ffi
namespace uniffi::matrix_sdk_ffi {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureStructU8> {
  static UniffiForeignFutureStructU8
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(rt,
                         "Expected an object for UniffiForeignFutureStructU8");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiForeignFutureStructU8 rsObject;

    // Create the vtable from the js callbacks.
    rsObject.return_value = uniffi_jsi::Bridging<uint8_t>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "returnValue"));
    rsObject.call_status =
        uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::fromJs(
            rt, callInvoker, jsObject.getProperty(rt, "callStatus"));

    return rsObject;
  }
};

} // namespace uniffi::matrix_sdk_ffi
  // Implementation of callback function calling from JS to Rust
  // ForeignFutureCompleteU8, passed from Rust to JS as part of async callbacks.
namespace uniffi::matrix_sdk_ffi {
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureCompleteU8> {
  static jsi::Value toJs(jsi::Runtime &rt,
                         std::shared_ptr<CallInvoker> callInvoker,
                         UniffiForeignFutureCompleteU8 rsCallback) {
    return jsi::Function::createFromHostFunction(
        rt, jsi::PropNameID::forAscii(rt, "--ForeignFutureCompleteU8"), 2,
        [rsCallback, callInvoker](jsi::Runtime &rt, const jsi::Value &thisValue,
                                  const jsi::Value *arguments,
                                  size_t count) -> jsi::Value {
          return intoRust(rt, callInvoker, thisValue, arguments, count,
                          rsCallback);
        });
  }

  static jsi::Value intoRust(jsi::Runtime &rt,
                             std::shared_ptr<CallInvoker> callInvoker,
                             const jsi::Value &thisValue,
                             const jsi::Value *args, size_t count,
                             UniffiForeignFutureCompleteU8 func) {
    // Convert the arguments into the Rust, with Bridging<T>::fromJs,
    // then call the rs_callback with those arguments.
    func(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]),
         uniffi::matrix_sdk_ffi::Bridging<UniffiForeignFutureStructU8>::fromJs(
             rt, callInvoker, args[1]));

    return jsi::Value::undefined();
  }
};
} // namespace uniffi::matrix_sdk_ffi
namespace uniffi::matrix_sdk_ffi {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureStructI8> {
  static UniffiForeignFutureStructI8
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(rt,
                         "Expected an object for UniffiForeignFutureStructI8");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiForeignFutureStructI8 rsObject;

    // Create the vtable from the js callbacks.
    rsObject.return_value = uniffi_jsi::Bridging<int8_t>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "returnValue"));
    rsObject.call_status =
        uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::fromJs(
            rt, callInvoker, jsObject.getProperty(rt, "callStatus"));

    return rsObject;
  }
};

} // namespace uniffi::matrix_sdk_ffi
  // Implementation of callback function calling from JS to Rust
  // ForeignFutureCompleteI8, passed from Rust to JS as part of async callbacks.
namespace uniffi::matrix_sdk_ffi {
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureCompleteI8> {
  static jsi::Value toJs(jsi::Runtime &rt,
                         std::shared_ptr<CallInvoker> callInvoker,
                         UniffiForeignFutureCompleteI8 rsCallback) {
    return jsi::Function::createFromHostFunction(
        rt, jsi::PropNameID::forAscii(rt, "--ForeignFutureCompleteI8"), 2,
        [rsCallback, callInvoker](jsi::Runtime &rt, const jsi::Value &thisValue,
                                  const jsi::Value *arguments,
                                  size_t count) -> jsi::Value {
          return intoRust(rt, callInvoker, thisValue, arguments, count,
                          rsCallback);
        });
  }

  static jsi::Value intoRust(jsi::Runtime &rt,
                             std::shared_ptr<CallInvoker> callInvoker,
                             const jsi::Value &thisValue,
                             const jsi::Value *args, size_t count,
                             UniffiForeignFutureCompleteI8 func) {
    // Convert the arguments into the Rust, with Bridging<T>::fromJs,
    // then call the rs_callback with those arguments.
    func(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]),
         uniffi::matrix_sdk_ffi::Bridging<UniffiForeignFutureStructI8>::fromJs(
             rt, callInvoker, args[1]));

    return jsi::Value::undefined();
  }
};
} // namespace uniffi::matrix_sdk_ffi
namespace uniffi::matrix_sdk_ffi {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureStructU16> {
  static UniffiForeignFutureStructU16
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(rt,
                         "Expected an object for UniffiForeignFutureStructU16");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiForeignFutureStructU16 rsObject;

    // Create the vtable from the js callbacks.
    rsObject.return_value = uniffi_jsi::Bridging<uint16_t>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "returnValue"));
    rsObject.call_status =
        uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::fromJs(
            rt, callInvoker, jsObject.getProperty(rt, "callStatus"));

    return rsObject;
  }
};

} // namespace uniffi::matrix_sdk_ffi
  // Implementation of callback function calling from JS to Rust
  // ForeignFutureCompleteU16, passed from Rust to JS as part of async
  // callbacks.
namespace uniffi::matrix_sdk_ffi {
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureCompleteU16> {
  static jsi::Value toJs(jsi::Runtime &rt,
                         std::shared_ptr<CallInvoker> callInvoker,
                         UniffiForeignFutureCompleteU16 rsCallback) {
    return jsi::Function::createFromHostFunction(
        rt, jsi::PropNameID::forAscii(rt, "--ForeignFutureCompleteU16"), 2,
        [rsCallback, callInvoker](jsi::Runtime &rt, const jsi::Value &thisValue,
                                  const jsi::Value *arguments,
                                  size_t count) -> jsi::Value {
          return intoRust(rt, callInvoker, thisValue, arguments, count,
                          rsCallback);
        });
  }

  static jsi::Value intoRust(jsi::Runtime &rt,
                             std::shared_ptr<CallInvoker> callInvoker,
                             const jsi::Value &thisValue,
                             const jsi::Value *args, size_t count,
                             UniffiForeignFutureCompleteU16 func) {
    // Convert the arguments into the Rust, with Bridging<T>::fromJs,
    // then call the rs_callback with those arguments.
    func(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]),
         uniffi::matrix_sdk_ffi::Bridging<UniffiForeignFutureStructU16>::fromJs(
             rt, callInvoker, args[1]));

    return jsi::Value::undefined();
  }
};
} // namespace uniffi::matrix_sdk_ffi
namespace uniffi::matrix_sdk_ffi {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureStructI16> {
  static UniffiForeignFutureStructI16
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(rt,
                         "Expected an object for UniffiForeignFutureStructI16");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiForeignFutureStructI16 rsObject;

    // Create the vtable from the js callbacks.
    rsObject.return_value = uniffi_jsi::Bridging<int16_t>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "returnValue"));
    rsObject.call_status =
        uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::fromJs(
            rt, callInvoker, jsObject.getProperty(rt, "callStatus"));

    return rsObject;
  }
};

} // namespace uniffi::matrix_sdk_ffi
  // Implementation of callback function calling from JS to Rust
  // ForeignFutureCompleteI16, passed from Rust to JS as part of async
  // callbacks.
namespace uniffi::matrix_sdk_ffi {
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureCompleteI16> {
  static jsi::Value toJs(jsi::Runtime &rt,
                         std::shared_ptr<CallInvoker> callInvoker,
                         UniffiForeignFutureCompleteI16 rsCallback) {
    return jsi::Function::createFromHostFunction(
        rt, jsi::PropNameID::forAscii(rt, "--ForeignFutureCompleteI16"), 2,
        [rsCallback, callInvoker](jsi::Runtime &rt, const jsi::Value &thisValue,
                                  const jsi::Value *arguments,
                                  size_t count) -> jsi::Value {
          return intoRust(rt, callInvoker, thisValue, arguments, count,
                          rsCallback);
        });
  }

  static jsi::Value intoRust(jsi::Runtime &rt,
                             std::shared_ptr<CallInvoker> callInvoker,
                             const jsi::Value &thisValue,
                             const jsi::Value *args, size_t count,
                             UniffiForeignFutureCompleteI16 func) {
    // Convert the arguments into the Rust, with Bridging<T>::fromJs,
    // then call the rs_callback with those arguments.
    func(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]),
         uniffi::matrix_sdk_ffi::Bridging<UniffiForeignFutureStructI16>::fromJs(
             rt, callInvoker, args[1]));

    return jsi::Value::undefined();
  }
};
} // namespace uniffi::matrix_sdk_ffi
namespace uniffi::matrix_sdk_ffi {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureStructU32> {
  static UniffiForeignFutureStructU32
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(rt,
                         "Expected an object for UniffiForeignFutureStructU32");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiForeignFutureStructU32 rsObject;

    // Create the vtable from the js callbacks.
    rsObject.return_value = uniffi_jsi::Bridging<uint32_t>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "returnValue"));
    rsObject.call_status =
        uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::fromJs(
            rt, callInvoker, jsObject.getProperty(rt, "callStatus"));

    return rsObject;
  }
};

} // namespace uniffi::matrix_sdk_ffi
  // Implementation of callback function calling from JS to Rust
  // ForeignFutureCompleteU32, passed from Rust to JS as part of async
  // callbacks.
namespace uniffi::matrix_sdk_ffi {
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureCompleteU32> {
  static jsi::Value toJs(jsi::Runtime &rt,
                         std::shared_ptr<CallInvoker> callInvoker,
                         UniffiForeignFutureCompleteU32 rsCallback) {
    return jsi::Function::createFromHostFunction(
        rt, jsi::PropNameID::forAscii(rt, "--ForeignFutureCompleteU32"), 2,
        [rsCallback, callInvoker](jsi::Runtime &rt, const jsi::Value &thisValue,
                                  const jsi::Value *arguments,
                                  size_t count) -> jsi::Value {
          return intoRust(rt, callInvoker, thisValue, arguments, count,
                          rsCallback);
        });
  }

  static jsi::Value intoRust(jsi::Runtime &rt,
                             std::shared_ptr<CallInvoker> callInvoker,
                             const jsi::Value &thisValue,
                             const jsi::Value *args, size_t count,
                             UniffiForeignFutureCompleteU32 func) {
    // Convert the arguments into the Rust, with Bridging<T>::fromJs,
    // then call the rs_callback with those arguments.
    func(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]),
         uniffi::matrix_sdk_ffi::Bridging<UniffiForeignFutureStructU32>::fromJs(
             rt, callInvoker, args[1]));

    return jsi::Value::undefined();
  }
};
} // namespace uniffi::matrix_sdk_ffi
namespace uniffi::matrix_sdk_ffi {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureStructI32> {
  static UniffiForeignFutureStructI32
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(rt,
                         "Expected an object for UniffiForeignFutureStructI32");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiForeignFutureStructI32 rsObject;

    // Create the vtable from the js callbacks.
    rsObject.return_value = uniffi_jsi::Bridging<int32_t>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "returnValue"));
    rsObject.call_status =
        uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::fromJs(
            rt, callInvoker, jsObject.getProperty(rt, "callStatus"));

    return rsObject;
  }
};

} // namespace uniffi::matrix_sdk_ffi
  // Implementation of callback function calling from JS to Rust
  // ForeignFutureCompleteI32, passed from Rust to JS as part of async
  // callbacks.
namespace uniffi::matrix_sdk_ffi {
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureCompleteI32> {
  static jsi::Value toJs(jsi::Runtime &rt,
                         std::shared_ptr<CallInvoker> callInvoker,
                         UniffiForeignFutureCompleteI32 rsCallback) {
    return jsi::Function::createFromHostFunction(
        rt, jsi::PropNameID::forAscii(rt, "--ForeignFutureCompleteI32"), 2,
        [rsCallback, callInvoker](jsi::Runtime &rt, const jsi::Value &thisValue,
                                  const jsi::Value *arguments,
                                  size_t count) -> jsi::Value {
          return intoRust(rt, callInvoker, thisValue, arguments, count,
                          rsCallback);
        });
  }

  static jsi::Value intoRust(jsi::Runtime &rt,
                             std::shared_ptr<CallInvoker> callInvoker,
                             const jsi::Value &thisValue,
                             const jsi::Value *args, size_t count,
                             UniffiForeignFutureCompleteI32 func) {
    // Convert the arguments into the Rust, with Bridging<T>::fromJs,
    // then call the rs_callback with those arguments.
    func(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]),
         uniffi::matrix_sdk_ffi::Bridging<UniffiForeignFutureStructI32>::fromJs(
             rt, callInvoker, args[1]));

    return jsi::Value::undefined();
  }
};
} // namespace uniffi::matrix_sdk_ffi
namespace uniffi::matrix_sdk_ffi {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureStructU64> {
  static UniffiForeignFutureStructU64
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(rt,
                         "Expected an object for UniffiForeignFutureStructU64");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiForeignFutureStructU64 rsObject;

    // Create the vtable from the js callbacks.
    rsObject.return_value = uniffi_jsi::Bridging<uint64_t>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "returnValue"));
    rsObject.call_status =
        uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::fromJs(
            rt, callInvoker, jsObject.getProperty(rt, "callStatus"));

    return rsObject;
  }
};

} // namespace uniffi::matrix_sdk_ffi
  // Implementation of callback function calling from JS to Rust
  // ForeignFutureCompleteU64, passed from Rust to JS as part of async
  // callbacks.
namespace uniffi::matrix_sdk_ffi {
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureCompleteU64> {
  static jsi::Value toJs(jsi::Runtime &rt,
                         std::shared_ptr<CallInvoker> callInvoker,
                         UniffiForeignFutureCompleteU64 rsCallback) {
    return jsi::Function::createFromHostFunction(
        rt, jsi::PropNameID::forAscii(rt, "--ForeignFutureCompleteU64"), 2,
        [rsCallback, callInvoker](jsi::Runtime &rt, const jsi::Value &thisValue,
                                  const jsi::Value *arguments,
                                  size_t count) -> jsi::Value {
          return intoRust(rt, callInvoker, thisValue, arguments, count,
                          rsCallback);
        });
  }

  static jsi::Value intoRust(jsi::Runtime &rt,
                             std::shared_ptr<CallInvoker> callInvoker,
                             const jsi::Value &thisValue,
                             const jsi::Value *args, size_t count,
                             UniffiForeignFutureCompleteU64 func) {
    // Convert the arguments into the Rust, with Bridging<T>::fromJs,
    // then call the rs_callback with those arguments.
    func(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]),
         uniffi::matrix_sdk_ffi::Bridging<UniffiForeignFutureStructU64>::fromJs(
             rt, callInvoker, args[1]));

    return jsi::Value::undefined();
  }
};
} // namespace uniffi::matrix_sdk_ffi
namespace uniffi::matrix_sdk_ffi {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureStructI64> {
  static UniffiForeignFutureStructI64
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(rt,
                         "Expected an object for UniffiForeignFutureStructI64");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiForeignFutureStructI64 rsObject;

    // Create the vtable from the js callbacks.
    rsObject.return_value = uniffi_jsi::Bridging<int64_t>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "returnValue"));
    rsObject.call_status =
        uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::fromJs(
            rt, callInvoker, jsObject.getProperty(rt, "callStatus"));

    return rsObject;
  }
};

} // namespace uniffi::matrix_sdk_ffi
  // Implementation of callback function calling from JS to Rust
  // ForeignFutureCompleteI64, passed from Rust to JS as part of async
  // callbacks.
namespace uniffi::matrix_sdk_ffi {
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureCompleteI64> {
  static jsi::Value toJs(jsi::Runtime &rt,
                         std::shared_ptr<CallInvoker> callInvoker,
                         UniffiForeignFutureCompleteI64 rsCallback) {
    return jsi::Function::createFromHostFunction(
        rt, jsi::PropNameID::forAscii(rt, "--ForeignFutureCompleteI64"), 2,
        [rsCallback, callInvoker](jsi::Runtime &rt, const jsi::Value &thisValue,
                                  const jsi::Value *arguments,
                                  size_t count) -> jsi::Value {
          return intoRust(rt, callInvoker, thisValue, arguments, count,
                          rsCallback);
        });
  }

  static jsi::Value intoRust(jsi::Runtime &rt,
                             std::shared_ptr<CallInvoker> callInvoker,
                             const jsi::Value &thisValue,
                             const jsi::Value *args, size_t count,
                             UniffiForeignFutureCompleteI64 func) {
    // Convert the arguments into the Rust, with Bridging<T>::fromJs,
    // then call the rs_callback with those arguments.
    func(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]),
         uniffi::matrix_sdk_ffi::Bridging<UniffiForeignFutureStructI64>::fromJs(
             rt, callInvoker, args[1]));

    return jsi::Value::undefined();
  }
};
} // namespace uniffi::matrix_sdk_ffi
namespace uniffi::matrix_sdk_ffi {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureStructF32> {
  static UniffiForeignFutureStructF32
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(rt,
                         "Expected an object for UniffiForeignFutureStructF32");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiForeignFutureStructF32 rsObject;

    // Create the vtable from the js callbacks.
    rsObject.return_value = uniffi_jsi::Bridging<float>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "returnValue"));
    rsObject.call_status =
        uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::fromJs(
            rt, callInvoker, jsObject.getProperty(rt, "callStatus"));

    return rsObject;
  }
};

} // namespace uniffi::matrix_sdk_ffi
  // Implementation of callback function calling from JS to Rust
  // ForeignFutureCompleteF32, passed from Rust to JS as part of async
  // callbacks.
namespace uniffi::matrix_sdk_ffi {
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureCompleteF32> {
  static jsi::Value toJs(jsi::Runtime &rt,
                         std::shared_ptr<CallInvoker> callInvoker,
                         UniffiForeignFutureCompleteF32 rsCallback) {
    return jsi::Function::createFromHostFunction(
        rt, jsi::PropNameID::forAscii(rt, "--ForeignFutureCompleteF32"), 2,
        [rsCallback, callInvoker](jsi::Runtime &rt, const jsi::Value &thisValue,
                                  const jsi::Value *arguments,
                                  size_t count) -> jsi::Value {
          return intoRust(rt, callInvoker, thisValue, arguments, count,
                          rsCallback);
        });
  }

  static jsi::Value intoRust(jsi::Runtime &rt,
                             std::shared_ptr<CallInvoker> callInvoker,
                             const jsi::Value &thisValue,
                             const jsi::Value *args, size_t count,
                             UniffiForeignFutureCompleteF32 func) {
    // Convert the arguments into the Rust, with Bridging<T>::fromJs,
    // then call the rs_callback with those arguments.
    func(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]),
         uniffi::matrix_sdk_ffi::Bridging<UniffiForeignFutureStructF32>::fromJs(
             rt, callInvoker, args[1]));

    return jsi::Value::undefined();
  }
};
} // namespace uniffi::matrix_sdk_ffi
namespace uniffi::matrix_sdk_ffi {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureStructF64> {
  static UniffiForeignFutureStructF64
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(rt,
                         "Expected an object for UniffiForeignFutureStructF64");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiForeignFutureStructF64 rsObject;

    // Create the vtable from the js callbacks.
    rsObject.return_value = uniffi_jsi::Bridging<double>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "returnValue"));
    rsObject.call_status =
        uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::fromJs(
            rt, callInvoker, jsObject.getProperty(rt, "callStatus"));

    return rsObject;
  }
};

} // namespace uniffi::matrix_sdk_ffi
  // Implementation of callback function calling from JS to Rust
  // ForeignFutureCompleteF64, passed from Rust to JS as part of async
  // callbacks.
namespace uniffi::matrix_sdk_ffi {
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureCompleteF64> {
  static jsi::Value toJs(jsi::Runtime &rt,
                         std::shared_ptr<CallInvoker> callInvoker,
                         UniffiForeignFutureCompleteF64 rsCallback) {
    return jsi::Function::createFromHostFunction(
        rt, jsi::PropNameID::forAscii(rt, "--ForeignFutureCompleteF64"), 2,
        [rsCallback, callInvoker](jsi::Runtime &rt, const jsi::Value &thisValue,
                                  const jsi::Value *arguments,
                                  size_t count) -> jsi::Value {
          return intoRust(rt, callInvoker, thisValue, arguments, count,
                          rsCallback);
        });
  }

  static jsi::Value intoRust(jsi::Runtime &rt,
                             std::shared_ptr<CallInvoker> callInvoker,
                             const jsi::Value &thisValue,
                             const jsi::Value *args, size_t count,
                             UniffiForeignFutureCompleteF64 func) {
    // Convert the arguments into the Rust, with Bridging<T>::fromJs,
    // then call the rs_callback with those arguments.
    func(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]),
         uniffi::matrix_sdk_ffi::Bridging<UniffiForeignFutureStructF64>::fromJs(
             rt, callInvoker, args[1]));

    return jsi::Value::undefined();
  }
};
} // namespace uniffi::matrix_sdk_ffi
namespace uniffi::matrix_sdk_ffi {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureStructPointer> {
  static UniffiForeignFutureStructPointer
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(
          rt, "Expected an object for UniffiForeignFutureStructPointer");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiForeignFutureStructPointer rsObject;

    // Create the vtable from the js callbacks.
    rsObject.return_value = uniffi_jsi::Bridging<void *>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "returnValue"));
    rsObject.call_status =
        uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::fromJs(
            rt, callInvoker, jsObject.getProperty(rt, "callStatus"));

    return rsObject;
  }
};

} // namespace uniffi::matrix_sdk_ffi
  // Implementation of callback function calling from JS to Rust
  // ForeignFutureCompletePointer, passed from Rust to JS as part of async
  // callbacks.
namespace uniffi::matrix_sdk_ffi {
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureCompletePointer> {
  static jsi::Value toJs(jsi::Runtime &rt,
                         std::shared_ptr<CallInvoker> callInvoker,
                         UniffiForeignFutureCompletePointer rsCallback) {
    return jsi::Function::createFromHostFunction(
        rt, jsi::PropNameID::forAscii(rt, "--ForeignFutureCompletePointer"), 2,
        [rsCallback, callInvoker](jsi::Runtime &rt, const jsi::Value &thisValue,
                                  const jsi::Value *arguments,
                                  size_t count) -> jsi::Value {
          return intoRust(rt, callInvoker, thisValue, arguments, count,
                          rsCallback);
        });
  }

  static jsi::Value intoRust(jsi::Runtime &rt,
                             std::shared_ptr<CallInvoker> callInvoker,
                             const jsi::Value &thisValue,
                             const jsi::Value *args, size_t count,
                             UniffiForeignFutureCompletePointer func) {
    // Convert the arguments into the Rust, with Bridging<T>::fromJs,
    // then call the rs_callback with those arguments.
    func(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]),
         uniffi::matrix_sdk_ffi::Bridging<
             UniffiForeignFutureStructPointer>::fromJs(rt, callInvoker,
                                                       args[1]));

    return jsi::Value::undefined();
  }
};
} // namespace uniffi::matrix_sdk_ffi
namespace uniffi::matrix_sdk_ffi {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureStructRustBuffer> {
  static UniffiForeignFutureStructRustBuffer
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(
          rt, "Expected an object for UniffiForeignFutureStructRustBuffer");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiForeignFutureStructRustBuffer rsObject;

    // Create the vtable from the js callbacks.
    rsObject.return_value =
        uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(
            rt, callInvoker, jsObject.getProperty(rt, "returnValue"));
    rsObject.call_status =
        uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::fromJs(
            rt, callInvoker, jsObject.getProperty(rt, "callStatus"));

    return rsObject;
  }
};

} // namespace uniffi::matrix_sdk_ffi
  // Implementation of callback function calling from JS to Rust
  // ForeignFutureCompleteRustBuffer, passed from Rust to JS as part of async
  // callbacks.
namespace uniffi::matrix_sdk_ffi {
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureCompleteRustBuffer> {
  static jsi::Value toJs(jsi::Runtime &rt,
                         std::shared_ptr<CallInvoker> callInvoker,
                         UniffiForeignFutureCompleteRustBuffer rsCallback) {
    return jsi::Function::createFromHostFunction(
        rt, jsi::PropNameID::forAscii(rt, "--ForeignFutureCompleteRustBuffer"),
        2,
        [rsCallback, callInvoker](jsi::Runtime &rt, const jsi::Value &thisValue,
                                  const jsi::Value *arguments,
                                  size_t count) -> jsi::Value {
          return intoRust(rt, callInvoker, thisValue, arguments, count,
                          rsCallback);
        });
  }

  static jsi::Value intoRust(jsi::Runtime &rt,
                             std::shared_ptr<CallInvoker> callInvoker,
                             const jsi::Value &thisValue,
                             const jsi::Value *args, size_t count,
                             UniffiForeignFutureCompleteRustBuffer func) {
    // Convert the arguments into the Rust, with Bridging<T>::fromJs,
    // then call the rs_callback with those arguments.
    func(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]),
         uniffi::matrix_sdk_ffi::Bridging<
             UniffiForeignFutureStructRustBuffer>::fromJs(rt, callInvoker,
                                                          args[1]));

    return jsi::Value::undefined();
  }
};
} // namespace uniffi::matrix_sdk_ffi
namespace uniffi::matrix_sdk_ffi {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureStructVoid> {
  static UniffiForeignFutureStructVoid
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(
          rt, "Expected an object for UniffiForeignFutureStructVoid");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiForeignFutureStructVoid rsObject;

    // Create the vtable from the js callbacks.
    rsObject.call_status =
        uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::fromJs(
            rt, callInvoker, jsObject.getProperty(rt, "callStatus"));

    return rsObject;
  }
};

} // namespace uniffi::matrix_sdk_ffi
  // Implementation of callback function calling from JS to Rust
  // ForeignFutureCompleteVoid, passed from Rust to JS as part of async
  // callbacks.
namespace uniffi::matrix_sdk_ffi {
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureCompleteVoid> {
  static jsi::Value toJs(jsi::Runtime &rt,
                         std::shared_ptr<CallInvoker> callInvoker,
                         UniffiForeignFutureCompleteVoid rsCallback) {
    return jsi::Function::createFromHostFunction(
        rt, jsi::PropNameID::forAscii(rt, "--ForeignFutureCompleteVoid"), 2,
        [rsCallback, callInvoker](jsi::Runtime &rt, const jsi::Value &thisValue,
                                  const jsi::Value *arguments,
                                  size_t count) -> jsi::Value {
          return intoRust(rt, callInvoker, thisValue, arguments, count,
                          rsCallback);
        });
  }

  static jsi::Value intoRust(jsi::Runtime &rt,
                             std::shared_ptr<CallInvoker> callInvoker,
                             const jsi::Value &thisValue,
                             const jsi::Value *args, size_t count,
                             UniffiForeignFutureCompleteVoid func) {
    // Convert the arguments into the Rust, with Bridging<T>::fromJs,
    // then call the rs_callback with those arguments.
    func(
        uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]),
        uniffi::matrix_sdk_ffi::Bridging<UniffiForeignFutureStructVoid>::fromJs(
            rt, callInvoker, args[1]));

    return jsi::Value::undefined();
  }
};
} // namespace uniffi::matrix_sdk_ffi
  // Implementation of callback function calling from Rust to JS
  // CallbackInterfaceBackupStateListenerMethod0

// Callback function:
// uniffi::matrix_sdk_ffi::cb::callbackinterfacebackupstatelistenermethod0::UniffiCallbackInterfaceBackupStateListenerMethod0
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::matrix_sdk_ffi::cb::
    callbackinterfacebackupstatelistenermethod0 {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t, RustBuffer, void *, RustCallStatus *)>
    rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_uniffiHandle, RustBuffer rs_status,
                 void *rs_uniffiOutReturn, RustCallStatus *uniffi_call_status) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_uniffiHandle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_uniffiHandle);
  auto js_status = uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(
      rt, callInvoker, rs_status);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_uniffiHandle, js_status);

    // Now copy the result back from JS into the RustCallStatus object.
    uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyFromJs(
        rt, callInvoker, uniffiResult, uniffi_call_status);

    if (uniffi_call_status->code != UNIFFI_CALL_STATUS_OK) {
      // The JS callback finished abnormally, so we cannot retrieve the return
      // value.
      return;
    }

  } catch (const jsi::JSError &error) {
    std::cout << "Error in callback "
                 "UniffiCallbackInterfaceBackupStateListenerMethod0: "
              << error.what() << std::endl;
    throw error;
  }
}

static void callback(uint64_t rs_uniffiHandle, RustBuffer rs_status,
                     void *rs_uniffiOutReturn,
                     RustCallStatus *uniffi_call_status) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_uniffiHandle, rs_status, rs_uniffiOutReturn, uniffi_call_status);
}

static UniffiCallbackInterfaceBackupStateListenerMethod0
makeCallbackFunction( // uniffi::matrix_sdk_ffi::cb::callbackinterfacebackupstatelistenermethod0
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](
                 uint64_t rs_uniffiHandle, RustBuffer rs_status,
                 void *rs_uniffiOutReturn, RustCallStatus *uniffi_call_status) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_uniffiHandle, rs_status,
         rs_uniffiOutReturn, uniffi_call_status](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_uniffiHandle, rs_status,
               rs_uniffiOutReturn, uniffi_call_status);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.
    callInvoker->invokeBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeMatrixSdkFfi, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace
  // uniffi::matrix_sdk_ffi::cb::callbackinterfacebackupstatelistenermethod0
  // Implementation of callback function calling from Rust to JS
  // CallbackInterfaceBackupSteadyStateListenerMethod0

// Callback function:
// uniffi::matrix_sdk_ffi::cb::callbackinterfacebackupsteadystatelistenermethod0::UniffiCallbackInterfaceBackupSteadyStateListenerMethod0
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::matrix_sdk_ffi::cb::
    callbackinterfacebackupsteadystatelistenermethod0 {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t, RustBuffer, void *, RustCallStatus *)>
    rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_uniffiHandle, RustBuffer rs_status,
                 void *rs_uniffiOutReturn, RustCallStatus *uniffi_call_status) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_uniffiHandle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_uniffiHandle);
  auto js_status = uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(
      rt, callInvoker, rs_status);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_uniffiHandle, js_status);

    // Now copy the result back from JS into the RustCallStatus object.
    uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyFromJs(
        rt, callInvoker, uniffiResult, uniffi_call_status);

    if (uniffi_call_status->code != UNIFFI_CALL_STATUS_OK) {
      // The JS callback finished abnormally, so we cannot retrieve the return
      // value.
      return;
    }

  } catch (const jsi::JSError &error) {
    std::cout << "Error in callback "
                 "UniffiCallbackInterfaceBackupSteadyStateListenerMethod0: "
              << error.what() << std::endl;
    throw error;
  }
}

static void callback(uint64_t rs_uniffiHandle, RustBuffer rs_status,
                     void *rs_uniffiOutReturn,
                     RustCallStatus *uniffi_call_status) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_uniffiHandle, rs_status, rs_uniffiOutReturn, uniffi_call_status);
}

static UniffiCallbackInterfaceBackupSteadyStateListenerMethod0
makeCallbackFunction( // uniffi::matrix_sdk_ffi::cb::callbackinterfacebackupsteadystatelistenermethod0
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](
                 uint64_t rs_uniffiHandle, RustBuffer rs_status,
                 void *rs_uniffiOutReturn, RustCallStatus *uniffi_call_status) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_uniffiHandle, rs_status,
         rs_uniffiOutReturn, uniffi_call_status](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_uniffiHandle, rs_status,
               rs_uniffiOutReturn, uniffi_call_status);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.
    callInvoker->invokeBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeMatrixSdkFfi, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace
  // uniffi::matrix_sdk_ffi::cb::callbackinterfacebackupsteadystatelistenermethod0
  // Implementation of callback function calling from Rust to JS
  // CallbackInterfaceClientDelegateMethod0

// Callback function:
// uniffi::matrix_sdk_ffi::cb::callbackinterfaceclientdelegatemethod0::UniffiCallbackInterfaceClientDelegateMethod0
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::matrix_sdk_ffi::cb::callbackinterfaceclientdelegatemethod0 {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t, int8_t, void *, RustCallStatus *)>
    rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_uniffiHandle, int8_t rs_isSoftLogout,
                 void *rs_uniffiOutReturn, RustCallStatus *uniffi_call_status) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_uniffiHandle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_uniffiHandle);
  auto js_isSoftLogout =
      uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, rs_isSoftLogout);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_uniffiHandle, js_isSoftLogout);

    // Now copy the result back from JS into the RustCallStatus object.
    uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyFromJs(
        rt, callInvoker, uniffiResult, uniffi_call_status);

    if (uniffi_call_status->code != UNIFFI_CALL_STATUS_OK) {
      // The JS callback finished abnormally, so we cannot retrieve the return
      // value.
      return;
    }

  } catch (const jsi::JSError &error) {
    std::cout
        << "Error in callback UniffiCallbackInterfaceClientDelegateMethod0: "
        << error.what() << std::endl;
    throw error;
  }
}

static void callback(uint64_t rs_uniffiHandle, int8_t rs_isSoftLogout,
                     void *rs_uniffiOutReturn,
                     RustCallStatus *uniffi_call_status) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_uniffiHandle, rs_isSoftLogout, rs_uniffiOutReturn,
           uniffi_call_status);
}

static UniffiCallbackInterfaceClientDelegateMethod0
makeCallbackFunction( // uniffi::matrix_sdk_ffi::cb::callbackinterfaceclientdelegatemethod0
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](
                 uint64_t rs_uniffiHandle, int8_t rs_isSoftLogout,
                 void *rs_uniffiOutReturn, RustCallStatus *uniffi_call_status) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_uniffiHandle, rs_isSoftLogout,
         rs_uniffiOutReturn, uniffi_call_status](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_uniffiHandle, rs_isSoftLogout,
               rs_uniffiOutReturn, uniffi_call_status);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.
    callInvoker->invokeBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeMatrixSdkFfi, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace
  // uniffi::matrix_sdk_ffi::cb::callbackinterfaceclientdelegatemethod0
  // Implementation of callback function calling from Rust to JS
  // CallbackInterfaceClientDelegateMethod1

// Callback function:
// uniffi::matrix_sdk_ffi::cb::callbackinterfaceclientdelegatemethod1::UniffiCallbackInterfaceClientDelegateMethod1
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::matrix_sdk_ffi::cb::callbackinterfaceclientdelegatemethod1 {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t, void *, RustCallStatus *)> rsLambda =
    nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_uniffiHandle, void *rs_uniffiOutReturn,
                 RustCallStatus *uniffi_call_status) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_uniffiHandle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_uniffiHandle);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_uniffiHandle);

    // Now copy the result back from JS into the RustCallStatus object.
    uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyFromJs(
        rt, callInvoker, uniffiResult, uniffi_call_status);

    if (uniffi_call_status->code != UNIFFI_CALL_STATUS_OK) {
      // The JS callback finished abnormally, so we cannot retrieve the return
      // value.
      return;
    }

  } catch (const jsi::JSError &error) {
    std::cout
        << "Error in callback UniffiCallbackInterfaceClientDelegateMethod1: "
        << error.what() << std::endl;
    throw error;
  }
}

static void callback(uint64_t rs_uniffiHandle, void *rs_uniffiOutReturn,
                     RustCallStatus *uniffi_call_status) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_uniffiHandle, rs_uniffiOutReturn, uniffi_call_status);
}

static UniffiCallbackInterfaceClientDelegateMethod1
makeCallbackFunction( // uniffi::matrix_sdk_ffi::cb::callbackinterfaceclientdelegatemethod1
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker,
              callbackValue](uint64_t rs_uniffiHandle, void *rs_uniffiOutReturn,
                             RustCallStatus *uniffi_call_status) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_uniffiHandle, rs_uniffiOutReturn,
         uniffi_call_status](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_uniffiHandle,
               rs_uniffiOutReturn, uniffi_call_status);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.
    callInvoker->invokeBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeMatrixSdkFfi, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace
  // uniffi::matrix_sdk_ffi::cb::callbackinterfaceclientdelegatemethod1
  // Implementation of callback function calling from Rust to JS
  // CallbackInterfaceClientSessionDelegateMethod0

// Callback function:
// uniffi::matrix_sdk_ffi::cb::callbackinterfaceclientsessiondelegatemethod0::UniffiCallbackInterfaceClientSessionDelegateMethod0
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::matrix_sdk_ffi::cb::
    callbackinterfaceclientsessiondelegatemethod0 {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t, RustBuffer, RustBuffer *, RustCallStatus *)>
    rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_uniffiHandle, RustBuffer rs_userId,
                 RustBuffer *rs_uniffiOutReturn,
                 RustCallStatus *uniffi_call_status) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_uniffiHandle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_uniffiHandle);
  auto js_userId = uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(
      rt, callInvoker, rs_userId);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_uniffiHandle, js_userId);

    // Now copy the result back from JS into the RustCallStatus object.
    uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyFromJs(
        rt, callInvoker, uniffiResult, uniffi_call_status);

    if (uniffi_call_status->code != UNIFFI_CALL_STATUS_OK) {
      // The JS callback finished abnormally, so we cannot retrieve the return
      // value.
      return;
    }

    // Finally, we need to copy the return value back into the Rust pointer.
    *rs_uniffiOutReturn =
        uniffi::matrix_sdk_ffi::Bridging<ReferenceHolder<RustBuffer>>::fromJs(
            rt, callInvoker, uniffiResult);
  } catch (const jsi::JSError &error) {
    std::cout << "Error in callback "
                 "UniffiCallbackInterfaceClientSessionDelegateMethod0: "
              << error.what() << std::endl;
    throw error;
  }
}

static void callback(uint64_t rs_uniffiHandle, RustBuffer rs_userId,
                     RustBuffer *rs_uniffiOutReturn,
                     RustCallStatus *uniffi_call_status) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_uniffiHandle, rs_userId, rs_uniffiOutReturn, uniffi_call_status);
}

static UniffiCallbackInterfaceClientSessionDelegateMethod0
makeCallbackFunction( // uniffi::matrix_sdk_ffi::cb::callbackinterfaceclientsessiondelegatemethod0
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker,
              callbackValue](uint64_t rs_uniffiHandle, RustBuffer rs_userId,
                             RustBuffer *rs_uniffiOutReturn,
                             RustCallStatus *uniffi_call_status) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_uniffiHandle, rs_userId,
         rs_uniffiOutReturn, uniffi_call_status](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_uniffiHandle, rs_userId,
               rs_uniffiOutReturn, uniffi_call_status);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.
    callInvoker->invokeBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeMatrixSdkFfi, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace
  // uniffi::matrix_sdk_ffi::cb::callbackinterfaceclientsessiondelegatemethod0
  // Implementation of callback function calling from Rust to JS
  // CallbackInterfaceClientSessionDelegateMethod1

// Callback function:
// uniffi::matrix_sdk_ffi::cb::callbackinterfaceclientsessiondelegatemethod1::UniffiCallbackInterfaceClientSessionDelegateMethod1
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::matrix_sdk_ffi::cb::
    callbackinterfaceclientsessiondelegatemethod1 {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t, RustBuffer, void *, RustCallStatus *)>
    rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_uniffiHandle, RustBuffer rs_session,
                 void *rs_uniffiOutReturn, RustCallStatus *uniffi_call_status) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_uniffiHandle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_uniffiHandle);
  auto js_session = uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(
      rt, callInvoker, rs_session);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_uniffiHandle, js_session);

    // Now copy the result back from JS into the RustCallStatus object.
    uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyFromJs(
        rt, callInvoker, uniffiResult, uniffi_call_status);

    if (uniffi_call_status->code != UNIFFI_CALL_STATUS_OK) {
      // The JS callback finished abnormally, so we cannot retrieve the return
      // value.
      return;
    }

  } catch (const jsi::JSError &error) {
    std::cout << "Error in callback "
                 "UniffiCallbackInterfaceClientSessionDelegateMethod1: "
              << error.what() << std::endl;
    throw error;
  }
}

static void callback(uint64_t rs_uniffiHandle, RustBuffer rs_session,
                     void *rs_uniffiOutReturn,
                     RustCallStatus *uniffi_call_status) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_uniffiHandle, rs_session, rs_uniffiOutReturn, uniffi_call_status);
}

static UniffiCallbackInterfaceClientSessionDelegateMethod1
makeCallbackFunction( // uniffi::matrix_sdk_ffi::cb::callbackinterfaceclientsessiondelegatemethod1
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](
                 uint64_t rs_uniffiHandle, RustBuffer rs_session,
                 void *rs_uniffiOutReturn, RustCallStatus *uniffi_call_status) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_uniffiHandle, rs_session,
         rs_uniffiOutReturn, uniffi_call_status](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_uniffiHandle, rs_session,
               rs_uniffiOutReturn, uniffi_call_status);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.
    callInvoker->invokeBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeMatrixSdkFfi, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace
  // uniffi::matrix_sdk_ffi::cb::callbackinterfaceclientsessiondelegatemethod1
  // Implementation of callback function calling from Rust to JS
  // CallbackInterfaceEnableRecoveryProgressListenerMethod0

// Callback function:
// uniffi::matrix_sdk_ffi::cb::callbackinterfaceenablerecoveryprogresslistenermethod0::UniffiCallbackInterfaceEnableRecoveryProgressListenerMethod0
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::matrix_sdk_ffi::cb::
    callbackinterfaceenablerecoveryprogresslistenermethod0 {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t, RustBuffer, void *, RustCallStatus *)>
    rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_uniffiHandle, RustBuffer rs_status,
                 void *rs_uniffiOutReturn, RustCallStatus *uniffi_call_status) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_uniffiHandle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_uniffiHandle);
  auto js_status = uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(
      rt, callInvoker, rs_status);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_uniffiHandle, js_status);

    // Now copy the result back from JS into the RustCallStatus object.
    uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyFromJs(
        rt, callInvoker, uniffiResult, uniffi_call_status);

    if (uniffi_call_status->code != UNIFFI_CALL_STATUS_OK) {
      // The JS callback finished abnormally, so we cannot retrieve the return
      // value.
      return;
    }

  } catch (const jsi::JSError &error) {
    std::cout
        << "Error in callback "
           "UniffiCallbackInterfaceEnableRecoveryProgressListenerMethod0: "
        << error.what() << std::endl;
    throw error;
  }
}

static void callback(uint64_t rs_uniffiHandle, RustBuffer rs_status,
                     void *rs_uniffiOutReturn,
                     RustCallStatus *uniffi_call_status) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_uniffiHandle, rs_status, rs_uniffiOutReturn, uniffi_call_status);
}

static UniffiCallbackInterfaceEnableRecoveryProgressListenerMethod0
makeCallbackFunction( // uniffi::matrix_sdk_ffi::cb::callbackinterfaceenablerecoveryprogresslistenermethod0
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](
                 uint64_t rs_uniffiHandle, RustBuffer rs_status,
                 void *rs_uniffiOutReturn, RustCallStatus *uniffi_call_status) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_uniffiHandle, rs_status,
         rs_uniffiOutReturn, uniffi_call_status](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_uniffiHandle, rs_status,
               rs_uniffiOutReturn, uniffi_call_status);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.
    callInvoker->invokeBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeMatrixSdkFfi, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace
  // uniffi::matrix_sdk_ffi::cb::callbackinterfaceenablerecoveryprogresslistenermethod0
  // Implementation of callback function calling from Rust to JS
  // CallbackInterfaceIdentityStatusChangeListenerMethod0

// Callback function:
// uniffi::matrix_sdk_ffi::cb::callbackinterfaceidentitystatuschangelistenermethod0::UniffiCallbackInterfaceIdentityStatusChangeListenerMethod0
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::matrix_sdk_ffi::cb::
    callbackinterfaceidentitystatuschangelistenermethod0 {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t, RustBuffer, void *, RustCallStatus *)>
    rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_uniffiHandle, RustBuffer rs_identityStatusChange,
                 void *rs_uniffiOutReturn, RustCallStatus *uniffi_call_status) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_uniffiHandle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_uniffiHandle);
  auto js_identityStatusChange =
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(
          rt, callInvoker, rs_identityStatusChange);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_uniffiHandle, js_identityStatusChange);

    // Now copy the result back from JS into the RustCallStatus object.
    uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyFromJs(
        rt, callInvoker, uniffiResult, uniffi_call_status);

    if (uniffi_call_status->code != UNIFFI_CALL_STATUS_OK) {
      // The JS callback finished abnormally, so we cannot retrieve the return
      // value.
      return;
    }

  } catch (const jsi::JSError &error) {
    std::cout << "Error in callback "
                 "UniffiCallbackInterfaceIdentityStatusChangeListenerMethod0: "
              << error.what() << std::endl;
    throw error;
  }
}

static void callback(uint64_t rs_uniffiHandle,
                     RustBuffer rs_identityStatusChange,
                     void *rs_uniffiOutReturn,
                     RustCallStatus *uniffi_call_status) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_uniffiHandle, rs_identityStatusChange, rs_uniffiOutReturn,
           uniffi_call_status);
}

static UniffiCallbackInterfaceIdentityStatusChangeListenerMethod0
makeCallbackFunction( // uniffi::matrix_sdk_ffi::cb::callbackinterfaceidentitystatuschangelistenermethod0
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](
                 uint64_t rs_uniffiHandle, RustBuffer rs_identityStatusChange,
                 void *rs_uniffiOutReturn, RustCallStatus *uniffi_call_status) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_uniffiHandle, rs_identityStatusChange,
         rs_uniffiOutReturn, uniffi_call_status](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_uniffiHandle,
               rs_identityStatusChange, rs_uniffiOutReturn, uniffi_call_status);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.
    callInvoker->invokeBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeMatrixSdkFfi, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace
  // uniffi::matrix_sdk_ffi::cb::callbackinterfaceidentitystatuschangelistenermethod0
  // Implementation of callback function calling from Rust to JS
  // CallbackInterfaceIgnoredUsersListenerMethod0

// Callback function:
// uniffi::matrix_sdk_ffi::cb::callbackinterfaceignoreduserslistenermethod0::UniffiCallbackInterfaceIgnoredUsersListenerMethod0
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::matrix_sdk_ffi::cb::
    callbackinterfaceignoreduserslistenermethod0 {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t, RustBuffer, void *, RustCallStatus *)>
    rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_uniffiHandle, RustBuffer rs_ignoredUserIds,
                 void *rs_uniffiOutReturn, RustCallStatus *uniffi_call_status) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_uniffiHandle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_uniffiHandle);
  auto js_ignoredUserIds = uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(
      rt, callInvoker, rs_ignoredUserIds);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_uniffiHandle, js_ignoredUserIds);

    // Now copy the result back from JS into the RustCallStatus object.
    uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyFromJs(
        rt, callInvoker, uniffiResult, uniffi_call_status);

    if (uniffi_call_status->code != UNIFFI_CALL_STATUS_OK) {
      // The JS callback finished abnormally, so we cannot retrieve the return
      // value.
      return;
    }

  } catch (const jsi::JSError &error) {
    std::cout << "Error in callback "
                 "UniffiCallbackInterfaceIgnoredUsersListenerMethod0: "
              << error.what() << std::endl;
    throw error;
  }
}

static void callback(uint64_t rs_uniffiHandle, RustBuffer rs_ignoredUserIds,
                     void *rs_uniffiOutReturn,
                     RustCallStatus *uniffi_call_status) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_uniffiHandle, rs_ignoredUserIds, rs_uniffiOutReturn,
           uniffi_call_status);
}

static UniffiCallbackInterfaceIgnoredUsersListenerMethod0
makeCallbackFunction( // uniffi::matrix_sdk_ffi::cb::callbackinterfaceignoreduserslistenermethod0
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](
                 uint64_t rs_uniffiHandle, RustBuffer rs_ignoredUserIds,
                 void *rs_uniffiOutReturn, RustCallStatus *uniffi_call_status) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_uniffiHandle, rs_ignoredUserIds,
         rs_uniffiOutReturn, uniffi_call_status](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_uniffiHandle,
               rs_ignoredUserIds, rs_uniffiOutReturn, uniffi_call_status);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.
    callInvoker->invokeBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeMatrixSdkFfi, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace
  // uniffi::matrix_sdk_ffi::cb::callbackinterfaceignoreduserslistenermethod0
  // Implementation of callback function calling from Rust to JS
  // CallbackInterfaceKnockRequestsListenerMethod0

// Callback function:
// uniffi::matrix_sdk_ffi::cb::callbackinterfaceknockrequestslistenermethod0::UniffiCallbackInterfaceKnockRequestsListenerMethod0
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::matrix_sdk_ffi::cb::
    callbackinterfaceknockrequestslistenermethod0 {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t, RustBuffer, void *, RustCallStatus *)>
    rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_uniffiHandle, RustBuffer rs_joinRequests,
                 void *rs_uniffiOutReturn, RustCallStatus *uniffi_call_status) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_uniffiHandle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_uniffiHandle);
  auto js_joinRequests = uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(
      rt, callInvoker, rs_joinRequests);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_uniffiHandle, js_joinRequests);

    // Now copy the result back from JS into the RustCallStatus object.
    uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyFromJs(
        rt, callInvoker, uniffiResult, uniffi_call_status);

    if (uniffi_call_status->code != UNIFFI_CALL_STATUS_OK) {
      // The JS callback finished abnormally, so we cannot retrieve the return
      // value.
      return;
    }

  } catch (const jsi::JSError &error) {
    std::cout << "Error in callback "
                 "UniffiCallbackInterfaceKnockRequestsListenerMethod0: "
              << error.what() << std::endl;
    throw error;
  }
}

static void callback(uint64_t rs_uniffiHandle, RustBuffer rs_joinRequests,
                     void *rs_uniffiOutReturn,
                     RustCallStatus *uniffi_call_status) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_uniffiHandle, rs_joinRequests, rs_uniffiOutReturn,
           uniffi_call_status);
}

static UniffiCallbackInterfaceKnockRequestsListenerMethod0
makeCallbackFunction( // uniffi::matrix_sdk_ffi::cb::callbackinterfaceknockrequestslistenermethod0
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](
                 uint64_t rs_uniffiHandle, RustBuffer rs_joinRequests,
                 void *rs_uniffiOutReturn, RustCallStatus *uniffi_call_status) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_uniffiHandle, rs_joinRequests,
         rs_uniffiOutReturn, uniffi_call_status](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_uniffiHandle, rs_joinRequests,
               rs_uniffiOutReturn, uniffi_call_status);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.
    callInvoker->invokeBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeMatrixSdkFfi, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace
  // uniffi::matrix_sdk_ffi::cb::callbackinterfaceknockrequestslistenermethod0
  // Implementation of callback function calling from Rust to JS
  // CallbackInterfaceNotificationSettingsDelegateMethod0

// Callback function:
// uniffi::matrix_sdk_ffi::cb::callbackinterfacenotificationsettingsdelegatemethod0::UniffiCallbackInterfaceNotificationSettingsDelegateMethod0
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::matrix_sdk_ffi::cb::
    callbackinterfacenotificationsettingsdelegatemethod0 {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t, void *, RustCallStatus *)> rsLambda =
    nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_uniffiHandle, void *rs_uniffiOutReturn,
                 RustCallStatus *uniffi_call_status) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_uniffiHandle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_uniffiHandle);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_uniffiHandle);

    // Now copy the result back from JS into the RustCallStatus object.
    uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyFromJs(
        rt, callInvoker, uniffiResult, uniffi_call_status);

    if (uniffi_call_status->code != UNIFFI_CALL_STATUS_OK) {
      // The JS callback finished abnormally, so we cannot retrieve the return
      // value.
      return;
    }

  } catch (const jsi::JSError &error) {
    std::cout << "Error in callback "
                 "UniffiCallbackInterfaceNotificationSettingsDelegateMethod0: "
              << error.what() << std::endl;
    throw error;
  }
}

static void callback(uint64_t rs_uniffiHandle, void *rs_uniffiOutReturn,
                     RustCallStatus *uniffi_call_status) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_uniffiHandle, rs_uniffiOutReturn, uniffi_call_status);
}

static UniffiCallbackInterfaceNotificationSettingsDelegateMethod0
makeCallbackFunction( // uniffi::matrix_sdk_ffi::cb::callbackinterfacenotificationsettingsdelegatemethod0
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker,
              callbackValue](uint64_t rs_uniffiHandle, void *rs_uniffiOutReturn,
                             RustCallStatus *uniffi_call_status) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_uniffiHandle, rs_uniffiOutReturn,
         uniffi_call_status](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_uniffiHandle,
               rs_uniffiOutReturn, uniffi_call_status);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.
    callInvoker->invokeBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeMatrixSdkFfi, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace
  // uniffi::matrix_sdk_ffi::cb::callbackinterfacenotificationsettingsdelegatemethod0
  // Implementation of callback function calling from Rust to JS
  // CallbackInterfacePaginationStatusListenerMethod0

// Callback function:
// uniffi::matrix_sdk_ffi::cb::callbackinterfacepaginationstatuslistenermethod0::UniffiCallbackInterfacePaginationStatusListenerMethod0
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::matrix_sdk_ffi::cb::
    callbackinterfacepaginationstatuslistenermethod0 {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t, RustBuffer, void *, RustCallStatus *)>
    rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_uniffiHandle, RustBuffer rs_status,
                 void *rs_uniffiOutReturn, RustCallStatus *uniffi_call_status) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_uniffiHandle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_uniffiHandle);
  auto js_status = uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(
      rt, callInvoker, rs_status);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_uniffiHandle, js_status);

    // Now copy the result back from JS into the RustCallStatus object.
    uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyFromJs(
        rt, callInvoker, uniffiResult, uniffi_call_status);

    if (uniffi_call_status->code != UNIFFI_CALL_STATUS_OK) {
      // The JS callback finished abnormally, so we cannot retrieve the return
      // value.
      return;
    }

  } catch (const jsi::JSError &error) {
    std::cout << "Error in callback "
                 "UniffiCallbackInterfacePaginationStatusListenerMethod0: "
              << error.what() << std::endl;
    throw error;
  }
}

static void callback(uint64_t rs_uniffiHandle, RustBuffer rs_status,
                     void *rs_uniffiOutReturn,
                     RustCallStatus *uniffi_call_status) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_uniffiHandle, rs_status, rs_uniffiOutReturn, uniffi_call_status);
}

static UniffiCallbackInterfacePaginationStatusListenerMethod0
makeCallbackFunction( // uniffi::matrix_sdk_ffi::cb::callbackinterfacepaginationstatuslistenermethod0
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](
                 uint64_t rs_uniffiHandle, RustBuffer rs_status,
                 void *rs_uniffiOutReturn, RustCallStatus *uniffi_call_status) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_uniffiHandle, rs_status,
         rs_uniffiOutReturn, uniffi_call_status](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_uniffiHandle, rs_status,
               rs_uniffiOutReturn, uniffi_call_status);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.
    callInvoker->invokeBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeMatrixSdkFfi, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace
  // uniffi::matrix_sdk_ffi::cb::callbackinterfacepaginationstatuslistenermethod0
  // Implementation of callback function calling from Rust to JS
  // CallbackInterfaceProgressWatcherMethod0

// Callback function:
// uniffi::matrix_sdk_ffi::cb::callbackinterfaceprogresswatchermethod0::UniffiCallbackInterfaceProgressWatcherMethod0
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::matrix_sdk_ffi::cb::callbackinterfaceprogresswatchermethod0 {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t, RustBuffer, void *, RustCallStatus *)>
    rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_uniffiHandle, RustBuffer rs_progress,
                 void *rs_uniffiOutReturn, RustCallStatus *uniffi_call_status) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_uniffiHandle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_uniffiHandle);
  auto js_progress = uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(
      rt, callInvoker, rs_progress);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_uniffiHandle, js_progress);

    // Now copy the result back from JS into the RustCallStatus object.
    uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyFromJs(
        rt, callInvoker, uniffiResult, uniffi_call_status);

    if (uniffi_call_status->code != UNIFFI_CALL_STATUS_OK) {
      // The JS callback finished abnormally, so we cannot retrieve the return
      // value.
      return;
    }

  } catch (const jsi::JSError &error) {
    std::cout
        << "Error in callback UniffiCallbackInterfaceProgressWatcherMethod0: "
        << error.what() << std::endl;
    throw error;
  }
}

static void callback(uint64_t rs_uniffiHandle, RustBuffer rs_progress,
                     void *rs_uniffiOutReturn,
                     RustCallStatus *uniffi_call_status) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_uniffiHandle, rs_progress, rs_uniffiOutReturn,
           uniffi_call_status);
}

static UniffiCallbackInterfaceProgressWatcherMethod0
makeCallbackFunction( // uniffi::matrix_sdk_ffi::cb::callbackinterfaceprogresswatchermethod0
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](
                 uint64_t rs_uniffiHandle, RustBuffer rs_progress,
                 void *rs_uniffiOutReturn, RustCallStatus *uniffi_call_status) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_uniffiHandle, rs_progress,
         rs_uniffiOutReturn, uniffi_call_status](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_uniffiHandle, rs_progress,
               rs_uniffiOutReturn, uniffi_call_status);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.
    callInvoker->invokeBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeMatrixSdkFfi, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace
  // uniffi::matrix_sdk_ffi::cb::callbackinterfaceprogresswatchermethod0
  // Implementation of callback function calling from Rust to JS
  // CallbackInterfaceQrLoginProgressListenerMethod0

// Callback function:
// uniffi::matrix_sdk_ffi::cb::callbackinterfaceqrloginprogresslistenermethod0::UniffiCallbackInterfaceQrLoginProgressListenerMethod0
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::matrix_sdk_ffi::cb::
    callbackinterfaceqrloginprogresslistenermethod0 {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t, RustBuffer, void *, RustCallStatus *)>
    rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_uniffiHandle, RustBuffer rs_state,
                 void *rs_uniffiOutReturn, RustCallStatus *uniffi_call_status) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_uniffiHandle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_uniffiHandle);
  auto js_state = uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(
      rt, callInvoker, rs_state);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_uniffiHandle, js_state);

    // Now copy the result back from JS into the RustCallStatus object.
    uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyFromJs(
        rt, callInvoker, uniffiResult, uniffi_call_status);

    if (uniffi_call_status->code != UNIFFI_CALL_STATUS_OK) {
      // The JS callback finished abnormally, so we cannot retrieve the return
      // value.
      return;
    }

  } catch (const jsi::JSError &error) {
    std::cout << "Error in callback "
                 "UniffiCallbackInterfaceQrLoginProgressListenerMethod0: "
              << error.what() << std::endl;
    throw error;
  }
}

static void callback(uint64_t rs_uniffiHandle, RustBuffer rs_state,
                     void *rs_uniffiOutReturn,
                     RustCallStatus *uniffi_call_status) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_uniffiHandle, rs_state, rs_uniffiOutReturn, uniffi_call_status);
}

static UniffiCallbackInterfaceQrLoginProgressListenerMethod0
makeCallbackFunction( // uniffi::matrix_sdk_ffi::cb::callbackinterfaceqrloginprogresslistenermethod0
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](
                 uint64_t rs_uniffiHandle, RustBuffer rs_state,
                 void *rs_uniffiOutReturn, RustCallStatus *uniffi_call_status) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_uniffiHandle, rs_state,
         rs_uniffiOutReturn, uniffi_call_status](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_uniffiHandle, rs_state,
               rs_uniffiOutReturn, uniffi_call_status);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.
    callInvoker->invokeBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeMatrixSdkFfi, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace
  // uniffi::matrix_sdk_ffi::cb::callbackinterfaceqrloginprogresslistenermethod0
  // Implementation of callback function calling from Rust to JS
  // CallbackInterfaceRecoveryStateListenerMethod0

// Callback function:
// uniffi::matrix_sdk_ffi::cb::callbackinterfacerecoverystatelistenermethod0::UniffiCallbackInterfaceRecoveryStateListenerMethod0
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::matrix_sdk_ffi::cb::
    callbackinterfacerecoverystatelistenermethod0 {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t, RustBuffer, void *, RustCallStatus *)>
    rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_uniffiHandle, RustBuffer rs_status,
                 void *rs_uniffiOutReturn, RustCallStatus *uniffi_call_status) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_uniffiHandle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_uniffiHandle);
  auto js_status = uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(
      rt, callInvoker, rs_status);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_uniffiHandle, js_status);

    // Now copy the result back from JS into the RustCallStatus object.
    uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyFromJs(
        rt, callInvoker, uniffiResult, uniffi_call_status);

    if (uniffi_call_status->code != UNIFFI_CALL_STATUS_OK) {
      // The JS callback finished abnormally, so we cannot retrieve the return
      // value.
      return;
    }

  } catch (const jsi::JSError &error) {
    std::cout << "Error in callback "
                 "UniffiCallbackInterfaceRecoveryStateListenerMethod0: "
              << error.what() << std::endl;
    throw error;
  }
}

static void callback(uint64_t rs_uniffiHandle, RustBuffer rs_status,
                     void *rs_uniffiOutReturn,
                     RustCallStatus *uniffi_call_status) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_uniffiHandle, rs_status, rs_uniffiOutReturn, uniffi_call_status);
}

static UniffiCallbackInterfaceRecoveryStateListenerMethod0
makeCallbackFunction( // uniffi::matrix_sdk_ffi::cb::callbackinterfacerecoverystatelistenermethod0
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](
                 uint64_t rs_uniffiHandle, RustBuffer rs_status,
                 void *rs_uniffiOutReturn, RustCallStatus *uniffi_call_status) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_uniffiHandle, rs_status,
         rs_uniffiOutReturn, uniffi_call_status](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_uniffiHandle, rs_status,
               rs_uniffiOutReturn, uniffi_call_status);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.
    callInvoker->invokeBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeMatrixSdkFfi, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace
  // uniffi::matrix_sdk_ffi::cb::callbackinterfacerecoverystatelistenermethod0
  // Implementation of callback function calling from Rust to JS
  // CallbackInterfaceRoomDirectorySearchEntriesListenerMethod0

// Callback function:
// uniffi::matrix_sdk_ffi::cb::callbackinterfaceroomdirectorysearchentrieslistenermethod0::UniffiCallbackInterfaceRoomDirectorySearchEntriesListenerMethod0
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::matrix_sdk_ffi::cb::
    callbackinterfaceroomdirectorysearchentrieslistenermethod0 {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t, RustBuffer, void *, RustCallStatus *)>
    rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_uniffiHandle, RustBuffer rs_roomEntriesUpdate,
                 void *rs_uniffiOutReturn, RustCallStatus *uniffi_call_status) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_uniffiHandle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_uniffiHandle);
  auto js_roomEntriesUpdate =
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(rt, callInvoker,
                                                         rs_roomEntriesUpdate);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_uniffiHandle, js_roomEntriesUpdate);

    // Now copy the result back from JS into the RustCallStatus object.
    uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyFromJs(
        rt, callInvoker, uniffiResult, uniffi_call_status);

    if (uniffi_call_status->code != UNIFFI_CALL_STATUS_OK) {
      // The JS callback finished abnormally, so we cannot retrieve the return
      // value.
      return;
    }

  } catch (const jsi::JSError &error) {
    std::cout
        << "Error in callback "
           "UniffiCallbackInterfaceRoomDirectorySearchEntriesListenerMethod0: "
        << error.what() << std::endl;
    throw error;
  }
}

static void callback(uint64_t rs_uniffiHandle, RustBuffer rs_roomEntriesUpdate,
                     void *rs_uniffiOutReturn,
                     RustCallStatus *uniffi_call_status) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_uniffiHandle, rs_roomEntriesUpdate, rs_uniffiOutReturn,
           uniffi_call_status);
}

static UniffiCallbackInterfaceRoomDirectorySearchEntriesListenerMethod0
makeCallbackFunction( // uniffi::matrix_sdk_ffi::cb::callbackinterfaceroomdirectorysearchentrieslistenermethod0
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](
                 uint64_t rs_uniffiHandle, RustBuffer rs_roomEntriesUpdate,
                 void *rs_uniffiOutReturn, RustCallStatus *uniffi_call_status) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_uniffiHandle, rs_roomEntriesUpdate,
         rs_uniffiOutReturn, uniffi_call_status](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_uniffiHandle,
               rs_roomEntriesUpdate, rs_uniffiOutReturn, uniffi_call_status);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.
    callInvoker->invokeBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeMatrixSdkFfi, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace
  // uniffi::matrix_sdk_ffi::cb::callbackinterfaceroomdirectorysearchentrieslistenermethod0
  // Implementation of callback function calling from Rust to JS
  // CallbackInterfaceRoomInfoListenerMethod0

// Callback function:
// uniffi::matrix_sdk_ffi::cb::callbackinterfaceroominfolistenermethod0::UniffiCallbackInterfaceRoomInfoListenerMethod0
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::matrix_sdk_ffi::cb::callbackinterfaceroominfolistenermethod0 {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t, RustBuffer, void *, RustCallStatus *)>
    rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_uniffiHandle, RustBuffer rs_roomInfo,
                 void *rs_uniffiOutReturn, RustCallStatus *uniffi_call_status) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_uniffiHandle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_uniffiHandle);
  auto js_roomInfo = uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(
      rt, callInvoker, rs_roomInfo);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_uniffiHandle, js_roomInfo);

    // Now copy the result back from JS into the RustCallStatus object.
    uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyFromJs(
        rt, callInvoker, uniffiResult, uniffi_call_status);

    if (uniffi_call_status->code != UNIFFI_CALL_STATUS_OK) {
      // The JS callback finished abnormally, so we cannot retrieve the return
      // value.
      return;
    }

  } catch (const jsi::JSError &error) {
    std::cout
        << "Error in callback UniffiCallbackInterfaceRoomInfoListenerMethod0: "
        << error.what() << std::endl;
    throw error;
  }
}

static void callback(uint64_t rs_uniffiHandle, RustBuffer rs_roomInfo,
                     void *rs_uniffiOutReturn,
                     RustCallStatus *uniffi_call_status) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_uniffiHandle, rs_roomInfo, rs_uniffiOutReturn,
           uniffi_call_status);
}

static UniffiCallbackInterfaceRoomInfoListenerMethod0
makeCallbackFunction( // uniffi::matrix_sdk_ffi::cb::callbackinterfaceroominfolistenermethod0
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](
                 uint64_t rs_uniffiHandle, RustBuffer rs_roomInfo,
                 void *rs_uniffiOutReturn, RustCallStatus *uniffi_call_status) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_uniffiHandle, rs_roomInfo,
         rs_uniffiOutReturn, uniffi_call_status](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_uniffiHandle, rs_roomInfo,
               rs_uniffiOutReturn, uniffi_call_status);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.
    callInvoker->invokeBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeMatrixSdkFfi, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace
  // uniffi::matrix_sdk_ffi::cb::callbackinterfaceroominfolistenermethod0
  // Implementation of callback function calling from Rust to JS
  // CallbackInterfaceRoomListEntriesListenerMethod0

// Callback function:
// uniffi::matrix_sdk_ffi::cb::callbackinterfaceroomlistentrieslistenermethod0::UniffiCallbackInterfaceRoomListEntriesListenerMethod0
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::matrix_sdk_ffi::cb::
    callbackinterfaceroomlistentrieslistenermethod0 {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t, RustBuffer, void *, RustCallStatus *)>
    rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_uniffiHandle, RustBuffer rs_roomEntriesUpdate,
                 void *rs_uniffiOutReturn, RustCallStatus *uniffi_call_status) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_uniffiHandle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_uniffiHandle);
  auto js_roomEntriesUpdate =
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(rt, callInvoker,
                                                         rs_roomEntriesUpdate);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_uniffiHandle, js_roomEntriesUpdate);

    // Now copy the result back from JS into the RustCallStatus object.
    uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyFromJs(
        rt, callInvoker, uniffiResult, uniffi_call_status);

    if (uniffi_call_status->code != UNIFFI_CALL_STATUS_OK) {
      // The JS callback finished abnormally, so we cannot retrieve the return
      // value.
      return;
    }

  } catch (const jsi::JSError &error) {
    std::cout << "Error in callback "
                 "UniffiCallbackInterfaceRoomListEntriesListenerMethod0: "
              << error.what() << std::endl;
    throw error;
  }
}

static void callback(uint64_t rs_uniffiHandle, RustBuffer rs_roomEntriesUpdate,
                     void *rs_uniffiOutReturn,
                     RustCallStatus *uniffi_call_status) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_uniffiHandle, rs_roomEntriesUpdate, rs_uniffiOutReturn,
           uniffi_call_status);
}

static UniffiCallbackInterfaceRoomListEntriesListenerMethod0
makeCallbackFunction( // uniffi::matrix_sdk_ffi::cb::callbackinterfaceroomlistentrieslistenermethod0
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](
                 uint64_t rs_uniffiHandle, RustBuffer rs_roomEntriesUpdate,
                 void *rs_uniffiOutReturn, RustCallStatus *uniffi_call_status) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_uniffiHandle, rs_roomEntriesUpdate,
         rs_uniffiOutReturn, uniffi_call_status](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_uniffiHandle,
               rs_roomEntriesUpdate, rs_uniffiOutReturn, uniffi_call_status);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.
    callInvoker->invokeBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeMatrixSdkFfi, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace
  // uniffi::matrix_sdk_ffi::cb::callbackinterfaceroomlistentrieslistenermethod0
  // Implementation of callback function calling from Rust to JS
  // CallbackInterfaceRoomListLoadingStateListenerMethod0

// Callback function:
// uniffi::matrix_sdk_ffi::cb::callbackinterfaceroomlistloadingstatelistenermethod0::UniffiCallbackInterfaceRoomListLoadingStateListenerMethod0
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::matrix_sdk_ffi::cb::
    callbackinterfaceroomlistloadingstatelistenermethod0 {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t, RustBuffer, void *, RustCallStatus *)>
    rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_uniffiHandle, RustBuffer rs_state,
                 void *rs_uniffiOutReturn, RustCallStatus *uniffi_call_status) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_uniffiHandle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_uniffiHandle);
  auto js_state = uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(
      rt, callInvoker, rs_state);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_uniffiHandle, js_state);

    // Now copy the result back from JS into the RustCallStatus object.
    uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyFromJs(
        rt, callInvoker, uniffiResult, uniffi_call_status);

    if (uniffi_call_status->code != UNIFFI_CALL_STATUS_OK) {
      // The JS callback finished abnormally, so we cannot retrieve the return
      // value.
      return;
    }

  } catch (const jsi::JSError &error) {
    std::cout << "Error in callback "
                 "UniffiCallbackInterfaceRoomListLoadingStateListenerMethod0: "
              << error.what() << std::endl;
    throw error;
  }
}

static void callback(uint64_t rs_uniffiHandle, RustBuffer rs_state,
                     void *rs_uniffiOutReturn,
                     RustCallStatus *uniffi_call_status) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_uniffiHandle, rs_state, rs_uniffiOutReturn, uniffi_call_status);
}

static UniffiCallbackInterfaceRoomListLoadingStateListenerMethod0
makeCallbackFunction( // uniffi::matrix_sdk_ffi::cb::callbackinterfaceroomlistloadingstatelistenermethod0
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](
                 uint64_t rs_uniffiHandle, RustBuffer rs_state,
                 void *rs_uniffiOutReturn, RustCallStatus *uniffi_call_status) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_uniffiHandle, rs_state,
         rs_uniffiOutReturn, uniffi_call_status](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_uniffiHandle, rs_state,
               rs_uniffiOutReturn, uniffi_call_status);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.
    callInvoker->invokeBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeMatrixSdkFfi, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace
  // uniffi::matrix_sdk_ffi::cb::callbackinterfaceroomlistloadingstatelistenermethod0
  // Implementation of callback function calling from Rust to JS
  // CallbackInterfaceRoomListServiceStateListenerMethod0

// Callback function:
// uniffi::matrix_sdk_ffi::cb::callbackinterfaceroomlistservicestatelistenermethod0::UniffiCallbackInterfaceRoomListServiceStateListenerMethod0
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::matrix_sdk_ffi::cb::
    callbackinterfaceroomlistservicestatelistenermethod0 {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t, RustBuffer, void *, RustCallStatus *)>
    rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_uniffiHandle, RustBuffer rs_state,
                 void *rs_uniffiOutReturn, RustCallStatus *uniffi_call_status) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_uniffiHandle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_uniffiHandle);
  auto js_state = uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(
      rt, callInvoker, rs_state);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_uniffiHandle, js_state);

    // Now copy the result back from JS into the RustCallStatus object.
    uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyFromJs(
        rt, callInvoker, uniffiResult, uniffi_call_status);

    if (uniffi_call_status->code != UNIFFI_CALL_STATUS_OK) {
      // The JS callback finished abnormally, so we cannot retrieve the return
      // value.
      return;
    }

  } catch (const jsi::JSError &error) {
    std::cout << "Error in callback "
                 "UniffiCallbackInterfaceRoomListServiceStateListenerMethod0: "
              << error.what() << std::endl;
    throw error;
  }
}

static void callback(uint64_t rs_uniffiHandle, RustBuffer rs_state,
                     void *rs_uniffiOutReturn,
                     RustCallStatus *uniffi_call_status) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_uniffiHandle, rs_state, rs_uniffiOutReturn, uniffi_call_status);
}

static UniffiCallbackInterfaceRoomListServiceStateListenerMethod0
makeCallbackFunction( // uniffi::matrix_sdk_ffi::cb::callbackinterfaceroomlistservicestatelistenermethod0
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](
                 uint64_t rs_uniffiHandle, RustBuffer rs_state,
                 void *rs_uniffiOutReturn, RustCallStatus *uniffi_call_status) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_uniffiHandle, rs_state,
         rs_uniffiOutReturn, uniffi_call_status](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_uniffiHandle, rs_state,
               rs_uniffiOutReturn, uniffi_call_status);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.
    callInvoker->invokeBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeMatrixSdkFfi, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace
  // uniffi::matrix_sdk_ffi::cb::callbackinterfaceroomlistservicestatelistenermethod0
  // Implementation of callback function calling from Rust to JS
  // CallbackInterfaceRoomListServiceSyncIndicatorListenerMethod0

// Callback function:
// uniffi::matrix_sdk_ffi::cb::callbackinterfaceroomlistservicesyncindicatorlistenermethod0::UniffiCallbackInterfaceRoomListServiceSyncIndicatorListenerMethod0
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::matrix_sdk_ffi::cb::
    callbackinterfaceroomlistservicesyncindicatorlistenermethod0 {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t, RustBuffer, void *, RustCallStatus *)>
    rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_uniffiHandle, RustBuffer rs_syncIndicator,
                 void *rs_uniffiOutReturn, RustCallStatus *uniffi_call_status) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_uniffiHandle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_uniffiHandle);
  auto js_syncIndicator = uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(
      rt, callInvoker, rs_syncIndicator);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_uniffiHandle, js_syncIndicator);

    // Now copy the result back from JS into the RustCallStatus object.
    uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyFromJs(
        rt, callInvoker, uniffiResult, uniffi_call_status);

    if (uniffi_call_status->code != UNIFFI_CALL_STATUS_OK) {
      // The JS callback finished abnormally, so we cannot retrieve the return
      // value.
      return;
    }

  } catch (const jsi::JSError &error) {
    std::cout << "Error in callback "
                 "UniffiCallbackInterfaceRoomListServiceSyncIndicatorListenerMe"
                 "thod0: "
              << error.what() << std::endl;
    throw error;
  }
}

static void callback(uint64_t rs_uniffiHandle, RustBuffer rs_syncIndicator,
                     void *rs_uniffiOutReturn,
                     RustCallStatus *uniffi_call_status) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_uniffiHandle, rs_syncIndicator, rs_uniffiOutReturn,
           uniffi_call_status);
}

static UniffiCallbackInterfaceRoomListServiceSyncIndicatorListenerMethod0
makeCallbackFunction( // uniffi::matrix_sdk_ffi::cb::callbackinterfaceroomlistservicesyncindicatorlistenermethod0
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](
                 uint64_t rs_uniffiHandle, RustBuffer rs_syncIndicator,
                 void *rs_uniffiOutReturn, RustCallStatus *uniffi_call_status) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_uniffiHandle, rs_syncIndicator,
         rs_uniffiOutReturn, uniffi_call_status](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_uniffiHandle,
               rs_syncIndicator, rs_uniffiOutReturn, uniffi_call_status);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.
    callInvoker->invokeBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeMatrixSdkFfi, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace
  // uniffi::matrix_sdk_ffi::cb::callbackinterfaceroomlistservicesyncindicatorlistenermethod0
  // Implementation of callback function calling from Rust to JS
  // CallbackInterfaceSendQueueRoomErrorListenerMethod0

// Callback function:
// uniffi::matrix_sdk_ffi::cb::callbackinterfacesendqueueroomerrorlistenermethod0::UniffiCallbackInterfaceSendQueueRoomErrorListenerMethod0
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::matrix_sdk_ffi::cb::
    callbackinterfacesendqueueroomerrorlistenermethod0 {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t, RustBuffer, RustBuffer, void *,
                          RustCallStatus *)>
    rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_uniffiHandle, RustBuffer rs_roomId,
                 RustBuffer rs_error, void *rs_uniffiOutReturn,
                 RustCallStatus *uniffi_call_status) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_uniffiHandle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_uniffiHandle);
  auto js_roomId = uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(
      rt, callInvoker, rs_roomId);
  auto js_error = uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(
      rt, callInvoker, rs_error);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_uniffiHandle, js_roomId, js_error);

    // Now copy the result back from JS into the RustCallStatus object.
    uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyFromJs(
        rt, callInvoker, uniffiResult, uniffi_call_status);

    if (uniffi_call_status->code != UNIFFI_CALL_STATUS_OK) {
      // The JS callback finished abnormally, so we cannot retrieve the return
      // value.
      return;
    }

  } catch (const jsi::JSError &error) {
    std::cout << "Error in callback "
                 "UniffiCallbackInterfaceSendQueueRoomErrorListenerMethod0: "
              << error.what() << std::endl;
    throw error;
  }
}

static void callback(uint64_t rs_uniffiHandle, RustBuffer rs_roomId,
                     RustBuffer rs_error, void *rs_uniffiOutReturn,
                     RustCallStatus *uniffi_call_status) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_uniffiHandle, rs_roomId, rs_error, rs_uniffiOutReturn,
           uniffi_call_status);
}

static UniffiCallbackInterfaceSendQueueRoomErrorListenerMethod0
makeCallbackFunction( // uniffi::matrix_sdk_ffi::cb::callbackinterfacesendqueueroomerrorlistenermethod0
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker,
              callbackValue](uint64_t rs_uniffiHandle, RustBuffer rs_roomId,
                             RustBuffer rs_error, void *rs_uniffiOutReturn,
                             RustCallStatus *uniffi_call_status) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_uniffiHandle, rs_roomId, rs_error,
         rs_uniffiOutReturn, uniffi_call_status](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_uniffiHandle, rs_roomId,
               rs_error, rs_uniffiOutReturn, uniffi_call_status);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.
    callInvoker->invokeBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeMatrixSdkFfi, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace
  // uniffi::matrix_sdk_ffi::cb::callbackinterfacesendqueueroomerrorlistenermethod0
  // Implementation of callback function calling from Rust to JS
  // CallbackInterfaceSessionVerificationControllerDelegateMethod0

// Callback function:
// uniffi::matrix_sdk_ffi::cb::callbackinterfacesessionverificationcontrollerdelegatemethod0::UniffiCallbackInterfaceSessionVerificationControllerDelegateMethod0
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::matrix_sdk_ffi::cb::
    callbackinterfacesessionverificationcontrollerdelegatemethod0 {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t, RustBuffer, void *, RustCallStatus *)>
    rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_uniffiHandle, RustBuffer rs_details,
                 void *rs_uniffiOutReturn, RustCallStatus *uniffi_call_status) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_uniffiHandle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_uniffiHandle);
  auto js_details = uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(
      rt, callInvoker, rs_details);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_uniffiHandle, js_details);

    // Now copy the result back from JS into the RustCallStatus object.
    uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyFromJs(
        rt, callInvoker, uniffiResult, uniffi_call_status);

    if (uniffi_call_status->code != UNIFFI_CALL_STATUS_OK) {
      // The JS callback finished abnormally, so we cannot retrieve the return
      // value.
      return;
    }

  } catch (const jsi::JSError &error) {
    std::cout << "Error in callback "
                 "UniffiCallbackInterfaceSessionVerificationControllerDelegateM"
                 "ethod0: "
              << error.what() << std::endl;
    throw error;
  }
}

static void callback(uint64_t rs_uniffiHandle, RustBuffer rs_details,
                     void *rs_uniffiOutReturn,
                     RustCallStatus *uniffi_call_status) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_uniffiHandle, rs_details, rs_uniffiOutReturn, uniffi_call_status);
}

static UniffiCallbackInterfaceSessionVerificationControllerDelegateMethod0
makeCallbackFunction( // uniffi::matrix_sdk_ffi::cb::callbackinterfacesessionverificationcontrollerdelegatemethod0
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](
                 uint64_t rs_uniffiHandle, RustBuffer rs_details,
                 void *rs_uniffiOutReturn, RustCallStatus *uniffi_call_status) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_uniffiHandle, rs_details,
         rs_uniffiOutReturn, uniffi_call_status](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_uniffiHandle, rs_details,
               rs_uniffiOutReturn, uniffi_call_status);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.
    callInvoker->invokeBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeMatrixSdkFfi, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace
  // uniffi::matrix_sdk_ffi::cb::callbackinterfacesessionverificationcontrollerdelegatemethod0
  // Implementation of callback function calling from Rust to JS
  // CallbackInterfaceSessionVerificationControllerDelegateMethod1

// Callback function:
// uniffi::matrix_sdk_ffi::cb::callbackinterfacesessionverificationcontrollerdelegatemethod1::UniffiCallbackInterfaceSessionVerificationControllerDelegateMethod1
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::matrix_sdk_ffi::cb::
    callbackinterfacesessionverificationcontrollerdelegatemethod1 {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t, void *, RustCallStatus *)> rsLambda =
    nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_uniffiHandle, void *rs_uniffiOutReturn,
                 RustCallStatus *uniffi_call_status) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_uniffiHandle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_uniffiHandle);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_uniffiHandle);

    // Now copy the result back from JS into the RustCallStatus object.
    uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyFromJs(
        rt, callInvoker, uniffiResult, uniffi_call_status);

    if (uniffi_call_status->code != UNIFFI_CALL_STATUS_OK) {
      // The JS callback finished abnormally, so we cannot retrieve the return
      // value.
      return;
    }

  } catch (const jsi::JSError &error) {
    std::cout << "Error in callback "
                 "UniffiCallbackInterfaceSessionVerificationControllerDelegateM"
                 "ethod1: "
              << error.what() << std::endl;
    throw error;
  }
}

static void callback(uint64_t rs_uniffiHandle, void *rs_uniffiOutReturn,
                     RustCallStatus *uniffi_call_status) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_uniffiHandle, rs_uniffiOutReturn, uniffi_call_status);
}

static UniffiCallbackInterfaceSessionVerificationControllerDelegateMethod1
makeCallbackFunction( // uniffi::matrix_sdk_ffi::cb::callbackinterfacesessionverificationcontrollerdelegatemethod1
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker,
              callbackValue](uint64_t rs_uniffiHandle, void *rs_uniffiOutReturn,
                             RustCallStatus *uniffi_call_status) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_uniffiHandle, rs_uniffiOutReturn,
         uniffi_call_status](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_uniffiHandle,
               rs_uniffiOutReturn, uniffi_call_status);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.
    callInvoker->invokeBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeMatrixSdkFfi, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace
  // uniffi::matrix_sdk_ffi::cb::callbackinterfacesessionverificationcontrollerdelegatemethod1
  // Implementation of callback function calling from Rust to JS
  // CallbackInterfaceSessionVerificationControllerDelegateMethod2

// Callback function:
// uniffi::matrix_sdk_ffi::cb::callbackinterfacesessionverificationcontrollerdelegatemethod2::UniffiCallbackInterfaceSessionVerificationControllerDelegateMethod2
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::matrix_sdk_ffi::cb::
    callbackinterfacesessionverificationcontrollerdelegatemethod2 {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t, void *, RustCallStatus *)> rsLambda =
    nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_uniffiHandle, void *rs_uniffiOutReturn,
                 RustCallStatus *uniffi_call_status) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_uniffiHandle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_uniffiHandle);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_uniffiHandle);

    // Now copy the result back from JS into the RustCallStatus object.
    uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyFromJs(
        rt, callInvoker, uniffiResult, uniffi_call_status);

    if (uniffi_call_status->code != UNIFFI_CALL_STATUS_OK) {
      // The JS callback finished abnormally, so we cannot retrieve the return
      // value.
      return;
    }

  } catch (const jsi::JSError &error) {
    std::cout << "Error in callback "
                 "UniffiCallbackInterfaceSessionVerificationControllerDelegateM"
                 "ethod2: "
              << error.what() << std::endl;
    throw error;
  }
}

static void callback(uint64_t rs_uniffiHandle, void *rs_uniffiOutReturn,
                     RustCallStatus *uniffi_call_status) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_uniffiHandle, rs_uniffiOutReturn, uniffi_call_status);
}

static UniffiCallbackInterfaceSessionVerificationControllerDelegateMethod2
makeCallbackFunction( // uniffi::matrix_sdk_ffi::cb::callbackinterfacesessionverificationcontrollerdelegatemethod2
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker,
              callbackValue](uint64_t rs_uniffiHandle, void *rs_uniffiOutReturn,
                             RustCallStatus *uniffi_call_status) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_uniffiHandle, rs_uniffiOutReturn,
         uniffi_call_status](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_uniffiHandle,
               rs_uniffiOutReturn, uniffi_call_status);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.
    callInvoker->invokeBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeMatrixSdkFfi, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace
  // uniffi::matrix_sdk_ffi::cb::callbackinterfacesessionverificationcontrollerdelegatemethod2
  // Implementation of callback function calling from Rust to JS
  // CallbackInterfaceSessionVerificationControllerDelegateMethod3

// Callback function:
// uniffi::matrix_sdk_ffi::cb::callbackinterfacesessionverificationcontrollerdelegatemethod3::UniffiCallbackInterfaceSessionVerificationControllerDelegateMethod3
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::matrix_sdk_ffi::cb::
    callbackinterfacesessionverificationcontrollerdelegatemethod3 {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t, RustBuffer, void *, RustCallStatus *)>
    rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_uniffiHandle, RustBuffer rs_data,
                 void *rs_uniffiOutReturn, RustCallStatus *uniffi_call_status) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_uniffiHandle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_uniffiHandle);
  auto js_data = uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(
      rt, callInvoker, rs_data);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_uniffiHandle, js_data);

    // Now copy the result back from JS into the RustCallStatus object.
    uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyFromJs(
        rt, callInvoker, uniffiResult, uniffi_call_status);

    if (uniffi_call_status->code != UNIFFI_CALL_STATUS_OK) {
      // The JS callback finished abnormally, so we cannot retrieve the return
      // value.
      return;
    }

  } catch (const jsi::JSError &error) {
    std::cout << "Error in callback "
                 "UniffiCallbackInterfaceSessionVerificationControllerDelegateM"
                 "ethod3: "
              << error.what() << std::endl;
    throw error;
  }
}

static void callback(uint64_t rs_uniffiHandle, RustBuffer rs_data,
                     void *rs_uniffiOutReturn,
                     RustCallStatus *uniffi_call_status) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_uniffiHandle, rs_data, rs_uniffiOutReturn, uniffi_call_status);
}

static UniffiCallbackInterfaceSessionVerificationControllerDelegateMethod3
makeCallbackFunction( // uniffi::matrix_sdk_ffi::cb::callbackinterfacesessionverificationcontrollerdelegatemethod3
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](
                 uint64_t rs_uniffiHandle, RustBuffer rs_data,
                 void *rs_uniffiOutReturn, RustCallStatus *uniffi_call_status) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_uniffiHandle, rs_data,
         rs_uniffiOutReturn, uniffi_call_status](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_uniffiHandle, rs_data,
               rs_uniffiOutReturn, uniffi_call_status);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.
    callInvoker->invokeBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeMatrixSdkFfi, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace
  // uniffi::matrix_sdk_ffi::cb::callbackinterfacesessionverificationcontrollerdelegatemethod3
  // Implementation of callback function calling from Rust to JS
  // CallbackInterfaceSessionVerificationControllerDelegateMethod4

// Callback function:
// uniffi::matrix_sdk_ffi::cb::callbackinterfacesessionverificationcontrollerdelegatemethod4::UniffiCallbackInterfaceSessionVerificationControllerDelegateMethod4
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::matrix_sdk_ffi::cb::
    callbackinterfacesessionverificationcontrollerdelegatemethod4 {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t, void *, RustCallStatus *)> rsLambda =
    nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_uniffiHandle, void *rs_uniffiOutReturn,
                 RustCallStatus *uniffi_call_status) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_uniffiHandle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_uniffiHandle);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_uniffiHandle);

    // Now copy the result back from JS into the RustCallStatus object.
    uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyFromJs(
        rt, callInvoker, uniffiResult, uniffi_call_status);

    if (uniffi_call_status->code != UNIFFI_CALL_STATUS_OK) {
      // The JS callback finished abnormally, so we cannot retrieve the return
      // value.
      return;
    }

  } catch (const jsi::JSError &error) {
    std::cout << "Error in callback "
                 "UniffiCallbackInterfaceSessionVerificationControllerDelegateM"
                 "ethod4: "
              << error.what() << std::endl;
    throw error;
  }
}

static void callback(uint64_t rs_uniffiHandle, void *rs_uniffiOutReturn,
                     RustCallStatus *uniffi_call_status) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_uniffiHandle, rs_uniffiOutReturn, uniffi_call_status);
}

static UniffiCallbackInterfaceSessionVerificationControllerDelegateMethod4
makeCallbackFunction( // uniffi::matrix_sdk_ffi::cb::callbackinterfacesessionverificationcontrollerdelegatemethod4
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker,
              callbackValue](uint64_t rs_uniffiHandle, void *rs_uniffiOutReturn,
                             RustCallStatus *uniffi_call_status) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_uniffiHandle, rs_uniffiOutReturn,
         uniffi_call_status](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_uniffiHandle,
               rs_uniffiOutReturn, uniffi_call_status);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.
    callInvoker->invokeBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeMatrixSdkFfi, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace
  // uniffi::matrix_sdk_ffi::cb::callbackinterfacesessionverificationcontrollerdelegatemethod4
  // Implementation of callback function calling from Rust to JS
  // CallbackInterfaceSessionVerificationControllerDelegateMethod5

// Callback function:
// uniffi::matrix_sdk_ffi::cb::callbackinterfacesessionverificationcontrollerdelegatemethod5::UniffiCallbackInterfaceSessionVerificationControllerDelegateMethod5
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::matrix_sdk_ffi::cb::
    callbackinterfacesessionverificationcontrollerdelegatemethod5 {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t, void *, RustCallStatus *)> rsLambda =
    nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_uniffiHandle, void *rs_uniffiOutReturn,
                 RustCallStatus *uniffi_call_status) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_uniffiHandle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_uniffiHandle);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_uniffiHandle);

    // Now copy the result back from JS into the RustCallStatus object.
    uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyFromJs(
        rt, callInvoker, uniffiResult, uniffi_call_status);

    if (uniffi_call_status->code != UNIFFI_CALL_STATUS_OK) {
      // The JS callback finished abnormally, so we cannot retrieve the return
      // value.
      return;
    }

  } catch (const jsi::JSError &error) {
    std::cout << "Error in callback "
                 "UniffiCallbackInterfaceSessionVerificationControllerDelegateM"
                 "ethod5: "
              << error.what() << std::endl;
    throw error;
  }
}

static void callback(uint64_t rs_uniffiHandle, void *rs_uniffiOutReturn,
                     RustCallStatus *uniffi_call_status) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_uniffiHandle, rs_uniffiOutReturn, uniffi_call_status);
}

static UniffiCallbackInterfaceSessionVerificationControllerDelegateMethod5
makeCallbackFunction( // uniffi::matrix_sdk_ffi::cb::callbackinterfacesessionverificationcontrollerdelegatemethod5
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker,
              callbackValue](uint64_t rs_uniffiHandle, void *rs_uniffiOutReturn,
                             RustCallStatus *uniffi_call_status) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_uniffiHandle, rs_uniffiOutReturn,
         uniffi_call_status](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_uniffiHandle,
               rs_uniffiOutReturn, uniffi_call_status);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.
    callInvoker->invokeBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeMatrixSdkFfi, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace
  // uniffi::matrix_sdk_ffi::cb::callbackinterfacesessionverificationcontrollerdelegatemethod5
  // Implementation of callback function calling from Rust to JS
  // CallbackInterfaceSessionVerificationControllerDelegateMethod6

// Callback function:
// uniffi::matrix_sdk_ffi::cb::callbackinterfacesessionverificationcontrollerdelegatemethod6::UniffiCallbackInterfaceSessionVerificationControllerDelegateMethod6
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::matrix_sdk_ffi::cb::
    callbackinterfacesessionverificationcontrollerdelegatemethod6 {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t, void *, RustCallStatus *)> rsLambda =
    nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_uniffiHandle, void *rs_uniffiOutReturn,
                 RustCallStatus *uniffi_call_status) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_uniffiHandle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_uniffiHandle);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_uniffiHandle);

    // Now copy the result back from JS into the RustCallStatus object.
    uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyFromJs(
        rt, callInvoker, uniffiResult, uniffi_call_status);

    if (uniffi_call_status->code != UNIFFI_CALL_STATUS_OK) {
      // The JS callback finished abnormally, so we cannot retrieve the return
      // value.
      return;
    }

  } catch (const jsi::JSError &error) {
    std::cout << "Error in callback "
                 "UniffiCallbackInterfaceSessionVerificationControllerDelegateM"
                 "ethod6: "
              << error.what() << std::endl;
    throw error;
  }
}

static void callback(uint64_t rs_uniffiHandle, void *rs_uniffiOutReturn,
                     RustCallStatus *uniffi_call_status) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_uniffiHandle, rs_uniffiOutReturn, uniffi_call_status);
}

static UniffiCallbackInterfaceSessionVerificationControllerDelegateMethod6
makeCallbackFunction( // uniffi::matrix_sdk_ffi::cb::callbackinterfacesessionverificationcontrollerdelegatemethod6
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker,
              callbackValue](uint64_t rs_uniffiHandle, void *rs_uniffiOutReturn,
                             RustCallStatus *uniffi_call_status) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_uniffiHandle, rs_uniffiOutReturn,
         uniffi_call_status](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_uniffiHandle,
               rs_uniffiOutReturn, uniffi_call_status);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.
    callInvoker->invokeBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeMatrixSdkFfi, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace
  // uniffi::matrix_sdk_ffi::cb::callbackinterfacesessionverificationcontrollerdelegatemethod6
  // Implementation of callback function calling from Rust to JS
  // CallbackInterfaceSyncServiceStateObserverMethod0

// Callback function:
// uniffi::matrix_sdk_ffi::cb::callbackinterfacesyncservicestateobservermethod0::UniffiCallbackInterfaceSyncServiceStateObserverMethod0
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::matrix_sdk_ffi::cb::
    callbackinterfacesyncservicestateobservermethod0 {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t, RustBuffer, void *, RustCallStatus *)>
    rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_uniffiHandle, RustBuffer rs_state,
                 void *rs_uniffiOutReturn, RustCallStatus *uniffi_call_status) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_uniffiHandle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_uniffiHandle);
  auto js_state = uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(
      rt, callInvoker, rs_state);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_uniffiHandle, js_state);

    // Now copy the result back from JS into the RustCallStatus object.
    uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyFromJs(
        rt, callInvoker, uniffiResult, uniffi_call_status);

    if (uniffi_call_status->code != UNIFFI_CALL_STATUS_OK) {
      // The JS callback finished abnormally, so we cannot retrieve the return
      // value.
      return;
    }

  } catch (const jsi::JSError &error) {
    std::cout << "Error in callback "
                 "UniffiCallbackInterfaceSyncServiceStateObserverMethod0: "
              << error.what() << std::endl;
    throw error;
  }
}

static void callback(uint64_t rs_uniffiHandle, RustBuffer rs_state,
                     void *rs_uniffiOutReturn,
                     RustCallStatus *uniffi_call_status) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_uniffiHandle, rs_state, rs_uniffiOutReturn, uniffi_call_status);
}

static UniffiCallbackInterfaceSyncServiceStateObserverMethod0
makeCallbackFunction( // uniffi::matrix_sdk_ffi::cb::callbackinterfacesyncservicestateobservermethod0
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](
                 uint64_t rs_uniffiHandle, RustBuffer rs_state,
                 void *rs_uniffiOutReturn, RustCallStatus *uniffi_call_status) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_uniffiHandle, rs_state,
         rs_uniffiOutReturn, uniffi_call_status](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_uniffiHandle, rs_state,
               rs_uniffiOutReturn, uniffi_call_status);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.
    callInvoker->invokeBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeMatrixSdkFfi, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace
  // uniffi::matrix_sdk_ffi::cb::callbackinterfacesyncservicestateobservermethod0
  // Implementation of callback function calling from Rust to JS
  // CallbackInterfaceTimelineListenerMethod0

// Callback function:
// uniffi::matrix_sdk_ffi::cb::callbackinterfacetimelinelistenermethod0::UniffiCallbackInterfaceTimelineListenerMethod0
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::matrix_sdk_ffi::cb::callbackinterfacetimelinelistenermethod0 {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t, RustBuffer, void *, RustCallStatus *)>
    rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_uniffiHandle, RustBuffer rs_diff,
                 void *rs_uniffiOutReturn, RustCallStatus *uniffi_call_status) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_uniffiHandle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_uniffiHandle);
  auto js_diff = uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(
      rt, callInvoker, rs_diff);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_uniffiHandle, js_diff);

    // Now copy the result back from JS into the RustCallStatus object.
    uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyFromJs(
        rt, callInvoker, uniffiResult, uniffi_call_status);

    if (uniffi_call_status->code != UNIFFI_CALL_STATUS_OK) {
      // The JS callback finished abnormally, so we cannot retrieve the return
      // value.
      return;
    }

  } catch (const jsi::JSError &error) {
    std::cout
        << "Error in callback UniffiCallbackInterfaceTimelineListenerMethod0: "
        << error.what() << std::endl;
    throw error;
  }
}

static void callback(uint64_t rs_uniffiHandle, RustBuffer rs_diff,
                     void *rs_uniffiOutReturn,
                     RustCallStatus *uniffi_call_status) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_uniffiHandle, rs_diff, rs_uniffiOutReturn, uniffi_call_status);
}

static UniffiCallbackInterfaceTimelineListenerMethod0
makeCallbackFunction( // uniffi::matrix_sdk_ffi::cb::callbackinterfacetimelinelistenermethod0
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](
                 uint64_t rs_uniffiHandle, RustBuffer rs_diff,
                 void *rs_uniffiOutReturn, RustCallStatus *uniffi_call_status) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_uniffiHandle, rs_diff,
         rs_uniffiOutReturn, uniffi_call_status](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_uniffiHandle, rs_diff,
               rs_uniffiOutReturn, uniffi_call_status);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.
    callInvoker->invokeBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeMatrixSdkFfi, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace
  // uniffi::matrix_sdk_ffi::cb::callbackinterfacetimelinelistenermethod0
  // Implementation of callback function calling from Rust to JS
  // CallbackInterfaceTypingNotificationsListenerMethod0

// Callback function:
// uniffi::matrix_sdk_ffi::cb::callbackinterfacetypingnotificationslistenermethod0::UniffiCallbackInterfaceTypingNotificationsListenerMethod0
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::matrix_sdk_ffi::cb::
    callbackinterfacetypingnotificationslistenermethod0 {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t, RustBuffer, void *, RustCallStatus *)>
    rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_uniffiHandle, RustBuffer rs_typingUserIds,
                 void *rs_uniffiOutReturn, RustCallStatus *uniffi_call_status) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_uniffiHandle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_uniffiHandle);
  auto js_typingUserIds = uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(
      rt, callInvoker, rs_typingUserIds);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_uniffiHandle, js_typingUserIds);

    // Now copy the result back from JS into the RustCallStatus object.
    uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyFromJs(
        rt, callInvoker, uniffiResult, uniffi_call_status);

    if (uniffi_call_status->code != UNIFFI_CALL_STATUS_OK) {
      // The JS callback finished abnormally, so we cannot retrieve the return
      // value.
      return;
    }

  } catch (const jsi::JSError &error) {
    std::cout << "Error in callback "
                 "UniffiCallbackInterfaceTypingNotificationsListenerMethod0: "
              << error.what() << std::endl;
    throw error;
  }
}

static void callback(uint64_t rs_uniffiHandle, RustBuffer rs_typingUserIds,
                     void *rs_uniffiOutReturn,
                     RustCallStatus *uniffi_call_status) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_uniffiHandle, rs_typingUserIds, rs_uniffiOutReturn,
           uniffi_call_status);
}

static UniffiCallbackInterfaceTypingNotificationsListenerMethod0
makeCallbackFunction( // uniffi::matrix_sdk_ffi::cb::callbackinterfacetypingnotificationslistenermethod0
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](
                 uint64_t rs_uniffiHandle, RustBuffer rs_typingUserIds,
                 void *rs_uniffiOutReturn, RustCallStatus *uniffi_call_status) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_uniffiHandle, rs_typingUserIds,
         rs_uniffiOutReturn, uniffi_call_status](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_uniffiHandle,
               rs_typingUserIds, rs_uniffiOutReturn, uniffi_call_status);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.
    callInvoker->invokeBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeMatrixSdkFfi, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace
  // uniffi::matrix_sdk_ffi::cb::callbackinterfacetypingnotificationslistenermethod0
  // Implementation of callback function calling from Rust to JS
  // CallbackInterfaceUnableToDecryptDelegateMethod0

// Callback function:
// uniffi::matrix_sdk_ffi::cb::callbackinterfaceunabletodecryptdelegatemethod0::UniffiCallbackInterfaceUnableToDecryptDelegateMethod0
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::matrix_sdk_ffi::cb::
    callbackinterfaceunabletodecryptdelegatemethod0 {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t, RustBuffer, void *, RustCallStatus *)>
    rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_uniffiHandle, RustBuffer rs_info,
                 void *rs_uniffiOutReturn, RustCallStatus *uniffi_call_status) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_uniffiHandle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_uniffiHandle);
  auto js_info = uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(
      rt, callInvoker, rs_info);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_uniffiHandle, js_info);

    // Now copy the result back from JS into the RustCallStatus object.
    uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyFromJs(
        rt, callInvoker, uniffiResult, uniffi_call_status);

    if (uniffi_call_status->code != UNIFFI_CALL_STATUS_OK) {
      // The JS callback finished abnormally, so we cannot retrieve the return
      // value.
      return;
    }

  } catch (const jsi::JSError &error) {
    std::cout << "Error in callback "
                 "UniffiCallbackInterfaceUnableToDecryptDelegateMethod0: "
              << error.what() << std::endl;
    throw error;
  }
}

static void callback(uint64_t rs_uniffiHandle, RustBuffer rs_info,
                     void *rs_uniffiOutReturn,
                     RustCallStatus *uniffi_call_status) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_uniffiHandle, rs_info, rs_uniffiOutReturn, uniffi_call_status);
}

static UniffiCallbackInterfaceUnableToDecryptDelegateMethod0
makeCallbackFunction( // uniffi::matrix_sdk_ffi::cb::callbackinterfaceunabletodecryptdelegatemethod0
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](
                 uint64_t rs_uniffiHandle, RustBuffer rs_info,
                 void *rs_uniffiOutReturn, RustCallStatus *uniffi_call_status) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_uniffiHandle, rs_info,
         rs_uniffiOutReturn, uniffi_call_status](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_uniffiHandle, rs_info,
               rs_uniffiOutReturn, uniffi_call_status);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.
    callInvoker->invokeBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeMatrixSdkFfi, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace
  // uniffi::matrix_sdk_ffi::cb::callbackinterfaceunabletodecryptdelegatemethod0
  // Implementation of callback function calling from Rust to JS
  // CallbackInterfaceVerificationStateListenerMethod0

// Callback function:
// uniffi::matrix_sdk_ffi::cb::callbackinterfaceverificationstatelistenermethod0::UniffiCallbackInterfaceVerificationStateListenerMethod0
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::matrix_sdk_ffi::cb::
    callbackinterfaceverificationstatelistenermethod0 {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t, RustBuffer, void *, RustCallStatus *)>
    rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_uniffiHandle, RustBuffer rs_status,
                 void *rs_uniffiOutReturn, RustCallStatus *uniffi_call_status) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_uniffiHandle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_uniffiHandle);
  auto js_status = uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(
      rt, callInvoker, rs_status);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_uniffiHandle, js_status);

    // Now copy the result back from JS into the RustCallStatus object.
    uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyFromJs(
        rt, callInvoker, uniffiResult, uniffi_call_status);

    if (uniffi_call_status->code != UNIFFI_CALL_STATUS_OK) {
      // The JS callback finished abnormally, so we cannot retrieve the return
      // value.
      return;
    }

  } catch (const jsi::JSError &error) {
    std::cout << "Error in callback "
                 "UniffiCallbackInterfaceVerificationStateListenerMethod0: "
              << error.what() << std::endl;
    throw error;
  }
}

static void callback(uint64_t rs_uniffiHandle, RustBuffer rs_status,
                     void *rs_uniffiOutReturn,
                     RustCallStatus *uniffi_call_status) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_uniffiHandle, rs_status, rs_uniffiOutReturn, uniffi_call_status);
}

static UniffiCallbackInterfaceVerificationStateListenerMethod0
makeCallbackFunction( // uniffi::matrix_sdk_ffi::cb::callbackinterfaceverificationstatelistenermethod0
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](
                 uint64_t rs_uniffiHandle, RustBuffer rs_status,
                 void *rs_uniffiOutReturn, RustCallStatus *uniffi_call_status) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_uniffiHandle, rs_status,
         rs_uniffiOutReturn, uniffi_call_status](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_uniffiHandle, rs_status,
               rs_uniffiOutReturn, uniffi_call_status);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.
    callInvoker->invokeBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeMatrixSdkFfi, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace
  // uniffi::matrix_sdk_ffi::cb::callbackinterfaceverificationstatelistenermethod0
  // Implementation of callback function calling from Rust to JS
  // CallbackInterfaceWidgetCapabilitiesProviderMethod0

// Callback function:
// uniffi::matrix_sdk_ffi::cb::callbackinterfacewidgetcapabilitiesprovidermethod0::UniffiCallbackInterfaceWidgetCapabilitiesProviderMethod0
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::matrix_sdk_ffi::cb::
    callbackinterfacewidgetcapabilitiesprovidermethod0 {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t, RustBuffer, RustBuffer *, RustCallStatus *)>
    rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_uniffiHandle, RustBuffer rs_capabilities,
                 RustBuffer *rs_uniffiOutReturn,
                 RustCallStatus *uniffi_call_status) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_uniffiHandle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_uniffiHandle);
  auto js_capabilities = uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(
      rt, callInvoker, rs_capabilities);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_uniffiHandle, js_capabilities);

    // Now copy the result back from JS into the RustCallStatus object.
    uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyFromJs(
        rt, callInvoker, uniffiResult, uniffi_call_status);

    if (uniffi_call_status->code != UNIFFI_CALL_STATUS_OK) {
      // The JS callback finished abnormally, so we cannot retrieve the return
      // value.
      return;
    }

    // Finally, we need to copy the return value back into the Rust pointer.
    *rs_uniffiOutReturn =
        uniffi::matrix_sdk_ffi::Bridging<ReferenceHolder<RustBuffer>>::fromJs(
            rt, callInvoker, uniffiResult);
  } catch (const jsi::JSError &error) {
    std::cout << "Error in callback "
                 "UniffiCallbackInterfaceWidgetCapabilitiesProviderMethod0: "
              << error.what() << std::endl;
    throw error;
  }
}

static void callback(uint64_t rs_uniffiHandle, RustBuffer rs_capabilities,
                     RustBuffer *rs_uniffiOutReturn,
                     RustCallStatus *uniffi_call_status) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_uniffiHandle, rs_capabilities, rs_uniffiOutReturn,
           uniffi_call_status);
}

static UniffiCallbackInterfaceWidgetCapabilitiesProviderMethod0
makeCallbackFunction( // uniffi::matrix_sdk_ffi::cb::callbackinterfacewidgetcapabilitiesprovidermethod0
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](
                 uint64_t rs_uniffiHandle, RustBuffer rs_capabilities,
                 RustBuffer *rs_uniffiOutReturn,
                 RustCallStatus *uniffi_call_status) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_uniffiHandle, rs_capabilities,
         rs_uniffiOutReturn, uniffi_call_status](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_uniffiHandle, rs_capabilities,
               rs_uniffiOutReturn, uniffi_call_status);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.
    callInvoker->invokeBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeMatrixSdkFfi, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace
  // uniffi::matrix_sdk_ffi::cb::callbackinterfacewidgetcapabilitiesprovidermethod0
namespace uniffi::matrix_sdk_ffi {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiVTableCallbackInterfaceBackupStateListener> {
  static UniffiVTableCallbackInterfaceBackupStateListener
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(rt,
                         "Expected an object for "
                         "UniffiVTableCallbackInterfaceBackupStateListener");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiVTableCallbackInterfaceBackupStateListener rsObject;

    // Create the vtable from the js callbacks.
    rsObject.on_update = uniffi::matrix_sdk_ffi::cb::
        callbackinterfacebackupstatelistenermethod0::makeCallbackFunction(
            rt, callInvoker, jsObject.getProperty(rt, "onUpdate"));
    rsObject.uniffi_free =
        uniffi::matrix_sdk_ffi::st::vtablecallbackinterfacebackupstatelistener::
            vtablecallbackinterfacebackupstatelistener::free::
                makeCallbackFunction(rt, callInvoker,
                                     jsObject.getProperty(rt, "uniffiFree"));

    return rsObject;
  }
};

} // namespace uniffi::matrix_sdk_ffi
namespace uniffi::matrix_sdk_ffi {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <>
struct Bridging<UniffiVTableCallbackInterfaceBackupSteadyStateListener> {
  static UniffiVTableCallbackInterfaceBackupSteadyStateListener
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(
          rt, "Expected an object for "
              "UniffiVTableCallbackInterfaceBackupSteadyStateListener");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiVTableCallbackInterfaceBackupSteadyStateListener rsObject;

    // Create the vtable from the js callbacks.
    rsObject.on_update = uniffi::matrix_sdk_ffi::cb::
        callbackinterfacebackupsteadystatelistenermethod0::makeCallbackFunction(
            rt, callInvoker, jsObject.getProperty(rt, "onUpdate"));
    rsObject.uniffi_free = uniffi::matrix_sdk_ffi::st::
        vtablecallbackinterfacebackupsteadystatelistener::
            vtablecallbackinterfacebackupsteadystatelistener::free::
                makeCallbackFunction(rt, callInvoker,
                                     jsObject.getProperty(rt, "uniffiFree"));

    return rsObject;
  }
};

} // namespace uniffi::matrix_sdk_ffi
namespace uniffi::matrix_sdk_ffi {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiVTableCallbackInterfaceClientDelegate> {
  static UniffiVTableCallbackInterfaceClientDelegate
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(
          rt,
          "Expected an object for UniffiVTableCallbackInterfaceClientDelegate");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiVTableCallbackInterfaceClientDelegate rsObject;

    // Create the vtable from the js callbacks.
    rsObject.did_receive_auth_error = uniffi::matrix_sdk_ffi::cb::
        callbackinterfaceclientdelegatemethod0::makeCallbackFunction(
            rt, callInvoker, jsObject.getProperty(rt, "didReceiveAuthError"));
    rsObject.did_refresh_tokens = uniffi::matrix_sdk_ffi::cb::
        callbackinterfaceclientdelegatemethod1::makeCallbackFunction(
            rt, callInvoker, jsObject.getProperty(rt, "didRefreshTokens"));
    rsObject.uniffi_free =
        uniffi::matrix_sdk_ffi::st::vtablecallbackinterfaceclientdelegate::
            vtablecallbackinterfaceclientdelegate::free::makeCallbackFunction(
                rt, callInvoker, jsObject.getProperty(rt, "uniffiFree"));

    return rsObject;
  }
};

} // namespace uniffi::matrix_sdk_ffi
namespace uniffi::matrix_sdk_ffi {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <>
struct Bridging<UniffiVTableCallbackInterfaceClientSessionDelegate> {
  static UniffiVTableCallbackInterfaceClientSessionDelegate
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(rt,
                         "Expected an object for "
                         "UniffiVTableCallbackInterfaceClientSessionDelegate");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiVTableCallbackInterfaceClientSessionDelegate rsObject;

    // Create the vtable from the js callbacks.
    rsObject.retrieve_session_from_keychain = uniffi::matrix_sdk_ffi::cb::
        callbackinterfaceclientsessiondelegatemethod0::makeCallbackFunction(
            rt, callInvoker,
            jsObject.getProperty(rt, "retrieveSessionFromKeychain"));
    rsObject.save_session_in_keychain = uniffi::matrix_sdk_ffi::cb::
        callbackinterfaceclientsessiondelegatemethod1::makeCallbackFunction(
            rt, callInvoker, jsObject.getProperty(rt, "saveSessionInKeychain"));
    rsObject.uniffi_free = uniffi::matrix_sdk_ffi::st::
        vtablecallbackinterfaceclientsessiondelegate::
            vtablecallbackinterfaceclientsessiondelegate::free::
                makeCallbackFunction(rt, callInvoker,
                                     jsObject.getProperty(rt, "uniffiFree"));

    return rsObject;
  }
};

} // namespace uniffi::matrix_sdk_ffi
namespace uniffi::matrix_sdk_ffi {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <>
struct Bridging<UniffiVTableCallbackInterfaceEnableRecoveryProgressListener> {
  static UniffiVTableCallbackInterfaceEnableRecoveryProgressListener
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(
          rt, "Expected an object for "
              "UniffiVTableCallbackInterfaceEnableRecoveryProgressListener");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiVTableCallbackInterfaceEnableRecoveryProgressListener rsObject;

    // Create the vtable from the js callbacks.
    rsObject.on_update = uniffi::matrix_sdk_ffi::cb::
        callbackinterfaceenablerecoveryprogresslistenermethod0::
            makeCallbackFunction(rt, callInvoker,
                                 jsObject.getProperty(rt, "onUpdate"));
    rsObject.uniffi_free = uniffi::matrix_sdk_ffi::st::
        vtablecallbackinterfaceenablerecoveryprogresslistener::
            vtablecallbackinterfaceenablerecoveryprogresslistener::free::
                makeCallbackFunction(rt, callInvoker,
                                     jsObject.getProperty(rt, "uniffiFree"));

    return rsObject;
  }
};

} // namespace uniffi::matrix_sdk_ffi
namespace uniffi::matrix_sdk_ffi {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <>
struct Bridging<UniffiVTableCallbackInterfaceIdentityStatusChangeListener> {
  static UniffiVTableCallbackInterfaceIdentityStatusChangeListener
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(
          rt, "Expected an object for "
              "UniffiVTableCallbackInterfaceIdentityStatusChangeListener");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiVTableCallbackInterfaceIdentityStatusChangeListener rsObject;

    // Create the vtable from the js callbacks.
    rsObject.call = uniffi::matrix_sdk_ffi::cb::
        callbackinterfaceidentitystatuschangelistenermethod0::
            makeCallbackFunction(rt, callInvoker,
                                 jsObject.getProperty(rt, "call"));
    rsObject.uniffi_free = uniffi::matrix_sdk_ffi::st::
        vtablecallbackinterfaceidentitystatuschangelistener::
            vtablecallbackinterfaceidentitystatuschangelistener::free::
                makeCallbackFunction(rt, callInvoker,
                                     jsObject.getProperty(rt, "uniffiFree"));

    return rsObject;
  }
};

} // namespace uniffi::matrix_sdk_ffi
namespace uniffi::matrix_sdk_ffi {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiVTableCallbackInterfaceIgnoredUsersListener> {
  static UniffiVTableCallbackInterfaceIgnoredUsersListener
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(rt,
                         "Expected an object for "
                         "UniffiVTableCallbackInterfaceIgnoredUsersListener");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiVTableCallbackInterfaceIgnoredUsersListener rsObject;

    // Create the vtable from the js callbacks.
    rsObject.call = uniffi::matrix_sdk_ffi::cb::
        callbackinterfaceignoreduserslistenermethod0::makeCallbackFunction(
            rt, callInvoker, jsObject.getProperty(rt, "call"));
    rsObject.uniffi_free = uniffi::matrix_sdk_ffi::st::
        vtablecallbackinterfaceignoreduserslistener::
            vtablecallbackinterfaceignoreduserslistener::free::
                makeCallbackFunction(rt, callInvoker,
                                     jsObject.getProperty(rt, "uniffiFree"));

    return rsObject;
  }
};

} // namespace uniffi::matrix_sdk_ffi
namespace uniffi::matrix_sdk_ffi {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <>
struct Bridging<UniffiVTableCallbackInterfaceKnockRequestsListener> {
  static UniffiVTableCallbackInterfaceKnockRequestsListener
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(rt,
                         "Expected an object for "
                         "UniffiVTableCallbackInterfaceKnockRequestsListener");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiVTableCallbackInterfaceKnockRequestsListener rsObject;

    // Create the vtable from the js callbacks.
    rsObject.call = uniffi::matrix_sdk_ffi::cb::
        callbackinterfaceknockrequestslistenermethod0::makeCallbackFunction(
            rt, callInvoker, jsObject.getProperty(rt, "call"));
    rsObject.uniffi_free = uniffi::matrix_sdk_ffi::st::
        vtablecallbackinterfaceknockrequestslistener::
            vtablecallbackinterfaceknockrequestslistener::free::
                makeCallbackFunction(rt, callInvoker,
                                     jsObject.getProperty(rt, "uniffiFree"));

    return rsObject;
  }
};

} // namespace uniffi::matrix_sdk_ffi
namespace uniffi::matrix_sdk_ffi {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <>
struct Bridging<UniffiVTableCallbackInterfaceNotificationSettingsDelegate> {
  static UniffiVTableCallbackInterfaceNotificationSettingsDelegate
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(
          rt, "Expected an object for "
              "UniffiVTableCallbackInterfaceNotificationSettingsDelegate");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiVTableCallbackInterfaceNotificationSettingsDelegate rsObject;

    // Create the vtable from the js callbacks.
    rsObject.settings_did_change = uniffi::matrix_sdk_ffi::cb::
        callbackinterfacenotificationsettingsdelegatemethod0::
            makeCallbackFunction(rt, callInvoker,
                                 jsObject.getProperty(rt, "settingsDidChange"));
    rsObject.uniffi_free = uniffi::matrix_sdk_ffi::st::
        vtablecallbackinterfacenotificationsettingsdelegate::
            vtablecallbackinterfacenotificationsettingsdelegate::free::
                makeCallbackFunction(rt, callInvoker,
                                     jsObject.getProperty(rt, "uniffiFree"));

    return rsObject;
  }
};

} // namespace uniffi::matrix_sdk_ffi
namespace uniffi::matrix_sdk_ffi {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <>
struct Bridging<UniffiVTableCallbackInterfacePaginationStatusListener> {
  static UniffiVTableCallbackInterfacePaginationStatusListener
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(
          rt, "Expected an object for "
              "UniffiVTableCallbackInterfacePaginationStatusListener");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiVTableCallbackInterfacePaginationStatusListener rsObject;

    // Create the vtable from the js callbacks.
    rsObject.on_update = uniffi::matrix_sdk_ffi::cb::
        callbackinterfacepaginationstatuslistenermethod0::makeCallbackFunction(
            rt, callInvoker, jsObject.getProperty(rt, "onUpdate"));
    rsObject.uniffi_free = uniffi::matrix_sdk_ffi::st::
        vtablecallbackinterfacepaginationstatuslistener::
            vtablecallbackinterfacepaginationstatuslistener::free::
                makeCallbackFunction(rt, callInvoker,
                                     jsObject.getProperty(rt, "uniffiFree"));

    return rsObject;
  }
};

} // namespace uniffi::matrix_sdk_ffi
namespace uniffi::matrix_sdk_ffi {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiVTableCallbackInterfaceProgressWatcher> {
  static UniffiVTableCallbackInterfaceProgressWatcher
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(rt, "Expected an object for "
                             "UniffiVTableCallbackInterfaceProgressWatcher");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiVTableCallbackInterfaceProgressWatcher rsObject;

    // Create the vtable from the js callbacks.
    rsObject.transmission_progress = uniffi::matrix_sdk_ffi::cb::
        callbackinterfaceprogresswatchermethod0::makeCallbackFunction(
            rt, callInvoker, jsObject.getProperty(rt, "transmissionProgress"));
    rsObject.uniffi_free =
        uniffi::matrix_sdk_ffi::st::vtablecallbackinterfaceprogresswatcher::
            vtablecallbackinterfaceprogresswatcher::free::makeCallbackFunction(
                rt, callInvoker, jsObject.getProperty(rt, "uniffiFree"));

    return rsObject;
  }
};

} // namespace uniffi::matrix_sdk_ffi
namespace uniffi::matrix_sdk_ffi {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <>
struct Bridging<UniffiVTableCallbackInterfaceQrLoginProgressListener> {
  static UniffiVTableCallbackInterfaceQrLoginProgressListener
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(
          rt, "Expected an object for "
              "UniffiVTableCallbackInterfaceQrLoginProgressListener");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiVTableCallbackInterfaceQrLoginProgressListener rsObject;

    // Create the vtable from the js callbacks.
    rsObject.on_update = uniffi::matrix_sdk_ffi::cb::
        callbackinterfaceqrloginprogresslistenermethod0::makeCallbackFunction(
            rt, callInvoker, jsObject.getProperty(rt, "onUpdate"));
    rsObject.uniffi_free = uniffi::matrix_sdk_ffi::st::
        vtablecallbackinterfaceqrloginprogresslistener::
            vtablecallbackinterfaceqrloginprogresslistener::free::
                makeCallbackFunction(rt, callInvoker,
                                     jsObject.getProperty(rt, "uniffiFree"));

    return rsObject;
  }
};

} // namespace uniffi::matrix_sdk_ffi
namespace uniffi::matrix_sdk_ffi {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <>
struct Bridging<UniffiVTableCallbackInterfaceRecoveryStateListener> {
  static UniffiVTableCallbackInterfaceRecoveryStateListener
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(rt,
                         "Expected an object for "
                         "UniffiVTableCallbackInterfaceRecoveryStateListener");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiVTableCallbackInterfaceRecoveryStateListener rsObject;

    // Create the vtable from the js callbacks.
    rsObject.on_update = uniffi::matrix_sdk_ffi::cb::
        callbackinterfacerecoverystatelistenermethod0::makeCallbackFunction(
            rt, callInvoker, jsObject.getProperty(rt, "onUpdate"));
    rsObject.uniffi_free = uniffi::matrix_sdk_ffi::st::
        vtablecallbackinterfacerecoverystatelistener::
            vtablecallbackinterfacerecoverystatelistener::free::
                makeCallbackFunction(rt, callInvoker,
                                     jsObject.getProperty(rt, "uniffiFree"));

    return rsObject;
  }
};

} // namespace uniffi::matrix_sdk_ffi
namespace uniffi::matrix_sdk_ffi {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <>
struct Bridging<
    UniffiVTableCallbackInterfaceRoomDirectorySearchEntriesListener> {
  static UniffiVTableCallbackInterfaceRoomDirectorySearchEntriesListener
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(
          rt,
          "Expected an object for "
          "UniffiVTableCallbackInterfaceRoomDirectorySearchEntriesListener");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiVTableCallbackInterfaceRoomDirectorySearchEntriesListener rsObject;

    // Create the vtable from the js callbacks.
    rsObject.on_update = uniffi::matrix_sdk_ffi::cb::
        callbackinterfaceroomdirectorysearchentrieslistenermethod0::
            makeCallbackFunction(rt, callInvoker,
                                 jsObject.getProperty(rt, "onUpdate"));
    rsObject.uniffi_free = uniffi::matrix_sdk_ffi::st::
        vtablecallbackinterfaceroomdirectorysearchentrieslistener::
            vtablecallbackinterfaceroomdirectorysearchentrieslistener::free::
                makeCallbackFunction(rt, callInvoker,
                                     jsObject.getProperty(rt, "uniffiFree"));

    return rsObject;
  }
};

} // namespace uniffi::matrix_sdk_ffi
namespace uniffi::matrix_sdk_ffi {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiVTableCallbackInterfaceRoomInfoListener> {
  static UniffiVTableCallbackInterfaceRoomInfoListener
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(rt, "Expected an object for "
                             "UniffiVTableCallbackInterfaceRoomInfoListener");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiVTableCallbackInterfaceRoomInfoListener rsObject;

    // Create the vtable from the js callbacks.
    rsObject.call = uniffi::matrix_sdk_ffi::cb::
        callbackinterfaceroominfolistenermethod0::makeCallbackFunction(
            rt, callInvoker, jsObject.getProperty(rt, "call"));
    rsObject.uniffi_free =
        uniffi::matrix_sdk_ffi::st::vtablecallbackinterfaceroominfolistener::
            vtablecallbackinterfaceroominfolistener::free::makeCallbackFunction(
                rt, callInvoker, jsObject.getProperty(rt, "uniffiFree"));

    return rsObject;
  }
};

} // namespace uniffi::matrix_sdk_ffi
namespace uniffi::matrix_sdk_ffi {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <>
struct Bridging<UniffiVTableCallbackInterfaceRoomListEntriesListener> {
  static UniffiVTableCallbackInterfaceRoomListEntriesListener
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(
          rt, "Expected an object for "
              "UniffiVTableCallbackInterfaceRoomListEntriesListener");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiVTableCallbackInterfaceRoomListEntriesListener rsObject;

    // Create the vtable from the js callbacks.
    rsObject.on_update = uniffi::matrix_sdk_ffi::cb::
        callbackinterfaceroomlistentrieslistenermethod0::makeCallbackFunction(
            rt, callInvoker, jsObject.getProperty(rt, "onUpdate"));
    rsObject.uniffi_free = uniffi::matrix_sdk_ffi::st::
        vtablecallbackinterfaceroomlistentrieslistener::
            vtablecallbackinterfaceroomlistentrieslistener::free::
                makeCallbackFunction(rt, callInvoker,
                                     jsObject.getProperty(rt, "uniffiFree"));

    return rsObject;
  }
};

} // namespace uniffi::matrix_sdk_ffi
namespace uniffi::matrix_sdk_ffi {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <>
struct Bridging<UniffiVTableCallbackInterfaceRoomListLoadingStateListener> {
  static UniffiVTableCallbackInterfaceRoomListLoadingStateListener
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(
          rt, "Expected an object for "
              "UniffiVTableCallbackInterfaceRoomListLoadingStateListener");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiVTableCallbackInterfaceRoomListLoadingStateListener rsObject;

    // Create the vtable from the js callbacks.
    rsObject.on_update = uniffi::matrix_sdk_ffi::cb::
        callbackinterfaceroomlistloadingstatelistenermethod0::
            makeCallbackFunction(rt, callInvoker,
                                 jsObject.getProperty(rt, "onUpdate"));
    rsObject.uniffi_free = uniffi::matrix_sdk_ffi::st::
        vtablecallbackinterfaceroomlistloadingstatelistener::
            vtablecallbackinterfaceroomlistloadingstatelistener::free::
                makeCallbackFunction(rt, callInvoker,
                                     jsObject.getProperty(rt, "uniffiFree"));

    return rsObject;
  }
};

} // namespace uniffi::matrix_sdk_ffi
namespace uniffi::matrix_sdk_ffi {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <>
struct Bridging<UniffiVTableCallbackInterfaceRoomListServiceStateListener> {
  static UniffiVTableCallbackInterfaceRoomListServiceStateListener
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(
          rt, "Expected an object for "
              "UniffiVTableCallbackInterfaceRoomListServiceStateListener");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiVTableCallbackInterfaceRoomListServiceStateListener rsObject;

    // Create the vtable from the js callbacks.
    rsObject.on_update = uniffi::matrix_sdk_ffi::cb::
        callbackinterfaceroomlistservicestatelistenermethod0::
            makeCallbackFunction(rt, callInvoker,
                                 jsObject.getProperty(rt, "onUpdate"));
    rsObject.uniffi_free = uniffi::matrix_sdk_ffi::st::
        vtablecallbackinterfaceroomlistservicestatelistener::
            vtablecallbackinterfaceroomlistservicestatelistener::free::
                makeCallbackFunction(rt, callInvoker,
                                     jsObject.getProperty(rt, "uniffiFree"));

    return rsObject;
  }
};

} // namespace uniffi::matrix_sdk_ffi
namespace uniffi::matrix_sdk_ffi {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <>
struct Bridging<
    UniffiVTableCallbackInterfaceRoomListServiceSyncIndicatorListener> {
  static UniffiVTableCallbackInterfaceRoomListServiceSyncIndicatorListener
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(
          rt,
          "Expected an object for "
          "UniffiVTableCallbackInterfaceRoomListServiceSyncIndicatorListener");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiVTableCallbackInterfaceRoomListServiceSyncIndicatorListener rsObject;

    // Create the vtable from the js callbacks.
    rsObject.on_update = uniffi::matrix_sdk_ffi::cb::
        callbackinterfaceroomlistservicesyncindicatorlistenermethod0::
            makeCallbackFunction(rt, callInvoker,
                                 jsObject.getProperty(rt, "onUpdate"));
    rsObject.uniffi_free = uniffi::matrix_sdk_ffi::st::
        vtablecallbackinterfaceroomlistservicesyncindicatorlistener::
            vtablecallbackinterfaceroomlistservicesyncindicatorlistener::free::
                makeCallbackFunction(rt, callInvoker,
                                     jsObject.getProperty(rt, "uniffiFree"));

    return rsObject;
  }
};

} // namespace uniffi::matrix_sdk_ffi
namespace uniffi::matrix_sdk_ffi {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <>
struct Bridging<UniffiVTableCallbackInterfaceSendQueueRoomErrorListener> {
  static UniffiVTableCallbackInterfaceSendQueueRoomErrorListener
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(
          rt, "Expected an object for "
              "UniffiVTableCallbackInterfaceSendQueueRoomErrorListener");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiVTableCallbackInterfaceSendQueueRoomErrorListener rsObject;

    // Create the vtable from the js callbacks.
    rsObject.on_error = uniffi::matrix_sdk_ffi::cb::
        callbackinterfacesendqueueroomerrorlistenermethod0::
            makeCallbackFunction(rt, callInvoker,
                                 jsObject.getProperty(rt, "onError"));
    rsObject.uniffi_free = uniffi::matrix_sdk_ffi::st::
        vtablecallbackinterfacesendqueueroomerrorlistener::
            vtablecallbackinterfacesendqueueroomerrorlistener::free::
                makeCallbackFunction(rt, callInvoker,
                                     jsObject.getProperty(rt, "uniffiFree"));

    return rsObject;
  }
};

} // namespace uniffi::matrix_sdk_ffi
namespace uniffi::matrix_sdk_ffi {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <>
struct Bridging<
    UniffiVTableCallbackInterfaceSessionVerificationControllerDelegate> {
  static UniffiVTableCallbackInterfaceSessionVerificationControllerDelegate
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(
          rt,
          "Expected an object for "
          "UniffiVTableCallbackInterfaceSessionVerificationControllerDelegate");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiVTableCallbackInterfaceSessionVerificationControllerDelegate rsObject;

    // Create the vtable from the js callbacks.
    rsObject.did_receive_verification_request = uniffi::matrix_sdk_ffi::cb::
        callbackinterfacesessionverificationcontrollerdelegatemethod0::
            makeCallbackFunction(
                rt, callInvoker,
                jsObject.getProperty(rt, "didReceiveVerificationRequest"));
    rsObject.did_accept_verification_request = uniffi::matrix_sdk_ffi::cb::
        callbackinterfacesessionverificationcontrollerdelegatemethod1::
            makeCallbackFunction(
                rt, callInvoker,
                jsObject.getProperty(rt, "didAcceptVerificationRequest"));
    rsObject.did_start_sas_verification = uniffi::matrix_sdk_ffi::cb::
        callbackinterfacesessionverificationcontrollerdelegatemethod2::
            makeCallbackFunction(
                rt, callInvoker,
                jsObject.getProperty(rt, "didStartSasVerification"));
    rsObject.did_receive_verification_data = uniffi::matrix_sdk_ffi::cb::
        callbackinterfacesessionverificationcontrollerdelegatemethod3::
            makeCallbackFunction(
                rt, callInvoker,
                jsObject.getProperty(rt, "didReceiveVerificationData"));
    rsObject.did_fail = uniffi::matrix_sdk_ffi::cb::
        callbackinterfacesessionverificationcontrollerdelegatemethod4::
            makeCallbackFunction(rt, callInvoker,
                                 jsObject.getProperty(rt, "didFail"));
    rsObject.did_cancel = uniffi::matrix_sdk_ffi::cb::
        callbackinterfacesessionverificationcontrollerdelegatemethod5::
            makeCallbackFunction(rt, callInvoker,
                                 jsObject.getProperty(rt, "didCancel"));
    rsObject.did_finish = uniffi::matrix_sdk_ffi::cb::
        callbackinterfacesessionverificationcontrollerdelegatemethod6::
            makeCallbackFunction(rt, callInvoker,
                                 jsObject.getProperty(rt, "didFinish"));
    rsObject.uniffi_free = uniffi::matrix_sdk_ffi::st::
        vtablecallbackinterfacesessionverificationcontrollerdelegate::
            vtablecallbackinterfacesessionverificationcontrollerdelegate::free::
                makeCallbackFunction(rt, callInvoker,
                                     jsObject.getProperty(rt, "uniffiFree"));

    return rsObject;
  }
};

} // namespace uniffi::matrix_sdk_ffi
namespace uniffi::matrix_sdk_ffi {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <>
struct Bridging<UniffiVTableCallbackInterfaceSyncServiceStateObserver> {
  static UniffiVTableCallbackInterfaceSyncServiceStateObserver
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(
          rt, "Expected an object for "
              "UniffiVTableCallbackInterfaceSyncServiceStateObserver");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiVTableCallbackInterfaceSyncServiceStateObserver rsObject;

    // Create the vtable from the js callbacks.
    rsObject.on_update = uniffi::matrix_sdk_ffi::cb::
        callbackinterfacesyncservicestateobservermethod0::makeCallbackFunction(
            rt, callInvoker, jsObject.getProperty(rt, "onUpdate"));
    rsObject.uniffi_free = uniffi::matrix_sdk_ffi::st::
        vtablecallbackinterfacesyncservicestateobserver::
            vtablecallbackinterfacesyncservicestateobserver::free::
                makeCallbackFunction(rt, callInvoker,
                                     jsObject.getProperty(rt, "uniffiFree"));

    return rsObject;
  }
};

} // namespace uniffi::matrix_sdk_ffi
namespace uniffi::matrix_sdk_ffi {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiVTableCallbackInterfaceTimelineListener> {
  static UniffiVTableCallbackInterfaceTimelineListener
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(rt, "Expected an object for "
                             "UniffiVTableCallbackInterfaceTimelineListener");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiVTableCallbackInterfaceTimelineListener rsObject;

    // Create the vtable from the js callbacks.
    rsObject.on_update = uniffi::matrix_sdk_ffi::cb::
        callbackinterfacetimelinelistenermethod0::makeCallbackFunction(
            rt, callInvoker, jsObject.getProperty(rt, "onUpdate"));
    rsObject.uniffi_free =
        uniffi::matrix_sdk_ffi::st::vtablecallbackinterfacetimelinelistener::
            vtablecallbackinterfacetimelinelistener::free::makeCallbackFunction(
                rt, callInvoker, jsObject.getProperty(rt, "uniffiFree"));

    return rsObject;
  }
};

} // namespace uniffi::matrix_sdk_ffi
namespace uniffi::matrix_sdk_ffi {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <>
struct Bridging<UniffiVTableCallbackInterfaceTypingNotificationsListener> {
  static UniffiVTableCallbackInterfaceTypingNotificationsListener
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(
          rt, "Expected an object for "
              "UniffiVTableCallbackInterfaceTypingNotificationsListener");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiVTableCallbackInterfaceTypingNotificationsListener rsObject;

    // Create the vtable from the js callbacks.
    rsObject.call = uniffi::matrix_sdk_ffi::cb::
        callbackinterfacetypingnotificationslistenermethod0::
            makeCallbackFunction(rt, callInvoker,
                                 jsObject.getProperty(rt, "call"));
    rsObject.uniffi_free = uniffi::matrix_sdk_ffi::st::
        vtablecallbackinterfacetypingnotificationslistener::
            vtablecallbackinterfacetypingnotificationslistener::free::
                makeCallbackFunction(rt, callInvoker,
                                     jsObject.getProperty(rt, "uniffiFree"));

    return rsObject;
  }
};

} // namespace uniffi::matrix_sdk_ffi
namespace uniffi::matrix_sdk_ffi {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <>
struct Bridging<UniffiVTableCallbackInterfaceUnableToDecryptDelegate> {
  static UniffiVTableCallbackInterfaceUnableToDecryptDelegate
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(
          rt, "Expected an object for "
              "UniffiVTableCallbackInterfaceUnableToDecryptDelegate");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiVTableCallbackInterfaceUnableToDecryptDelegate rsObject;

    // Create the vtable from the js callbacks.
    rsObject.on_utd = uniffi::matrix_sdk_ffi::cb::
        callbackinterfaceunabletodecryptdelegatemethod0::makeCallbackFunction(
            rt, callInvoker, jsObject.getProperty(rt, "onUtd"));
    rsObject.uniffi_free = uniffi::matrix_sdk_ffi::st::
        vtablecallbackinterfaceunabletodecryptdelegate::
            vtablecallbackinterfaceunabletodecryptdelegate::free::
                makeCallbackFunction(rt, callInvoker,
                                     jsObject.getProperty(rt, "uniffiFree"));

    return rsObject;
  }
};

} // namespace uniffi::matrix_sdk_ffi
namespace uniffi::matrix_sdk_ffi {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <>
struct Bridging<UniffiVTableCallbackInterfaceVerificationStateListener> {
  static UniffiVTableCallbackInterfaceVerificationStateListener
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(
          rt, "Expected an object for "
              "UniffiVTableCallbackInterfaceVerificationStateListener");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiVTableCallbackInterfaceVerificationStateListener rsObject;

    // Create the vtable from the js callbacks.
    rsObject.on_update = uniffi::matrix_sdk_ffi::cb::
        callbackinterfaceverificationstatelistenermethod0::makeCallbackFunction(
            rt, callInvoker, jsObject.getProperty(rt, "onUpdate"));
    rsObject.uniffi_free = uniffi::matrix_sdk_ffi::st::
        vtablecallbackinterfaceverificationstatelistener::
            vtablecallbackinterfaceverificationstatelistener::free::
                makeCallbackFunction(rt, callInvoker,
                                     jsObject.getProperty(rt, "uniffiFree"));

    return rsObject;
  }
};

} // namespace uniffi::matrix_sdk_ffi
namespace uniffi::matrix_sdk_ffi {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <>
struct Bridging<UniffiVTableCallbackInterfaceWidgetCapabilitiesProvider> {
  static UniffiVTableCallbackInterfaceWidgetCapabilitiesProvider
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(
          rt, "Expected an object for "
              "UniffiVTableCallbackInterfaceWidgetCapabilitiesProvider");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiVTableCallbackInterfaceWidgetCapabilitiesProvider rsObject;

    // Create the vtable from the js callbacks.
    rsObject.acquire_capabilities = uniffi::matrix_sdk_ffi::cb::
        callbackinterfacewidgetcapabilitiesprovidermethod0::
            makeCallbackFunction(
                rt, callInvoker,
                jsObject.getProperty(rt, "acquireCapabilities"));
    rsObject.uniffi_free = uniffi::matrix_sdk_ffi::st::
        vtablecallbackinterfacewidgetcapabilitiesprovider::
            vtablecallbackinterfacewidgetcapabilitiesprovider::free::
                makeCallbackFunction(rt, callInvoker,
                                     jsObject.getProperty(rt, "uniffiFree"));

    return rsObject;
  }
};

} // namespace uniffi::matrix_sdk_ffi

namespace uniffi::matrix_sdk_ffi {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiRustFutureContinuationCallback> {
  static UniffiRustFutureContinuationCallback
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &value) {
    try {
      return uniffi::matrix_sdk_ffi::cb::rustfuturecontinuationcallback::
          makeCallbackFunction(rt, callInvoker, value);
    } catch (const std::logic_error &e) {
      throw jsi::JSError(rt, e.what());
    }
  }
};

} // namespace uniffi::matrix_sdk_ffi

NativeMatrixSdkFfi::NativeMatrixSdkFfi(
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> invoker)
    : callInvoker(invoker), props() {
  // Map from Javascript names to the cpp names
  props["ubrn_uniffi_internal_fn_func_ffi__string_to_byte_length"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_internal_fn_func_ffi__string_to_byte_length"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_internal_fn_func_ffi__string_to_byte_length(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_func_ffi__string_to_arraybuffer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_internal_fn_func_ffi__string_to_arraybuffer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_internal_fn_func_ffi__string_to_arraybuffer(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_func_ffi__arraybuffer_to_string"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_internal_fn_func_ffi__arraybuffer_to_string"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_internal_fn_func_ffi__arraybuffer_to_string(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_clone_client"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_clone_client"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_clone_client(rt, thisVal,
                                                                   args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_free_client"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_free_client"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_free_client(rt, thisVal,
                                                                  args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_client_abort_oidc_auth"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_method_client_abort_oidc_auth"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_client_abort_oidc_auth(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_client_account_data"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_client_account_data"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_client_account_data(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_client_account_url"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_client_account_url"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_method_client_account_url(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_client_available_sliding_sync_"
        "versions"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                    "client_available_sliding_sync_versions"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_client_available_sliding_sync_versions(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_client_avatar_url"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_client_avatar_url"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_method_client_avatar_url(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_client_await_room_remote_echo"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                        "client_await_room_remote_echo"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_client_await_room_remote_echo(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_client_cached_avatar_url"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_method_client_cached_avatar_url"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_client_cached_avatar_url(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_client_can_deactivate_account"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                        "client_can_deactivate_account"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_client_can_deactivate_account(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_client_create_room"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_client_create_room"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_method_client_create_room(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_client_create_room_alias"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_method_client_create_room_alias"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_client_create_room_alias(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_client_custom_login_with_jwt"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                        "client_custom_login_with_jwt"),
          4,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_client_custom_login_with_jwt(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_client_deactivate_account"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_method_client_deactivate_account"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_client_deactivate_account(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_client_delete_pusher"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_client_delete_pusher"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_client_delete_pusher(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_client_device_id"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_client_device_id"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_method_client_device_id(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_client_display_name"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_client_display_name"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_client_display_name(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_client_enable_all_send_queues"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                        "client_enable_all_send_queues"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_client_enable_all_send_queues(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_client_encryption"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_client_encryption"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_method_client_encryption(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_client_get_dm_room"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_client_get_dm_room"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_method_client_get_dm_room(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_client_get_media_content"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_method_client_get_media_content"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_client_get_media_content(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_client_get_media_file"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_client_get_media_file"),
          6,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_client_get_media_file(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_client_get_media_thumbnail"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                        "client_get_media_thumbnail"),
          4,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_client_get_media_thumbnail(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_client_get_notification_"
        "settings"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                    "client_get_notification_settings"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_client_get_notification_settings(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_client_get_profile"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_client_get_profile"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_method_client_get_profile(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_client_get_recently_visited_"
        "rooms"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                    "client_get_recently_visited_rooms"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_client_get_recently_visited_rooms(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_client_get_room_preview_from_"
        "room_alias"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                    "client_get_room_preview_from_room_alias"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_client_get_room_preview_from_room_alias(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_client_get_room_preview_from_"
        "room_id"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                    "client_get_room_preview_from_room_id"),
      3,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_client_get_room_preview_from_room_id(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_client_get_session_verification_"
        "controller"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_fn_method_client_"
                                "get_session_verification_controller"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_client_get_session_verification_controller(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_client_get_url"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_client_get_url"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_method_client_get_url(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_client_homeserver"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_client_homeserver"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_method_client_homeserver(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_client_homeserver_login_"
        "details"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                    "client_homeserver_login_details"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_client_homeserver_login_details(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_client_ignore_user"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_client_ignore_user"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_method_client_ignore_user(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_client_ignored_users"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_client_ignored_users"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_client_ignored_users(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_client_is_room_alias_available"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                        "client_is_room_alias_available"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_client_is_room_alias_available(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_client_join_room_by_id"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_method_client_join_room_by_id"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_client_join_room_by_id(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_client_join_room_by_id_or_"
        "alias"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                    "client_join_room_by_id_or_alias"),
      3,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_client_join_room_by_id_or_alias(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_client_knock"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_client_knock"),
          4,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_method_client_knock(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_client_login"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_client_login"),
          5,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_method_client_login(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_client_login_with_email"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_method_client_login_with_email"),
          5,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_client_login_with_email(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_client_login_with_oidc_"
        "callback"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                    "client_login_with_oidc_callback"),
      3,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_client_login_with_oidc_callback(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_client_logout"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_client_logout"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_method_client_logout(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_client_notification_client"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                        "client_notification_client"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_client_notification_client(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_client_remove_avatar"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_client_remove_avatar"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_client_remove_avatar(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_client_reset_server_"
        "capabilities"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                    "client_reset_server_capabilities"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_client_reset_server_capabilities(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_client_resolve_room_alias"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_method_client_resolve_room_alias"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_client_resolve_room_alias(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_client_restore_session"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_method_client_restore_session"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_client_restore_session(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_client_room_alias_exists"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_method_client_room_alias_exists"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_client_room_alias_exists(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_client_room_directory_search"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                        "client_room_directory_search"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_client_room_directory_search(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_client_rooms"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_client_rooms"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_method_client_rooms(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_client_search_users"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_client_search_users"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_client_search_users(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_client_server"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_client_server"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_method_client_server(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_client_session"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_client_session"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_method_client_session(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_client_set_account_data"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_method_client_set_account_data"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_client_set_account_data(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_client_set_delegate"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_client_set_delegate"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_client_set_delegate(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_client_set_display_name"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_method_client_set_display_name"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_client_set_display_name(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_client_set_pusher"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_client_set_pusher"),
          7,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_method_client_set_pusher(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_client_sliding_sync_version"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                        "client_sliding_sync_version"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_client_sliding_sync_version(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_client_start_sso_login"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_method_client_start_sso_login"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_client_start_sso_login(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_client_subscribe_to_ignored_"
        "users"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                    "client_subscribe_to_ignored_users"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_client_subscribe_to_ignored_users(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_client_subscribe_to_send_queue_"
        "status"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                    "client_subscribe_to_send_queue_status"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_client_subscribe_to_send_queue_status(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_client_sync_service"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_client_sync_service"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_client_sync_service(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_client_track_recently_visited_"
        "room"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                    "client_track_recently_visited_room"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_client_track_recently_visited_room(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_client_unignore_user"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_client_unignore_user"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_client_unignore_user(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_client_upload_avatar"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_client_upload_avatar"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_client_upload_avatar(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_client_upload_media"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_client_upload_media"),
          4,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_client_upload_media(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_client_url_for_oidc"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_client_url_for_oidc"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_client_url_for_oidc(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_client_user_id"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_client_user_id"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_method_client_user_id(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_client_user_id_server_name"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                        "client_user_id_server_name"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_client_user_id_server_name(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_clone_clientbuilder"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_clone_clientbuilder"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_clone_clientbuilder(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_free_clientbuilder"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_free_clientbuilder"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_free_clientbuilder(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_constructor_clientbuilder_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_constructor_clientbuilder_new"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_constructor_clientbuilder_new(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_add_root_"
        "certificates"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                    "clientbuilder_add_root_certificates"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_add_root_certificates(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_auto_enable_"
        "backups"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                    "clientbuilder_auto_enable_backups"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_auto_enable_backups(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_auto_enable_cross_"
        "signing"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                    "clientbuilder_auto_enable_cross_signing"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_auto_enable_cross_signing(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_backup_download_"
        "strategy"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                    "clientbuilder_backup_download_strategy"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_backup_download_strategy(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_build"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_build"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_build(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_build_with_qr_"
        "code"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                    "clientbuilder_build_with_qr_code"),
      4,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_build_with_qr_code(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_cross_process_"
        "store_locks_holder_name"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(
          rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_cross_"
              "process_store_locks_holder_name"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_cross_process_store_locks_holder_name(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_disable_automatic_"
        "token_refresh"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(
          rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_disable_"
              "automatic_token_refresh"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_disable_automatic_token_refresh(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_disable_built_in_"
        "root_certificates"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(
          rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_disable_"
              "built_in_root_certificates"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_disable_built_in_root_certificates(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_disable_ssl_"
        "verification"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                    "clientbuilder_disable_ssl_verification"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_disable_ssl_verification(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_enable_oidc_"
        "refresh_lock"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                    "clientbuilder_enable_oidc_refresh_lock"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_enable_oidc_refresh_lock(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_homeserver_url"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                        "clientbuilder_homeserver_url"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_homeserver_url(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_passphrase"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_passphrase"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_passphrase(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_proxy"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_proxy"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_proxy(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_request_config"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                        "clientbuilder_request_config"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_request_config(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_room_decryption_"
        "trust_requirement"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(
          rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_room_"
              "decryption_trust_requirement"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_room_decryption_trust_requirement(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_room_key_recipient_"
        "strategy"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                "clientbuilder_room_key_recipient_strategy"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_room_key_recipient_strategy(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_server_name"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_server_name"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_server_name(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_server_name_or_"
        "homeserver_url"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                "clientbuilder_server_name_or_homeserver_url"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_server_name_or_homeserver_url(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_session_paths"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                        "clientbuilder_session_paths"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_session_paths(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_set_session_"
        "delegate"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                    "clientbuilder_set_session_delegate"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_set_session_delegate(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_sliding_sync_"
        "version_builder"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                "clientbuilder_sliding_sync_version_builder"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_sliding_sync_version_builder(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_use_event_cache_"
        "persistent_storage"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(
          rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_use_event_"
              "cache_persistent_storage"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_use_event_cache_persistent_storage(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_user_agent"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_user_agent"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_user_agent(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_username"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_username"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_username(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_clone_encryption"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_clone_encryption"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_clone_encryption(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_free_encryption"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_free_encryption"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_free_encryption(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_encryption_backup_exists_on_"
        "server"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                    "encryption_backup_exists_on_server"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_encryption_backup_exists_on_server(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_encryption_backup_state"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_method_encryption_backup_state"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_encryption_backup_state(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_encryption_backup_state_"
        "listener"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                    "encryption_backup_state_listener"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_encryption_backup_state_listener(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_encryption_curve25519_key"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_method_encryption_curve25519_key"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_encryption_curve25519_key(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_encryption_disable_recovery"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                        "encryption_disable_recovery"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_encryption_disable_recovery(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_encryption_ed25519_key"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_method_encryption_ed25519_key"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_encryption_ed25519_key(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_encryption_enable_backups"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_method_encryption_enable_backups"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_encryption_enable_backups(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_encryption_enable_recovery"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                        "encryption_enable_recovery"),
          4,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_encryption_enable_recovery(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_encryption_is_last_device"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_method_encryption_is_last_device"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_encryption_is_last_device(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_encryption_recover"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_encryption_recover"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_method_encryption_recover(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_encryption_recover_and_reset"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                        "encryption_recover_and_reset"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_encryption_recover_and_reset(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_encryption_recovery_state"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_method_encryption_recovery_state"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_encryption_recovery_state(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_encryption_recovery_state_"
        "listener"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                    "encryption_recovery_state_listener"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_encryption_recovery_state_listener(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_encryption_reset_identity"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_method_encryption_reset_identity"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_encryption_reset_identity(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_encryption_reset_recovery_key"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                        "encryption_reset_recovery_key"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_encryption_reset_recovery_key(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_encryption_user_identity"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_method_encryption_user_identity"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_encryption_user_identity(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_encryption_verification_state"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                        "encryption_verification_state"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_encryption_verification_state(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_encryption_verification_state_"
        "listener"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                    "encryption_verification_state_listener"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_encryption_verification_state_listener(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_encryption_wait_for_backup_"
        "upload_steady_state"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(
          rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_encryption_wait_for_backup_"
              "upload_steady_state"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_encryption_wait_for_backup_upload_steady_state(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_encryption_wait_for_e2ee_"
        "initialization_tasks"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(
          rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_encryption_wait_for_e2ee_"
              "initialization_tasks"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_encryption_wait_for_e2ee_initialization_tasks(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_clone_homeserverlogindetails"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_clone_homeserverlogindetails"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_clone_homeserverlogindetails(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_free_homeserverlogindetails"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_free_homeserverlogindetails"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_free_homeserverlogindetails(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_homeserverlogindetails_sliding_"
        "sync_version"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                "homeserverlogindetails_sliding_sync_version"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_homeserverlogindetails_sliding_sync_version(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_homeserverlogindetails_supported_"
        "oidc_prompts"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(
          rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_homeserverlogindetails_"
              "supported_oidc_prompts"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_homeserverlogindetails_supported_oidc_prompts(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_homeserverlogindetails_supports_"
        "oidc_login"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                "homeserverlogindetails_supports_oidc_login"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_homeserverlogindetails_supports_oidc_login(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_homeserverlogindetails_supports_"
        "password_login"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(
          rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_homeserverlogindetails_"
              "supports_password_login"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_homeserverlogindetails_supports_password_login(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_homeserverlogindetails_url"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                        "homeserverlogindetails_url"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_homeserverlogindetails_url(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_clone_identityresethandle"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_clone_identityresethandle"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_clone_identityresethandle(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_free_identityresethandle"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_free_identityresethandle"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_free_identityresethandle(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_identityresethandle_auth_type"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                        "identityresethandle_auth_type"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_identityresethandle_auth_type(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_identityresethandle_cancel"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                        "identityresethandle_cancel"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_identityresethandle_cancel(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_identityresethandle_reset"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_method_identityresethandle_reset"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_identityresethandle_reset(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_clone_inreplytodetails"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_clone_inreplytodetails"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_clone_inreplytodetails(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_free_inreplytodetails"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_free_inreplytodetails"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_free_inreplytodetails(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_inreplytodetails_event"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_method_inreplytodetails_event"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_inreplytodetails_event(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_inreplytodetails_event_id"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_method_inreplytodetails_event_id"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_inreplytodetails_event_id(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_clone_knockrequestactions"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_clone_knockrequestactions"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_clone_knockrequestactions(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_free_knockrequestactions"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_free_knockrequestactions"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_free_knockrequestactions(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_knockrequestactions_accept"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                        "knockrequestactions_accept"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_knockrequestactions_accept(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_knockrequestactions_decline"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                        "knockrequestactions_decline"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_knockrequestactions_decline(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_knockrequestactions_decline_and_"
        "ban"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                    "knockrequestactions_decline_and_ban"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_knockrequestactions_decline_and_ban(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_knockrequestactions_mark_as_"
        "seen"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                    "knockrequestactions_mark_as_seen"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_knockrequestactions_mark_as_seen(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_clone_lazytimelineitemprovider"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_clone_lazytimelineitemprovider"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_clone_lazytimelineitemprovider(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_free_lazytimelineitemprovider"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_free_lazytimelineitemprovider"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_free_lazytimelineitemprovider(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_lazytimelineitemprovider_debug_"
        "info"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                    "lazytimelineitemprovider_debug_info"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_lazytimelineitemprovider_debug_info(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_lazytimelineitemprovider_get_"
        "send_handle"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                    "lazytimelineitemprovider_get_send_handle"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_lazytimelineitemprovider_get_send_handle(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_lazytimelineitemprovider_get_"
        "shields"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                    "lazytimelineitemprovider_get_shields"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_lazytimelineitemprovider_get_shields(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_clone_mediafilehandle"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_clone_mediafilehandle"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_clone_mediafilehandle(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_free_mediafilehandle"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_free_mediafilehandle"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_free_mediafilehandle(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_mediafilehandle_path"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_mediafilehandle_path"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_mediafilehandle_path(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_mediafilehandle_persist"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_method_mediafilehandle_persist"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_mediafilehandle_persist(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_clone_mediasource"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_clone_mediasource"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_clone_mediasource(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_free_mediasource"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_free_mediasource"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_free_mediasource(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_constructor_mediasource_from_json"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_"
                                        "constructor_mediasource_from_json"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_constructor_mediasource_from_json(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_constructor_mediasource_from_url"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_constructor_mediasource_from_url"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_constructor_mediasource_from_url(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_mediasource_to_json"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_mediasource_to_json"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_mediasource_to_json(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_mediasource_url"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_mediasource_url"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_method_mediasource_url(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_clone_notificationclient"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_clone_notificationclient"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_clone_notificationclient(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_free_notificationclient"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_free_notificationclient"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_free_notificationclient(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_notificationclient_get_"
        "notification"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                    "notificationclient_get_notification"),
      3,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_notificationclient_get_notification(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_clone_notificationsettings"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_clone_notificationsettings"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_clone_notificationsettings(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_free_notificationsettings"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_free_notificationsettings"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_free_notificationsettings(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_notificationsettings_can_"
        "homeserver_push_encrypted_event_to_device"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_notificationsettings_"
                  "can_homeserver_push_encrypted_event_to_device"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_notificationsettings_can_homeserver_push_encrypted_event_to_device(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_notificationsettings_can_push_"
        "encrypted_event_to_device"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(
          rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_notificationsettings_can_"
              "push_encrypted_event_to_device"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_notificationsettings_can_push_encrypted_event_to_device(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_notificationsettings_contains_"
        "keywords_rules"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                "notificationsettings_contains_keywords_rules"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_notificationsettings_contains_keywords_rules(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_notificationsettings_get_default_"
        "room_notification_mode"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(
          rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_notificationsettings_get_"
              "default_room_notification_mode"),
      3,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_notificationsettings_get_default_room_notification_mode(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_notificationsettings_get_room_"
        "notification_settings"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(
          rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_notificationsettings_get_"
              "room_notification_settings"),
      4,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_notificationsettings_get_room_notification_settings(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_notificationsettings_get_rooms_"
        "with_user_defined_rules"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(
          rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_notificationsettings_get_"
              "rooms_with_user_defined_rules"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_notificationsettings_get_rooms_with_user_defined_rules(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_notificationsettings_get_user_"
        "defined_room_notification_mode"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(
          rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_notificationsettings_get_"
              "user_defined_room_notification_mode"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_notificationsettings_get_user_defined_room_notification_mode(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_notificationsettings_is_call_"
        "enabled"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                    "notificationsettings_is_call_enabled"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_notificationsettings_is_call_enabled(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_notificationsettings_is_invite_"
        "for_me_enabled"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(
          rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_notificationsettings_is_"
              "invite_for_me_enabled"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_notificationsettings_is_invite_for_me_enabled(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_notificationsettings_is_room_"
        "mention_enabled"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                "notificationsettings_is_room_mention_enabled"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_notificationsettings_is_room_mention_enabled(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_notificationsettings_is_user_"
        "mention_enabled"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                "notificationsettings_is_user_mention_enabled"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_notificationsettings_is_user_mention_enabled(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_notificationsettings_restore_"
        "default_room_notification_mode"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(
          rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_notificationsettings_"
              "restore_default_room_notification_mode"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_notificationsettings_restore_default_room_notification_mode(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_notificationsettings_set_call_"
        "enabled"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                    "notificationsettings_set_call_enabled"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_notificationsettings_set_call_enabled(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_notificationsettings_set_default_"
        "room_notification_mode"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(
          rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_notificationsettings_set_"
              "default_room_notification_mode"),
      4,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_notificationsettings_set_default_room_notification_mode(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_notificationsettings_set_"
        "delegate"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                    "notificationsettings_set_delegate"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_notificationsettings_set_delegate(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_notificationsettings_set_invite_"
        "for_me_enabled"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(
          rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_notificationsettings_set_"
              "invite_for_me_enabled"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_notificationsettings_set_invite_for_me_enabled(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_notificationsettings_set_room_"
        "mention_enabled"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(
          rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_notificationsettings_set_"
              "room_mention_enabled"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_notificationsettings_set_room_mention_enabled(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_notificationsettings_set_room_"
        "notification_mode"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(
          rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_notificationsettings_set_"
              "room_notification_mode"),
      3,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_notificationsettings_set_room_notification_mode(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_notificationsettings_set_user_"
        "mention_enabled"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(
          rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_notificationsettings_set_"
              "user_mention_enabled"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_notificationsettings_set_user_mention_enabled(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_notificationsettings_unmute_"
        "room"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                    "notificationsettings_unmute_room"),
      4,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_notificationsettings_unmute_room(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_clone_qrcodedata"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_clone_qrcodedata"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_clone_qrcodedata(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_free_qrcodedata"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_free_qrcodedata"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_free_qrcodedata(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_constructor_qrcodedata_from_bytes"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_"
                                        "constructor_qrcodedata_from_bytes"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_constructor_qrcodedata_from_bytes(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_clone_room"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_matrix_sdk_ffi_fn_clone_room"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_clone_room(rt, thisVal,
                                                                 args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_free_room"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_matrix_sdk_ffi_fn_free_room"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_free_room(rt, thisVal,
                                                                args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_room_active_members_count"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_method_room_active_members_count"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_room_active_members_count(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_room_active_room_call_"
        "participants"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_room_"
                                    "active_room_call_participants"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_room_active_room_call_participants(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_room_alternative_aliases"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_method_room_alternative_aliases"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_room_alternative_aliases(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_room_apply_power_level_changes"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                        "room_apply_power_level_changes"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_room_apply_power_level_changes(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_room_avatar_url"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_room_avatar_url"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_method_room_avatar_url(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_room_ban_user"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_room_ban_user"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_method_room_ban_user(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_room_can_user_ban"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_room_can_user_ban"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_method_room_can_user_ban(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_room_can_user_invite"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_room_can_user_invite"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_room_can_user_invite(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_room_can_user_kick"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_room_can_user_kick"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_method_room_can_user_kick(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_room_can_user_pin_unpin"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_method_room_can_user_pin_unpin"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_room_can_user_pin_unpin(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_room_can_user_redact_other"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                        "room_can_user_redact_other"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_room_can_user_redact_other(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_room_can_user_redact_own"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_method_room_can_user_redact_own"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_room_can_user_redact_own(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_room_can_user_send_message"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                        "room_can_user_send_message"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_room_can_user_send_message(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_room_can_user_send_state"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_method_room_can_user_send_state"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_room_can_user_send_state(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_room_can_user_trigger_room_"
        "notification"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_room_"
                                    "can_user_trigger_room_notification"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_room_can_user_trigger_room_notification(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_room_canonical_alias"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_room_canonical_alias"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_room_canonical_alias(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_room_clear_composer_draft"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_method_room_clear_composer_draft"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_room_clear_composer_draft(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_room_clear_event_cache_storage"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                        "room_clear_event_cache_storage"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_room_clear_event_cache_storage(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_room_discard_room_key"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_room_discard_room_key"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_room_discard_room_key(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_room_display_name"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_room_display_name"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_method_room_display_name(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_room_edit"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_room_edit"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_method_room_edit(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_room_enable_send_queue"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_method_room_enable_send_queue"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_room_enable_send_queue(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_room_get_power_levels"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_room_get_power_levels"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_room_get_power_levels(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_room_has_active_room_call"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_method_room_has_active_room_call"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_room_has_active_room_call(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_room_heroes"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_room_heroes"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_method_room_heroes(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_room_id"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_room_id"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_method_room_id(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_room_ignore_device_trust_and_"
        "resend"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_room_"
                                    "ignore_device_trust_and_resend"),
      3,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_room_ignore_device_trust_and_resend(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_room_ignore_user"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_room_ignore_user"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_method_room_ignore_user(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_room_invite_user_by_id"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_method_room_invite_user_by_id"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_room_invite_user_by_id(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_room_invited_members_count"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                        "room_invited_members_count"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_room_invited_members_count(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_room_inviter"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_room_inviter"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_method_room_inviter(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_room_is_direct"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_room_is_direct"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_method_room_is_direct(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_room_is_encrypted"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_room_is_encrypted"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_method_room_is_encrypted(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_room_is_public"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_room_is_public"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_method_room_is_public(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_room_is_send_queue_enabled"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                        "room_is_send_queue_enabled"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_room_is_send_queue_enabled(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_room_is_space"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_room_is_space"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_method_room_is_space(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_room_is_tombstoned"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_room_is_tombstoned"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_method_room_is_tombstoned(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_room_join"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_room_join"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_method_room_join(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_room_joined_members_count"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_method_room_joined_members_count"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_room_joined_members_count(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_room_kick_user"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_room_kick_user"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_method_room_kick_user(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_room_leave"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_room_leave"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_method_room_leave(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_room_load_composer_draft"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_method_room_load_composer_draft"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_room_load_composer_draft(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_room_mark_as_read"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_room_mark_as_read"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_method_room_mark_as_read(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_room_matrix_to_event_permalink"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                        "room_matrix_to_event_permalink"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_room_matrix_to_event_permalink(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_room_matrix_to_permalink"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_method_room_matrix_to_permalink"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_room_matrix_to_permalink(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_room_member"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_room_member"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_method_room_member(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_room_member_avatar_url"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_method_room_member_avatar_url"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_room_member_avatar_url(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_room_member_display_name"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_method_room_member_display_name"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_room_member_display_name(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_room_members"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_room_members"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_method_room_members(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_room_members_no_sync"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_room_members_no_sync"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_room_members_no_sync(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_room_membership"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_room_membership"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_method_room_membership(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_room_message_filtered_timeline"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                        "room_message_filtered_timeline"),
          4,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_room_message_filtered_timeline(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_room_own_user_id"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_room_own_user_id"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_method_room_own_user_id(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_room_pinned_events_timeline"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                        "room_pinned_events_timeline"),
          4,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_room_pinned_events_timeline(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_room_raw_name"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_room_raw_name"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_method_room_raw_name(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_room_redact"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_room_redact"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_method_room_redact(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_room_remove_avatar"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_room_remove_avatar"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_method_room_remove_avatar(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_room_report_content"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_room_report_content"),
          4,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_room_report_content(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_room_reset_power_levels"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_method_room_reset_power_levels"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_room_reset_power_levels(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_room_room_events_debug_string"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                        "room_room_events_debug_string"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_room_room_events_debug_string(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_room_room_info"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_room_room_info"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_method_room_room_info(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_room_save_composer_draft"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_method_room_save_composer_draft"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_room_save_composer_draft(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_room_send_call_notification"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                        "room_send_call_notification"),
          5,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_room_send_call_notification(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_room_send_call_notification_if_"
        "needed"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_room_"
                                    "send_call_notification_if_needed"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_room_send_call_notification_if_needed(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_room_send_raw"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_room_send_raw"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_method_room_send_raw(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_room_set_is_favourite"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_room_set_is_favourite"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_room_set_is_favourite(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_room_set_is_low_priority"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_method_room_set_is_low_priority"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_room_set_is_low_priority(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_room_set_name"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_room_set_name"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_method_room_set_name(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_room_set_topic"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_room_set_topic"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_method_room_set_topic(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_room_set_unread_flag"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_room_set_unread_flag"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_room_set_unread_flag(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_room_subscribe_to_identity_"
        "status_changes"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_room_"
                                    "subscribe_to_identity_status_changes"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_room_subscribe_to_identity_status_changes(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_room_subscribe_to_knock_"
        "requests"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_room_"
                                    "subscribe_to_knock_requests"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_room_subscribe_to_knock_requests(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_room_subscribe_to_room_info_"
        "updates"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_room_"
                                    "subscribe_to_room_info_updates"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_room_subscribe_to_room_info_updates(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_room_subscribe_to_typing_"
        "notifications"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_room_"
                                    "subscribe_to_typing_notifications"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_room_subscribe_to_typing_notifications(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_room_suggested_role_for_user"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                        "room_suggested_role_for_user"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_room_suggested_role_for_user(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_room_timeline"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_room_timeline"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_method_room_timeline(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_room_timeline_focused_on_event"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                        "room_timeline_focused_on_event"),
          4,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_room_timeline_focused_on_event(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_room_topic"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_room_topic"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_method_room_topic(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_room_typing_notice"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_room_typing_notice"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_method_room_typing_notice(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_room_unban_user"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_room_unban_user"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_method_room_unban_user(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_room_update_power_levels_for_"
        "users"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_room_"
                                    "update_power_levels_for_users"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_room_update_power_levels_for_users(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_room_upload_avatar"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_room_upload_avatar"),
          4,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_method_room_upload_avatar(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_room_withdraw_verification_and_"
        "resend"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_room_"
                                    "withdraw_verification_and_resend"),
      3,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_room_withdraw_verification_and_resend(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_clone_roomdirectorysearch"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_clone_roomdirectorysearch"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_clone_roomdirectorysearch(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_free_roomdirectorysearch"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_free_roomdirectorysearch"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_free_roomdirectorysearch(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_roomdirectorysearch_is_at_last_"
        "page"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                    "roomdirectorysearch_is_at_last_page"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_roomdirectorysearch_is_at_last_page(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_roomdirectorysearch_loaded_"
        "pages"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                    "roomdirectorysearch_loaded_pages"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_roomdirectorysearch_loaded_pages(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_roomdirectorysearch_next_page"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                        "roomdirectorysearch_next_page"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_roomdirectorysearch_next_page(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_roomdirectorysearch_results"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                        "roomdirectorysearch_results"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_roomdirectorysearch_results(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_roomdirectorysearch_search"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                        "roomdirectorysearch_search"),
          4,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_roomdirectorysearch_search(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_clone_roomlist"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_clone_roomlist"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_clone_roomlist(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_free_roomlist"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_free_roomlist"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_free_roomlist(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_roomlist_entries_with_dynamic_"
        "adapters"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                    "roomlist_entries_with_dynamic_adapters"),
      3,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_roomlist_entries_with_dynamic_adapters(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_roomlist_loading_state"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_method_roomlist_loading_state"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_roomlist_loading_state(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_roomlist_room"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_roomlist_room"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_method_roomlist_room(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_clone_"
        "roomlistdynamicentriescontroller"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_clone_"
                                    "roomlistdynamicentriescontroller"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_clone_roomlistdynamicentriescontroller(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_free_roomlistdynamicentriescontroller"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_free_"
                                        "roomlistdynamicentriescontroller"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_free_roomlistdynamicentriescontroller(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_roomlistdynamicentriescontroller_"
        "add_one_page"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(
          rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
              "roomlistdynamicentriescontroller_add_one_page"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_roomlistdynamicentriescontroller_add_one_page(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_roomlistdynamicentriescontroller_"
        "reset_to_one_page"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(
          rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
              "roomlistdynamicentriescontroller_reset_to_one_page"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_roomlistdynamicentriescontroller_reset_to_one_page(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_roomlistdynamicentriescontroller_"
        "set_filter"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                "roomlistdynamicentriescontroller_set_filter"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_roomlistdynamicentriescontroller_set_filter(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_clone_"
        "roomlistentrieswithdynamicadaptersresult"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_matrix_sdk_ffi_fn_clone_"
                                    "roomlistentrieswithdynamicadaptersresult"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_clone_roomlistentrieswithdynamicadaptersresult(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_free_"
        "roomlistentrieswithdynamicadaptersresult"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_matrix_sdk_ffi_fn_free_"
                                    "roomlistentrieswithdynamicadaptersresult"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_free_roomlistentrieswithdynamicadaptersresult(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_"
        "roomlistentrieswithdynamicadaptersresult_controller"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                  "roomlistentrieswithdynamicadaptersresult_controller"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_roomlistentrieswithdynamicadaptersresult_controller(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_"
        "roomlistentrieswithdynamicadaptersresult_entries_stream"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                  "roomlistentrieswithdynamicadaptersresult_entries_stream"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_roomlistentrieswithdynamicadaptersresult_entries_stream(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_clone_roomlistitem"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_clone_roomlistitem"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_clone_roomlistitem(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_free_roomlistitem"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_free_roomlistitem"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_free_roomlistitem(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_roomlistitem_avatar_url"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_method_roomlistitem_avatar_url"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_roomlistitem_avatar_url(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_roomlistitem_canonical_alias"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                        "roomlistitem_canonical_alias"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_roomlistitem_canonical_alias(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_roomlistitem_display_name"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_method_roomlistitem_display_name"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_roomlistitem_display_name(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_roomlistitem_full_room"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_method_roomlistitem_full_room"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_roomlistitem_full_room(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_roomlistitem_id"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_roomlistitem_id"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_method_roomlistitem_id(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_roomlistitem_init_timeline"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                        "roomlistitem_init_timeline"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_roomlistitem_init_timeline(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_roomlistitem_invited_room"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_method_roomlistitem_invited_room"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_roomlistitem_invited_room(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_roomlistitem_is_direct"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_method_roomlistitem_is_direct"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_roomlistitem_is_direct(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_roomlistitem_is_encrypted"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_method_roomlistitem_is_encrypted"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_roomlistitem_is_encrypted(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_roomlistitem_is_timeline_"
        "initialized"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                    "roomlistitem_is_timeline_initialized"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_roomlistitem_is_timeline_initialized(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_roomlistitem_latest_event"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_method_roomlistitem_latest_event"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_roomlistitem_latest_event(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_roomlistitem_membership"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_method_roomlistitem_membership"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_roomlistitem_membership(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_roomlistitem_preview_room"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_method_roomlistitem_preview_room"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_roomlistitem_preview_room(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_roomlistitem_room_info"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_method_roomlistitem_room_info"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_roomlistitem_room_info(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_clone_roomlistservice"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_clone_roomlistservice"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_clone_roomlistservice(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_free_roomlistservice"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_free_roomlistservice"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_free_roomlistservice(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_roomlistservice_all_rooms"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_method_roomlistservice_all_rooms"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_roomlistservice_all_rooms(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_roomlistservice_room"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_roomlistservice_room"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_roomlistservice_room(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_roomlistservice_state"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_roomlistservice_state"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_roomlistservice_state(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_roomlistservice_subscribe_to_"
        "rooms"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                    "roomlistservice_subscribe_to_rooms"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_roomlistservice_subscribe_to_rooms(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_roomlistservice_sync_indicator"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                        "roomlistservice_sync_indicator"),
          4,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_roomlistservice_sync_indicator(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_clone_roommembersiterator"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_clone_roommembersiterator"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_clone_roommembersiterator(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_free_roommembersiterator"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_free_roommembersiterator"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_free_roommembersiterator(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_roommembersiterator_len"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_method_roommembersiterator_len"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_roommembersiterator_len(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_roommembersiterator_next_chunk"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                        "roommembersiterator_next_chunk"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_roommembersiterator_next_chunk(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_clone_"
        "roommessageeventcontentwithoutrelation"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_matrix_sdk_ffi_fn_clone_"
                                    "roommessageeventcontentwithoutrelation"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_clone_roommessageeventcontentwithoutrelation(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_free_"
        "roommessageeventcontentwithoutrelation"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_matrix_sdk_ffi_fn_free_"
                                    "roommessageeventcontentwithoutrelation"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_free_roommessageeventcontentwithoutrelation(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_"
        "roommessageeventcontentwithoutrelation_with_mentions"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                  "roommessageeventcontentwithoutrelation_with_mentions"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_roommessageeventcontentwithoutrelation_with_mentions(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_clone_roompreview"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_clone_roompreview"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_clone_roompreview(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_free_roompreview"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_free_roompreview"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_free_roompreview(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_roompreview_info"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_roompreview_info"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_method_roompreview_info(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_roompreview_inviter"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_roompreview_inviter"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_roompreview_inviter(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_roompreview_leave"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_roompreview_leave"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_method_roompreview_leave(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_clone_sendattachmentjoinhandle"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_clone_sendattachmentjoinhandle"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_clone_sendattachmentjoinhandle(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_free_sendattachmentjoinhandle"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_free_sendattachmentjoinhandle"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_free_sendattachmentjoinhandle(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_sendattachmentjoinhandle_"
        "cancel"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                    "sendattachmentjoinhandle_cancel"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_sendattachmentjoinhandle_cancel(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_sendattachmentjoinhandle_join"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                        "sendattachmentjoinhandle_join"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_sendattachmentjoinhandle_join(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_clone_sendhandle"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_clone_sendhandle"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_clone_sendhandle(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_free_sendhandle"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_free_sendhandle"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_free_sendhandle(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_sendhandle_abort"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_sendhandle_abort"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_method_sendhandle_abort(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_sendhandle_try_resend"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_sendhandle_try_resend"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_sendhandle_try_resend(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_clone_sessionverificationcontroller"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_clone_"
                                        "sessionverificationcontroller"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_clone_sessionverificationcontroller(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_free_sessionverificationcontroller"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_free_"
                                        "sessionverificationcontroller"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_free_sessionverificationcontroller(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_sessionverificationcontroller_"
        "accept_verification_request"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(
          rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
              "sessionverificationcontroller_accept_verification_request"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_sessionverificationcontroller_accept_verification_request(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_sessionverificationcontroller_"
        "acknowledge_verification_request"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(
          rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
              "sessionverificationcontroller_acknowledge_verification_request"),
      3,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_sessionverificationcontroller_acknowledge_verification_request(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_sessionverificationcontroller_"
        "approve_verification"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(
          rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
              "sessionverificationcontroller_approve_verification"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_sessionverificationcontroller_approve_verification(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_sessionverificationcontroller_"
        "cancel_verification"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(
          rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
              "sessionverificationcontroller_cancel_verification"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_sessionverificationcontroller_cancel_verification(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_sessionverificationcontroller_"
        "decline_verification"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(
          rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
              "sessionverificationcontroller_decline_verification"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_sessionverificationcontroller_decline_verification(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_sessionverificationcontroller_"
        "request_verification"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(
          rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
              "sessionverificationcontroller_request_verification"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_sessionverificationcontroller_request_verification(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_sessionverificationcontroller_"
        "set_delegate"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                "sessionverificationcontroller_set_delegate"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_sessionverificationcontroller_set_delegate(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_sessionverificationcontroller_"
        "start_sas_verification"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(
          rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
              "sessionverificationcontroller_start_sas_verification"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_sessionverificationcontroller_start_sas_verification(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_clone_sessionverificationemoji"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_clone_sessionverificationemoji"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_clone_sessionverificationemoji(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_free_sessionverificationemoji"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_free_sessionverificationemoji"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_free_sessionverificationemoji(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_sessionverificationemoji_"
        "description"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                    "sessionverificationemoji_description"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_sessionverificationemoji_description(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_sessionverificationemoji_"
        "symbol"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                    "sessionverificationemoji_symbol"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_sessionverificationemoji_symbol(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_clone_span"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_matrix_sdk_ffi_fn_clone_span"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_clone_span(rt, thisVal,
                                                                 args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_free_span"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_matrix_sdk_ffi_fn_free_span"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_free_span(rt, thisVal,
                                                                args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_constructor_span_current"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_constructor_span_current"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_constructor_span_current(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_constructor_span_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_constructor_span_new"),
          5,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_constructor_span_new(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_span_enter"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_span_enter"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_method_span_enter(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_span_exit"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_span_exit"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_method_span_exit(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_span_is_none"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_span_is_none"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_method_span_is_none(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_clone_ssohandler"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_clone_ssohandler"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_clone_ssohandler(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_free_ssohandler"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_free_ssohandler"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_free_ssohandler(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_ssohandler_finish"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_ssohandler_finish"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_method_ssohandler_finish(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_ssohandler_url"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_ssohandler_url"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_method_ssohandler_url(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_clone_syncservice"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_clone_syncservice"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_clone_syncservice(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_free_syncservice"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_free_syncservice"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_free_syncservice(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_syncservice_room_list_service"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                        "syncservice_room_list_service"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_syncservice_room_list_service(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_syncservice_start"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_syncservice_start"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_method_syncservice_start(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_syncservice_state"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_syncservice_state"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_method_syncservice_state(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_syncservice_stop"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_syncservice_stop"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_method_syncservice_stop(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_clone_syncservicebuilder"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_clone_syncservicebuilder"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_clone_syncservicebuilder(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_free_syncservicebuilder"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_free_syncservicebuilder"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_free_syncservicebuilder(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_syncservicebuilder_finish"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_method_syncservicebuilder_finish"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_syncservicebuilder_finish(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_syncservicebuilder_with_cross_"
        "process_lock"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                "syncservicebuilder_with_cross_process_lock"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_syncservicebuilder_with_cross_process_lock(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_syncservicebuilder_with_utd_"
        "hook"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                    "syncservicebuilder_with_utd_hook"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_syncservicebuilder_with_utd_hook(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_clone_taskhandle"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_clone_taskhandle"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_clone_taskhandle(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_free_taskhandle"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_free_taskhandle"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_free_taskhandle(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_taskhandle_cancel"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_taskhandle_cancel"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_method_taskhandle_cancel(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_taskhandle_is_finished"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_method_taskhandle_is_finished"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_taskhandle_is_finished(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_clone_timeline"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_clone_timeline"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_clone_timeline(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_free_timeline"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_free_timeline"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_free_timeline(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_timeline_add_listener"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_timeline_add_listener"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_timeline_add_listener(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_timeline_create_message_"
        "content"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                    "timeline_create_message_content"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_timeline_create_message_content(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_timeline_create_poll"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_timeline_create_poll"),
          5,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_timeline_create_poll(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_timeline_edit"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_timeline_edit"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_method_timeline_edit(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_timeline_end_poll"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_timeline_end_poll"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_method_timeline_end_poll(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_timeline_fetch_details_for_"
        "event"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                    "timeline_fetch_details_for_event"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_timeline_fetch_details_for_event(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_timeline_fetch_members"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_method_timeline_fetch_members"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_timeline_fetch_members(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_timeline_focused_paginate_"
        "forwards"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                    "timeline_focused_paginate_forwards"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_timeline_focused_paginate_forwards(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_timeline_get_event_timeline_item_"
        "by_event_id"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_fn_method_timeline_"
                                "get_event_timeline_item_by_event_id"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_timeline_get_event_timeline_item_by_event_id(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_timeline_load_reply_details"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                        "timeline_load_reply_details"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_timeline_load_reply_details(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_timeline_mark_as_read"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_timeline_mark_as_read"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_timeline_mark_as_read(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_timeline_paginate_backwards"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                        "timeline_paginate_backwards"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_timeline_paginate_backwards(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_timeline_pin_event"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_timeline_pin_event"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_method_timeline_pin_event(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_timeline_redact_event"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_timeline_redact_event"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_timeline_redact_event(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_timeline_retry_decryption"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_method_timeline_retry_decryption"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_timeline_retry_decryption(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_timeline_send"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_timeline_send"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_method_timeline_send(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_timeline_send_audio"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_timeline_send_audio"),
          7,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_timeline_send_audio(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_timeline_send_file"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_timeline_send_file"),
          7,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_method_timeline_send_file(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_timeline_send_image"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_timeline_send_image"),
          8,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_timeline_send_image(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_timeline_send_location"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_method_timeline_send_location"),
          6,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_timeline_send_location(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_timeline_send_poll_response"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                        "timeline_send_poll_response"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_timeline_send_poll_response(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_timeline_send_read_receipt"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                        "timeline_send_read_receipt"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_timeline_send_read_receipt(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_timeline_send_reply"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_timeline_send_reply"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_timeline_send_reply(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_timeline_send_video"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_timeline_send_video"),
          8,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_timeline_send_video(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_timeline_send_voice_message"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                        "timeline_send_voice_message"),
          8,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_timeline_send_voice_message(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_timeline_subscribe_to_back_"
        "pagination_status"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_fn_method_timeline_"
                                "subscribe_to_back_pagination_status"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_timeline_subscribe_to_back_pagination_status(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_timeline_toggle_reaction"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_method_timeline_toggle_reaction"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_timeline_toggle_reaction(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_timeline_unpin_event"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_timeline_unpin_event"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_timeline_unpin_event(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_clone_timelinediff"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_clone_timelinediff"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_clone_timelinediff(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_free_timelinediff"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_free_timelinediff"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_free_timelinediff(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_timelinediff_append"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_timelinediff_append"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_timelinediff_append(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_timelinediff_change"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_timelinediff_change"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_timelinediff_change(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_timelinediff_insert"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_timelinediff_insert"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_timelinediff_insert(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_timelinediff_push_back"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_method_timelinediff_push_back"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_timelinediff_push_back(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_timelinediff_push_front"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_method_timelinediff_push_front"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_timelinediff_push_front(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_timelinediff_remove"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_timelinediff_remove"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_timelinediff_remove(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_timelinediff_reset"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_timelinediff_reset"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_method_timelinediff_reset(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_timelinediff_set"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_timelinediff_set"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_method_timelinediff_set(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_timelinediff_truncate"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_timelinediff_truncate"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_timelinediff_truncate(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_clone_timelineevent"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_clone_timelineevent"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_clone_timelineevent(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_free_timelineevent"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_free_timelineevent"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_free_timelineevent(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_timelineevent_event_id"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_method_timelineevent_event_id"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_timelineevent_event_id(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_timelineevent_event_type"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_method_timelineevent_event_type"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_timelineevent_event_type(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_timelineevent_sender_id"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_method_timelineevent_sender_id"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_timelineevent_sender_id(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_timelineevent_timestamp"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_method_timelineevent_timestamp"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_timelineevent_timestamp(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_clone_timelineeventtypefilter"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_clone_timelineeventtypefilter"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_clone_timelineeventtypefilter(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_free_timelineeventtypefilter"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_free_timelineeventtypefilter"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_free_timelineeventtypefilter(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_constructor_timelineeventtypefilter_"
        "exclude"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_constructor_"
                                    "timelineeventtypefilter_exclude"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_constructor_timelineeventtypefilter_exclude(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_constructor_timelineeventtypefilter_"
        "include"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_constructor_"
                                    "timelineeventtypefilter_include"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_constructor_timelineeventtypefilter_include(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_clone_timelineitem"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_clone_timelineitem"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_clone_timelineitem(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_free_timelineitem"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_free_timelineitem"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_free_timelineitem(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_timelineitem_as_event"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_timelineitem_as_event"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_timelineitem_as_event(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_timelineitem_as_virtual"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_method_timelineitem_as_virtual"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_timelineitem_as_virtual(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_timelineitem_fmt_debug"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_method_timelineitem_fmt_debug"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_timelineitem_fmt_debug(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_timelineitem_unique_id"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_method_timelineitem_unique_id"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_timelineitem_unique_id(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_clone_unreadnotificationscount"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_clone_unreadnotificationscount"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_clone_unreadnotificationscount(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_free_unreadnotificationscount"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_free_unreadnotificationscount"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_free_unreadnotificationscount(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_unreadnotificationscount_has_"
        "notifications"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                "unreadnotificationscount_has_notifications"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_unreadnotificationscount_has_notifications(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_unreadnotificationscount_"
        "highlight_count"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                    "unreadnotificationscount_highlight_count"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_unreadnotificationscount_highlight_count(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_unreadnotificationscount_"
        "notification_count"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_fn_method_"
                                "unreadnotificationscount_notification_count"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_method_unreadnotificationscount_notification_count(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_clone_useridentity"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_clone_useridentity"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_clone_useridentity(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_free_useridentity"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_free_useridentity"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_free_useridentity(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_useridentity_is_verified"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_method_useridentity_is_verified"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_useridentity_is_verified(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_useridentity_master_key"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_method_useridentity_master_key"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_useridentity_master_key(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_useridentity_pin"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_useridentity_pin"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_method_useridentity_pin(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_clone_widgetdriver"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_clone_widgetdriver"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_clone_widgetdriver(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_free_widgetdriver"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_free_widgetdriver"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_free_widgetdriver(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_widgetdriver_run"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_method_widgetdriver_run"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_method_widgetdriver_run(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_clone_widgetdriverhandle"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_clone_widgetdriverhandle"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_clone_widgetdriverhandle(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_free_widgetdriverhandle"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_free_widgetdriverhandle"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_free_widgetdriverhandle(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_widgetdriverhandle_recv"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_method_widgetdriverhandle_recv"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_widgetdriverhandle_recv(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_method_widgetdriverhandle_send"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_method_widgetdriverhandle_send"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_method_widgetdriverhandle_send(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_func_content_without_relation_from_"
        "message"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_func_"
                                    "content_without_relation_from_message"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_func_content_without_relation_from_message(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_func_create_caption_edit"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_func_create_caption_edit"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_func_create_caption_edit(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_func_gen_transaction_id"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_func_gen_transaction_id"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_func_gen_transaction_id(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_func_generate_webview_url"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_func_generate_webview_url"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_func_generate_webview_url(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_func_get_element_call_required_"
        "permissions"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_func_get_"
                                    "element_call_required_permissions"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_func_get_element_call_required_permissions(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_func_is_room_alias_format_valid"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_func_is_room_alias_format_valid"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_func_is_room_alias_format_valid(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_func_log_event"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_func_log_event"),
          5,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_func_log_event(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_func_make_element_well_known"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_func_make_element_well_known"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_func_make_element_well_known(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_func_make_widget_driver"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_func_make_widget_driver"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_func_make_widget_driver(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_func_matrix_to_room_alias_permalink"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_func_"
                                        "matrix_to_room_alias_permalink"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_func_matrix_to_room_alias_permalink(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_func_matrix_to_user_permalink"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_func_matrix_to_user_permalink"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_func_matrix_to_user_permalink(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_func_message_event_content_from_html"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_func_"
                                        "message_event_content_from_html"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_func_message_event_content_from_html(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_func_message_event_content_from_html_as_"
        "emote"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_func_"
                                    "message_event_content_from_html_as_emote"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_func_message_event_content_from_html_as_emote(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_func_message_event_content_from_"
        "markdown"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_func_"
                                    "message_event_content_from_markdown"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_func_message_event_content_from_markdown(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_func_message_event_content_from_"
        "markdown_as_emote"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_fn_func_message_"
                                "event_content_from_markdown_as_emote"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_func_message_event_content_from_markdown_as_emote(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_func_message_event_content_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_func_message_event_content_new"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_func_message_event_content_new(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_func_new_virtual_element_call_widget"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_func_"
                                        "new_virtual_element_call_widget"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_func_new_virtual_element_call_widget(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_func_parse_matrix_entity_from"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_fn_func_parse_matrix_entity_from"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_func_parse_matrix_entity_from(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_func_room_alias_name_from_room_display_"
        "name"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_func_room_"
                                    "alias_name_from_room_display_name"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_func_room_alias_name_from_room_display_name(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_func_sdk_git_sha"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_func_sdk_git_sha"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_func_sdk_git_sha(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_func_setup_tracing"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_func_setup_tracing"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_fn_func_setup_tracing(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_func_suggested_power_level_for_role"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_func_"
                                        "suggested_power_level_for_role"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_func_suggested_power_level_for_role(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_func_suggested_role_for_power_level"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_func_"
                                        "suggested_role_for_power_level"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_func_suggested_role_for_power_level(
                    rt, thisVal, args, count);
          });
  props["ubrn_ffi_matrix_sdk_ffi_rust_future_poll_u8"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_matrix_sdk_ffi_rust_future_poll_u8"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_matrix_sdk_ffi_rust_future_poll_u8(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_matrix_sdk_ffi_rust_future_cancel_u8"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_matrix_sdk_ffi_rust_future_cancel_u8"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_matrix_sdk_ffi_rust_future_cancel_u8(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_matrix_sdk_ffi_rust_future_free_u8"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_matrix_sdk_ffi_rust_future_free_u8"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_matrix_sdk_ffi_rust_future_free_u8(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_matrix_sdk_ffi_rust_future_complete_u8"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_matrix_sdk_ffi_rust_future_complete_u8"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_matrix_sdk_ffi_rust_future_complete_u8(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_matrix_sdk_ffi_rust_future_poll_i8"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_matrix_sdk_ffi_rust_future_poll_i8"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_matrix_sdk_ffi_rust_future_poll_i8(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_matrix_sdk_ffi_rust_future_cancel_i8"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_matrix_sdk_ffi_rust_future_cancel_i8"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_matrix_sdk_ffi_rust_future_cancel_i8(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_matrix_sdk_ffi_rust_future_free_i8"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_matrix_sdk_ffi_rust_future_free_i8"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_matrix_sdk_ffi_rust_future_free_i8(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_matrix_sdk_ffi_rust_future_complete_i8"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_matrix_sdk_ffi_rust_future_complete_i8"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_matrix_sdk_ffi_rust_future_complete_i8(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_matrix_sdk_ffi_rust_future_poll_u16"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_matrix_sdk_ffi_rust_future_poll_u16"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_matrix_sdk_ffi_rust_future_poll_u16(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_matrix_sdk_ffi_rust_future_cancel_u16"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_matrix_sdk_ffi_rust_future_cancel_u16"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_matrix_sdk_ffi_rust_future_cancel_u16(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_matrix_sdk_ffi_rust_future_free_u16"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_matrix_sdk_ffi_rust_future_free_u16"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_matrix_sdk_ffi_rust_future_free_u16(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_matrix_sdk_ffi_rust_future_complete_u16"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_matrix_sdk_ffi_rust_future_complete_u16"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_matrix_sdk_ffi_rust_future_complete_u16(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_matrix_sdk_ffi_rust_future_poll_i16"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_matrix_sdk_ffi_rust_future_poll_i16"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_matrix_sdk_ffi_rust_future_poll_i16(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_matrix_sdk_ffi_rust_future_cancel_i16"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_matrix_sdk_ffi_rust_future_cancel_i16"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_matrix_sdk_ffi_rust_future_cancel_i16(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_matrix_sdk_ffi_rust_future_free_i16"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_matrix_sdk_ffi_rust_future_free_i16"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_matrix_sdk_ffi_rust_future_free_i16(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_matrix_sdk_ffi_rust_future_complete_i16"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_matrix_sdk_ffi_rust_future_complete_i16"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_matrix_sdk_ffi_rust_future_complete_i16(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_matrix_sdk_ffi_rust_future_poll_u32"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_matrix_sdk_ffi_rust_future_poll_u32"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_matrix_sdk_ffi_rust_future_poll_u32(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_matrix_sdk_ffi_rust_future_cancel_u32"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_matrix_sdk_ffi_rust_future_cancel_u32"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_matrix_sdk_ffi_rust_future_cancel_u32(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_matrix_sdk_ffi_rust_future_free_u32"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_matrix_sdk_ffi_rust_future_free_u32"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_matrix_sdk_ffi_rust_future_free_u32(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_matrix_sdk_ffi_rust_future_complete_u32"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_matrix_sdk_ffi_rust_future_complete_u32"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_matrix_sdk_ffi_rust_future_complete_u32(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_matrix_sdk_ffi_rust_future_poll_i32"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_matrix_sdk_ffi_rust_future_poll_i32"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_matrix_sdk_ffi_rust_future_poll_i32(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_matrix_sdk_ffi_rust_future_cancel_i32"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_matrix_sdk_ffi_rust_future_cancel_i32"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_matrix_sdk_ffi_rust_future_cancel_i32(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_matrix_sdk_ffi_rust_future_free_i32"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_matrix_sdk_ffi_rust_future_free_i32"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_matrix_sdk_ffi_rust_future_free_i32(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_matrix_sdk_ffi_rust_future_complete_i32"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_matrix_sdk_ffi_rust_future_complete_i32"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_matrix_sdk_ffi_rust_future_complete_i32(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_matrix_sdk_ffi_rust_future_poll_u64"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_matrix_sdk_ffi_rust_future_poll_u64"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_matrix_sdk_ffi_rust_future_poll_u64(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_matrix_sdk_ffi_rust_future_cancel_u64"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_matrix_sdk_ffi_rust_future_cancel_u64"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_matrix_sdk_ffi_rust_future_cancel_u64(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_matrix_sdk_ffi_rust_future_free_u64"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_matrix_sdk_ffi_rust_future_free_u64"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_matrix_sdk_ffi_rust_future_free_u64(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_matrix_sdk_ffi_rust_future_complete_u64"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_matrix_sdk_ffi_rust_future_complete_u64"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_matrix_sdk_ffi_rust_future_complete_u64(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_matrix_sdk_ffi_rust_future_poll_i64"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_matrix_sdk_ffi_rust_future_poll_i64"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_matrix_sdk_ffi_rust_future_poll_i64(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_matrix_sdk_ffi_rust_future_cancel_i64"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_matrix_sdk_ffi_rust_future_cancel_i64"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_matrix_sdk_ffi_rust_future_cancel_i64(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_matrix_sdk_ffi_rust_future_free_i64"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_matrix_sdk_ffi_rust_future_free_i64"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_matrix_sdk_ffi_rust_future_free_i64(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_matrix_sdk_ffi_rust_future_complete_i64"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_matrix_sdk_ffi_rust_future_complete_i64"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_matrix_sdk_ffi_rust_future_complete_i64(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_matrix_sdk_ffi_rust_future_poll_f32"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_matrix_sdk_ffi_rust_future_poll_f32"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_matrix_sdk_ffi_rust_future_poll_f32(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_matrix_sdk_ffi_rust_future_cancel_f32"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_matrix_sdk_ffi_rust_future_cancel_f32"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_matrix_sdk_ffi_rust_future_cancel_f32(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_matrix_sdk_ffi_rust_future_free_f32"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_matrix_sdk_ffi_rust_future_free_f32"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_matrix_sdk_ffi_rust_future_free_f32(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_matrix_sdk_ffi_rust_future_complete_f32"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_matrix_sdk_ffi_rust_future_complete_f32"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_matrix_sdk_ffi_rust_future_complete_f32(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_matrix_sdk_ffi_rust_future_poll_f64"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_matrix_sdk_ffi_rust_future_poll_f64"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_matrix_sdk_ffi_rust_future_poll_f64(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_matrix_sdk_ffi_rust_future_cancel_f64"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_matrix_sdk_ffi_rust_future_cancel_f64"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_matrix_sdk_ffi_rust_future_cancel_f64(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_matrix_sdk_ffi_rust_future_free_f64"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_matrix_sdk_ffi_rust_future_free_f64"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_matrix_sdk_ffi_rust_future_free_f64(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_matrix_sdk_ffi_rust_future_complete_f64"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_matrix_sdk_ffi_rust_future_complete_f64"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_matrix_sdk_ffi_rust_future_complete_f64(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_matrix_sdk_ffi_rust_future_poll_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_matrix_sdk_ffi_rust_future_poll_pointer"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_matrix_sdk_ffi_rust_future_poll_pointer(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_matrix_sdk_ffi_rust_future_cancel_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_matrix_sdk_ffi_rust_future_cancel_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_matrix_sdk_ffi_rust_future_cancel_pointer(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_matrix_sdk_ffi_rust_future_free_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_matrix_sdk_ffi_rust_future_free_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_matrix_sdk_ffi_rust_future_free_pointer(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_matrix_sdk_ffi_rust_future_complete_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_matrix_sdk_ffi_rust_future_complete_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_matrix_sdk_ffi_rust_future_complete_pointer(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_matrix_sdk_ffi_rust_future_poll_rust_buffer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_matrix_sdk_ffi_rust_future_poll_rust_buffer"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_matrix_sdk_ffi_rust_future_poll_rust_buffer(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_matrix_sdk_ffi_rust_future_cancel_rust_buffer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_matrix_sdk_ffi_rust_future_cancel_rust_buffer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_matrix_sdk_ffi_rust_future_cancel_rust_buffer(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_matrix_sdk_ffi_rust_future_free_rust_buffer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_matrix_sdk_ffi_rust_future_free_rust_buffer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_matrix_sdk_ffi_rust_future_free_rust_buffer(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_matrix_sdk_ffi_rust_future_complete_rust_buffer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_matrix_sdk_ffi_rust_future_complete_rust_buffer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_ffi_matrix_sdk_ffi_rust_future_complete_rust_buffer(
                    rt, thisVal, args, count);
          });
  props["ubrn_ffi_matrix_sdk_ffi_rust_future_poll_void"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_matrix_sdk_ffi_rust_future_poll_void"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_matrix_sdk_ffi_rust_future_poll_void(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_matrix_sdk_ffi_rust_future_cancel_void"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_matrix_sdk_ffi_rust_future_cancel_void"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_matrix_sdk_ffi_rust_future_cancel_void(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_matrix_sdk_ffi_rust_future_free_void"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_matrix_sdk_ffi_rust_future_free_void"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_matrix_sdk_ffi_rust_future_free_void(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_matrix_sdk_ffi_rust_future_complete_void"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_matrix_sdk_ffi_rust_future_complete_void"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_matrix_sdk_ffi_rust_future_complete_void(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_func_content_without_relation_"
        "from_message"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_func_"
                                    "content_without_relation_from_message"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_func_content_without_relation_from_message(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_func_create_caption_edit"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_checksum_func_create_caption_edit"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_func_create_caption_edit(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_func_gen_transaction_id"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_checksum_func_gen_transaction_id"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_func_gen_transaction_id(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_func_generate_webview_url"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_checksum_func_generate_webview_url"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_func_generate_webview_url(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_func_get_element_call_required_"
        "permissions"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_func_"
                                    "get_element_call_required_permissions"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_func_get_element_call_required_permissions(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_func_is_room_alias_format_valid"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "func_is_room_alias_format_valid"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_func_is_room_alias_format_valid(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_func_log_event"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_func_log_event"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_checksum_func_log_event(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_func_make_element_well_known"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "func_make_element_well_known"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_func_make_element_well_known(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_func_make_widget_driver"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_checksum_func_make_widget_driver"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_func_make_widget_driver(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_func_matrix_to_room_alias_"
        "permalink"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_func_"
                                    "matrix_to_room_alias_permalink"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_func_matrix_to_room_alias_permalink(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_func_matrix_to_user_permalink"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "func_matrix_to_user_permalink"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_func_matrix_to_user_permalink(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_func_message_event_content_from_"
        "html"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_func_"
                                    "message_event_content_from_html"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_func_message_event_content_from_html(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_func_message_event_content_from_"
        "html_as_emote"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_func_"
                                    "message_event_content_from_html_as_emote"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_func_message_event_content_from_html_as_emote(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_func_message_event_content_from_"
        "markdown"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_func_"
                                    "message_event_content_from_markdown"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_func_message_event_content_from_markdown(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_func_message_event_content_from_"
        "markdown_as_emote"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_checksum_func_"
                                "message_event_content_from_markdown_as_emote"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_func_message_event_content_from_markdown_as_emote(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_func_message_event_content_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "func_message_event_content_new"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_func_message_event_content_new(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_func_new_virtual_element_call_"
        "widget"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_func_"
                                    "new_virtual_element_call_widget"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_func_new_virtual_element_call_widget(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_func_parse_matrix_entity_from"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "func_parse_matrix_entity_from"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_func_parse_matrix_entity_from(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_func_room_alias_name_from_room_"
        "display_name"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_func_"
                                    "room_alias_name_from_room_display_name"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_func_room_alias_name_from_room_display_name(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_func_sdk_git_sha"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_func_sdk_git_sha"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_checksum_func_sdk_git_sha(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_func_setup_tracing"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_func_setup_tracing"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_checksum_func_setup_tracing(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_func_suggested_power_level_for_"
        "role"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_func_"
                                    "suggested_power_level_for_role"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_func_suggested_power_level_for_role(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_func_suggested_role_for_power_"
        "level"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_func_"
                                    "suggested_role_for_power_level"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_func_suggested_role_for_power_level(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_abort_oidc_auth"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "method_client_abort_oidc_auth"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_client_abort_oidc_auth(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_account_data"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_account_data"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_client_account_data(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_account_url"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_account_url"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_client_account_url(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_available_sliding_"
        "sync_versions"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                                "client_available_sliding_sync_versions"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_client_available_sliding_sync_versions(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_avatar_url"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_avatar_url"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_client_avatar_url(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_await_room_remote_"
        "echo"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_client_await_room_remote_echo"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_client_await_room_remote_echo(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_cached_avatar_url"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "method_client_cached_avatar_url"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_client_cached_avatar_url(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_can_deactivate_"
        "account"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_client_can_deactivate_account"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_client_can_deactivate_account(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_create_room"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_create_room"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_client_create_room(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_create_room_alias"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "method_client_create_room_alias"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_client_create_room_alias(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_custom_login_with_"
        "jwt"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_client_custom_login_with_jwt"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_client_custom_login_with_jwt(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_deactivate_"
        "account"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_client_deactivate_account"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_client_deactivate_account(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_delete_pusher"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "method_client_delete_pusher"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_client_delete_pusher(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_device_id"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_device_id"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_client_device_id(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_display_name"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_display_name"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_client_display_name(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_enable_all_send_"
        "queues"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_client_enable_all_send_queues"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_client_enable_all_send_queues(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_encryption"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_encryption"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_client_encryption(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_get_dm_room"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_get_dm_room"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_client_get_dm_room(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_get_media_content"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "method_client_get_media_content"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_client_get_media_content(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_get_media_file"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "method_client_get_media_file"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_client_get_media_file(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_get_media_"
        "thumbnail"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_client_get_media_thumbnail"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_client_get_media_thumbnail(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_get_notification_"
        "settings"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_client_get_notification_settings"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_client_get_notification_settings(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_get_profile"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_get_profile"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_client_get_profile(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_get_recently_"
        "visited_rooms"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_client_get_recently_visited_rooms"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_client_get_recently_visited_rooms(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_get_room_preview_"
        "from_room_alias"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                                "client_get_room_preview_from_room_alias"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_client_get_room_preview_from_room_alias(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_get_room_preview_"
        "from_room_id"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                                "client_get_room_preview_from_room_id"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_client_get_room_preview_from_room_id(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_get_session_"
        "verification_controller"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                                "client_get_session_verification_controller"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_client_get_session_verification_controller(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_get_url"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_get_url"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_client_get_url(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_homeserver"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_homeserver"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_client_homeserver(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_homeserver_login_"
        "details"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_client_homeserver_login_details"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_client_homeserver_login_details(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_ignore_user"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_ignore_user"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_client_ignore_user(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_ignored_users"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "method_client_ignored_users"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_client_ignored_users(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_is_room_alias_"
        "available"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_client_is_room_alias_available"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_client_is_room_alias_available(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_join_room_by_id"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "method_client_join_room_by_id"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_client_join_room_by_id(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_join_room_by_id_or_"
        "alias"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_client_join_room_by_id_or_alias"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_client_join_room_by_id_or_alias(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_knock"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_knock"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_checksum_method_client_knock(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_login"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_login"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_checksum_method_client_login(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_login_with_email"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "method_client_login_with_email"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_client_login_with_email(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_login_with_oidc_"
        "callback"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_client_login_with_oidc_callback"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_client_login_with_oidc_callback(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_logout"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_logout"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_client_logout(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_notification_"
        "client"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_client_notification_client"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_client_notification_client(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_remove_avatar"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "method_client_remove_avatar"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_client_remove_avatar(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_reset_server_"
        "capabilities"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_client_reset_server_capabilities"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_client_reset_server_capabilities(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_resolve_room_"
        "alias"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_client_resolve_room_alias"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_client_resolve_room_alias(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_restore_session"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "method_client_restore_session"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_client_restore_session(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_room_alias_exists"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "method_client_room_alias_exists"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_client_room_alias_exists(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_room_directory_"
        "search"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_client_room_directory_search"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_client_room_directory_search(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_rooms"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_rooms"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_checksum_method_client_rooms(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_search_users"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_search_users"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_client_search_users(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_server"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_server"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_client_server(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_session"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_session"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_client_session(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_set_account_data"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "method_client_set_account_data"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_client_set_account_data(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_set_delegate"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_set_delegate"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_client_set_delegate(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_set_display_name"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "method_client_set_display_name"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_client_set_display_name(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_set_pusher"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_set_pusher"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_client_set_pusher(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_sliding_sync_"
        "version"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_client_sliding_sync_version"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_client_sliding_sync_version(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_start_sso_login"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "method_client_start_sso_login"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_client_start_sso_login(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_subscribe_to_"
        "ignored_users"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_client_subscribe_to_ignored_users"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_client_subscribe_to_ignored_users(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_subscribe_to_send_"
        "queue_status"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                                "client_subscribe_to_send_queue_status"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_client_subscribe_to_send_queue_status(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_sync_service"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_sync_service"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_client_sync_service(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_track_recently_"
        "visited_room"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                                "client_track_recently_visited_room"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_client_track_recently_visited_room(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_unignore_user"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "method_client_unignore_user"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_client_unignore_user(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_upload_avatar"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "method_client_upload_avatar"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_client_upload_avatar(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_upload_media"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_upload_media"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_client_upload_media(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_url_for_oidc"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_url_for_oidc"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_client_url_for_oidc(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_user_id"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_user_id"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_client_user_id(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_client_user_id_server_"
        "name"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_client_user_id_server_name"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_client_user_id_server_name(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_add_root_"
        "certificates"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                                "clientbuilder_add_root_certificates"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_add_root_certificates(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_auto_enable_"
        "backups"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_clientbuilder_auto_enable_backups"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_auto_enable_backups(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_auto_enable_"
        "cross_signing"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                                "clientbuilder_auto_enable_cross_signing"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_auto_enable_cross_signing(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_backup_"
        "download_strategy"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                                "clientbuilder_backup_download_strategy"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_backup_download_strategy(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_build"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_build"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_build(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_build_with_"
        "qr_code"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_clientbuilder_build_with_qr_code"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_build_with_qr_code(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_cross_"
        "process_store_locks_holder_name"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(
          rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_cross_"
              "process_store_locks_holder_name"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_cross_process_store_locks_holder_name(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_disable_"
        "automatic_token_refresh"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(
          rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_"
              "disable_automatic_token_refresh"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_disable_automatic_token_refresh(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_disable_"
        "built_in_root_certificates"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(
          rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_"
              "disable_built_in_root_certificates"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_disable_built_in_root_certificates(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_disable_ssl_"
        "verification"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                                "clientbuilder_disable_ssl_verification"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_disable_ssl_verification(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_enable_oidc_"
        "refresh_lock"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                                "clientbuilder_enable_oidc_refresh_lock"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_enable_oidc_refresh_lock(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_homeserver_"
        "url"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_clientbuilder_homeserver_url"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_homeserver_url(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_passphrase"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "method_clientbuilder_passphrase"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_passphrase(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_proxy"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_proxy"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_proxy(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_request_"
        "config"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_clientbuilder_request_config"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_request_config(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_room_"
        "decryption_trust_requirement"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(
          rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_room_"
              "decryption_trust_requirement"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_room_decryption_trust_requirement(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_room_key_"
        "recipient_strategy"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                                "clientbuilder_room_key_recipient_strategy"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_room_key_recipient_strategy(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_server_"
        "name"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_clientbuilder_server_name"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_server_name(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_server_name_"
        "or_homeserver_url"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                                "clientbuilder_server_name_or_homeserver_url"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_server_name_or_homeserver_url(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_session_"
        "paths"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_clientbuilder_session_paths"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_session_paths(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_set_session_"
        "delegate"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                                "clientbuilder_set_session_delegate"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_set_session_delegate(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_sliding_sync_"
        "version_builder"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                                "clientbuilder_sliding_sync_version_builder"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_sliding_sync_version_builder(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_use_event_"
        "cache_persistent_storage"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(
          rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_use_"
              "event_cache_persistent_storage"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_use_event_cache_persistent_storage(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_user_agent"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "method_clientbuilder_user_agent"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_user_agent(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_username"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "method_clientbuilder_username"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_username(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_encryption_backup_exists_"
        "on_server"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                                "encryption_backup_exists_on_server"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_encryption_backup_exists_on_server(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_encryption_backup_state"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "method_encryption_backup_state"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_encryption_backup_state(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_encryption_backup_state_"
        "listener"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_encryption_backup_state_listener"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_encryption_backup_state_listener(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_encryption_curve25519_"
        "key"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_encryption_curve25519_key"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_encryption_curve25519_key(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_encryption_disable_"
        "recovery"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_encryption_disable_recovery"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_encryption_disable_recovery(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_encryption_ed25519_key"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "method_encryption_ed25519_key"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_encryption_ed25519_key(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_encryption_enable_"
        "backups"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_encryption_enable_backups"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_encryption_enable_backups(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_encryption_enable_"
        "recovery"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_encryption_enable_recovery"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_encryption_enable_recovery(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_encryption_is_last_"
        "device"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_encryption_is_last_device"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_encryption_is_last_device(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_encryption_recover"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_checksum_method_encryption_recover"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_encryption_recover(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_encryption_recover_and_"
        "reset"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_encryption_recover_and_reset"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_encryption_recover_and_reset(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_encryption_recovery_"
        "state"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_encryption_recovery_state"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_encryption_recovery_state(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_encryption_recovery_state_"
        "listener"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                                "encryption_recovery_state_listener"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_encryption_recovery_state_listener(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_encryption_reset_"
        "identity"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_encryption_reset_identity"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_encryption_reset_identity(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_encryption_reset_recovery_"
        "key"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_encryption_reset_recovery_key"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_encryption_reset_recovery_key(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_encryption_user_identity"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "method_encryption_user_identity"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_encryption_user_identity(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_encryption_verification_"
        "state"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_encryption_verification_state"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_encryption_verification_state(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_encryption_verification_"
        "state_listener"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                                "encryption_verification_state_listener"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_encryption_verification_state_listener(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_encryption_wait_for_backup_"
        "upload_steady_state"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(
          rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_encryption_wait_for_"
              "backup_upload_steady_state"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_encryption_wait_for_backup_upload_steady_state(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_encryption_wait_for_e2ee_"
        "initialization_tasks"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(
          rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_encryption_wait_for_"
              "e2ee_initialization_tasks"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_encryption_wait_for_e2ee_initialization_tasks(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_homeserverlogindetails_"
        "sliding_sync_version"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                                "homeserverlogindetails_sliding_sync_version"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_homeserverlogindetails_sliding_sync_version(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_homeserverlogindetails_"
        "supported_oidc_prompts"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(
          rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
              "homeserverlogindetails_supported_oidc_prompts"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_homeserverlogindetails_supported_oidc_prompts(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_homeserverlogindetails_"
        "supports_oidc_login"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                                "homeserverlogindetails_supports_oidc_login"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_homeserverlogindetails_supports_oidc_login(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_homeserverlogindetails_"
        "supports_password_login"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(
          rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
              "homeserverlogindetails_supports_password_login"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_homeserverlogindetails_supports_password_login(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_homeserverlogindetails_"
        "url"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_homeserverlogindetails_url"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_homeserverlogindetails_url(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_identityresethandle_auth_"
        "type"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_identityresethandle_auth_type"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_identityresethandle_auth_type(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_identityresethandle_"
        "cancel"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_identityresethandle_cancel"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_identityresethandle_cancel(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_identityresethandle_"
        "reset"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_identityresethandle_reset"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_identityresethandle_reset(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_inreplytodetails_event"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "method_inreplytodetails_event"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_inreplytodetails_event(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_inreplytodetails_event_"
        "id"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_inreplytodetails_event_id"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_inreplytodetails_event_id(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_knockrequestactions_"
        "accept"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_knockrequestactions_accept"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_knockrequestactions_accept(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_knockrequestactions_"
        "decline"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_knockrequestactions_decline"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_knockrequestactions_decline(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_knockrequestactions_"
        "decline_and_ban"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                                "knockrequestactions_decline_and_ban"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_knockrequestactions_decline_and_ban(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_knockrequestactions_mark_"
        "as_seen"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_knockrequestactions_mark_as_seen"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_knockrequestactions_mark_as_seen(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_lazytimelineitemprovider_"
        "debug_info"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                                "lazytimelineitemprovider_debug_info"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_lazytimelineitemprovider_debug_info(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_lazytimelineitemprovider_"
        "get_send_handle"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                                "lazytimelineitemprovider_get_send_handle"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_lazytimelineitemprovider_get_send_handle(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_lazytimelineitemprovider_"
        "get_shields"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                                "lazytimelineitemprovider_get_shields"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_lazytimelineitemprovider_get_shields(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_mediafilehandle_path"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "method_mediafilehandle_path"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_mediafilehandle_path(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_mediafilehandle_persist"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "method_mediafilehandle_persist"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_mediafilehandle_persist(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_mediasource_to_json"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_checksum_method_mediasource_to_json"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_mediasource_to_json(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_mediasource_url"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_mediasource_url"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_mediasource_url(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_notificationclient_get_"
        "notification"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                                "notificationclient_get_notification"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_notificationclient_get_notification(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_can_"
        "homeserver_push_encrypted_event_to_device"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_"
              "can_homeserver_push_encrypted_event_to_device"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_can_homeserver_push_encrypted_event_to_device(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_can_"
        "push_encrypted_event_to_device"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(
          rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_"
              "can_push_encrypted_event_to_device"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_can_push_encrypted_event_to_device(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_"
        "contains_keywords_rules"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                                "notificationsettings_contains_keywords_rules"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_contains_keywords_rules(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_get_"
        "default_room_notification_mode"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(
          rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_"
              "get_default_room_notification_mode"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_get_default_room_notification_mode(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_get_"
        "room_notification_settings"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(
          rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_"
              "get_room_notification_settings"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_get_room_notification_settings(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_get_"
        "rooms_with_user_defined_rules"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(
          rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_"
              "get_rooms_with_user_defined_rules"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_get_rooms_with_user_defined_rules(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_get_"
        "user_defined_room_notification_mode"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_"
              "get_user_defined_room_notification_mode"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_get_user_defined_room_notification_mode(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_is_"
        "call_enabled"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                                "notificationsettings_is_call_enabled"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_is_call_enabled(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_is_"
        "invite_for_me_enabled"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(
          rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_"
              "is_invite_for_me_enabled"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_is_invite_for_me_enabled(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_is_"
        "room_mention_enabled"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                                "notificationsettings_is_room_mention_enabled"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_is_room_mention_enabled(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_is_"
        "user_mention_enabled"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                                "notificationsettings_is_user_mention_enabled"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_is_user_mention_enabled(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_"
        "restore_default_room_notification_mode"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_"
              "restore_default_room_notification_mode"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_restore_default_room_notification_mode(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_set_"
        "call_enabled"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                                "notificationsettings_set_call_enabled"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_set_call_enabled(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_set_"
        "default_room_notification_mode"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(
          rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_"
              "set_default_room_notification_mode"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_set_default_room_notification_mode(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_set_"
        "delegate"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_notificationsettings_set_delegate"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_set_delegate(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_set_"
        "invite_for_me_enabled"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(
          rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_"
              "set_invite_for_me_enabled"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_set_invite_for_me_enabled(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_set_"
        "room_mention_enabled"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(
          rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_"
              "set_room_mention_enabled"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_set_room_mention_enabled(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_set_"
        "room_notification_mode"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(
          rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_"
              "set_room_notification_mode"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_set_room_notification_mode(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_set_"
        "user_mention_enabled"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(
          rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_"
              "set_user_mention_enabled"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_set_user_mention_enabled(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_"
        "unmute_room"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_notificationsettings_unmute_room"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_unmute_room(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_active_members_"
        "count"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_room_active_members_count"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_room_active_members_count(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_active_room_call_"
        "participants"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                                "room_active_room_call_participants"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_room_active_room_call_participants(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_alternative_aliases"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "method_room_alternative_aliases"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_room_alternative_aliases(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_apply_power_level_"
        "changes"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_room_apply_power_level_changes"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_room_apply_power_level_changes(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_avatar_url"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_avatar_url"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_room_avatar_url(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_ban_user"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_ban_user"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_room_ban_user(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_can_user_ban"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_can_user_ban"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_room_can_user_ban(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_can_user_invite"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "method_room_can_user_invite"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_room_can_user_invite(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_can_user_kick"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_can_user_kick"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_room_can_user_kick(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_can_user_pin_unpin"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "method_room_can_user_pin_unpin"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_room_can_user_pin_unpin(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_can_user_redact_"
        "other"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_room_can_user_redact_other"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_room_can_user_redact_other(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_can_user_redact_own"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "method_room_can_user_redact_own"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_room_can_user_redact_own(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_can_user_send_"
        "message"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_room_can_user_send_message"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_room_can_user_send_message(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_can_user_send_state"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "method_room_can_user_send_state"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_room_can_user_send_state(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_can_user_trigger_room_"
        "notification"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                                "room_can_user_trigger_room_notification"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_room_can_user_trigger_room_notification(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_canonical_alias"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "method_room_canonical_alias"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_room_canonical_alias(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_clear_composer_"
        "draft"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_room_clear_composer_draft"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_room_clear_composer_draft(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_clear_event_cache_"
        "storage"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_room_clear_event_cache_storage"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_room_clear_event_cache_storage(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_discard_room_key"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "method_room_discard_room_key"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_room_discard_room_key(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_display_name"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_display_name"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_room_display_name(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_edit"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_edit"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_checksum_method_room_edit(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_enable_send_queue"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "method_room_enable_send_queue"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_room_enable_send_queue(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_get_power_levels"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "method_room_get_power_levels"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_room_get_power_levels(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_has_active_room_"
        "call"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_room_has_active_room_call"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_room_has_active_room_call(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_heroes"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_heroes"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_checksum_method_room_heroes(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_id"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_id"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_checksum_method_room_id(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_ignore_device_trust_"
        "and_resend"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                                "room_ignore_device_trust_and_resend"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_room_ignore_device_trust_and_resend(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_ignore_user"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_ignore_user"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_room_ignore_user(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_invite_user_by_id"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "method_room_invite_user_by_id"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_room_invite_user_by_id(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_invited_members_"
        "count"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_room_invited_members_count"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_room_invited_members_count(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_inviter"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_inviter"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_checksum_method_room_inviter(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_is_direct"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_is_direct"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_room_is_direct(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_is_encrypted"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_is_encrypted"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_room_is_encrypted(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_is_public"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_is_public"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_room_is_public(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_is_send_queue_"
        "enabled"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_room_is_send_queue_enabled"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_room_is_send_queue_enabled(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_is_space"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_is_space"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_room_is_space(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_is_tombstoned"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_is_tombstoned"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_room_is_tombstoned(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_join"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_join"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_checksum_method_room_join(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_joined_members_"
        "count"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_room_joined_members_count"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_room_joined_members_count(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_kick_user"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_kick_user"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_room_kick_user(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_leave"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_leave"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_checksum_method_room_leave(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_load_composer_draft"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "method_room_load_composer_draft"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_room_load_composer_draft(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_mark_as_read"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_mark_as_read"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_room_mark_as_read(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_matrix_to_event_"
        "permalink"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_room_matrix_to_event_permalink"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_room_matrix_to_event_permalink(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_matrix_to_permalink"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "method_room_matrix_to_permalink"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_room_matrix_to_permalink(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_member"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_member"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_checksum_method_room_member(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_member_avatar_url"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "method_room_member_avatar_url"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_room_member_avatar_url(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_member_display_name"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "method_room_member_display_name"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_room_member_display_name(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_members"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_members"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_checksum_method_room_members(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_members_no_sync"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "method_room_members_no_sync"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_room_members_no_sync(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_membership"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_membership"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_room_membership(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_message_filtered_"
        "timeline"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_room_message_filtered_timeline"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_room_message_filtered_timeline(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_own_user_id"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_own_user_id"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_room_own_user_id(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_pinned_events_"
        "timeline"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_room_pinned_events_timeline"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_room_pinned_events_timeline(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_raw_name"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_raw_name"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_room_raw_name(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_redact"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_redact"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_checksum_method_room_redact(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_remove_avatar"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_remove_avatar"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_room_remove_avatar(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_report_content"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_report_content"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_room_report_content(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_reset_power_levels"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "method_room_reset_power_levels"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_room_reset_power_levels(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_room_events_debug_"
        "string"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_room_room_events_debug_string"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_room_room_events_debug_string(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_room_info"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_room_info"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_room_room_info(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_save_composer_draft"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "method_room_save_composer_draft"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_room_save_composer_draft(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_send_call_"
        "notification"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_room_send_call_notification"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_room_send_call_notification(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_send_call_"
        "notification_if_needed"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                                "room_send_call_notification_if_needed"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_room_send_call_notification_if_needed(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_send_raw"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_send_raw"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_room_send_raw(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_set_is_favourite"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "method_room_set_is_favourite"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_room_set_is_favourite(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_set_is_low_priority"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "method_room_set_is_low_priority"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_room_set_is_low_priority(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_set_name"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_set_name"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_room_set_name(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_set_topic"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_set_topic"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_room_set_topic(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_set_unread_flag"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "method_room_set_unread_flag"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_room_set_unread_flag(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_subscribe_to_identity_"
        "status_changes"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                                "room_subscribe_to_identity_status_changes"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_room_subscribe_to_identity_status_changes(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_subscribe_to_knock_"
        "requests"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_room_subscribe_to_knock_requests"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_room_subscribe_to_knock_requests(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_subscribe_to_room_"
        "info_updates"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                                "room_subscribe_to_room_info_updates"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_room_subscribe_to_room_info_updates(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_subscribe_to_typing_"
        "notifications"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                                "room_subscribe_to_typing_notifications"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_room_subscribe_to_typing_notifications(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_suggested_role_for_"
        "user"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_room_suggested_role_for_user"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_room_suggested_role_for_user(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_timeline"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_timeline"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_room_timeline(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_timeline_focused_on_"
        "event"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_room_timeline_focused_on_event"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_room_timeline_focused_on_event(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_topic"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_topic"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_checksum_method_room_topic(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_typing_notice"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_typing_notice"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_room_typing_notice(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_unban_user"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_unban_user"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_room_unban_user(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_update_power_levels_"
        "for_users"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                                "room_update_power_levels_for_users"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_room_update_power_levels_for_users(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_upload_avatar"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_upload_avatar"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_room_upload_avatar(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_room_withdraw_verification_"
        "and_resend"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                                "room_withdraw_verification_and_resend"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_room_withdraw_verification_and_resend(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_roomdirectorysearch_is_at_"
        "last_page"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                                "roomdirectorysearch_is_at_last_page"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_roomdirectorysearch_is_at_last_page(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_roomdirectorysearch_loaded_"
        "pages"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_roomdirectorysearch_loaded_pages"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_roomdirectorysearch_loaded_pages(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_roomdirectorysearch_next_"
        "page"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_roomdirectorysearch_next_page"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_roomdirectorysearch_next_page(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_roomdirectorysearch_"
        "results"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_roomdirectorysearch_results"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_roomdirectorysearch_results(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_roomdirectorysearch_"
        "search"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_roomdirectorysearch_search"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_roomdirectorysearch_search(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_roomlist_entries_with_"
        "dynamic_adapters"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                                "roomlist_entries_with_dynamic_adapters"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_roomlist_entries_with_dynamic_adapters(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_roomlist_loading_state"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "method_roomlist_loading_state"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_roomlist_loading_state(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_roomlist_room"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_roomlist_room"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_roomlist_room(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
        "roomlistdynamicentriescontroller_add_one_page"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                  "roomlistdynamicentriescontroller_add_one_page"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_roomlistdynamicentriescontroller_add_one_page(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
        "roomlistdynamicentriescontroller_reset_to_one_page"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                  "roomlistdynamicentriescontroller_reset_to_one_page"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_roomlistdynamicentriescontroller_reset_to_one_page(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
        "roomlistdynamicentriescontroller_set_filter"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                  "roomlistdynamicentriescontroller_set_filter"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_roomlistdynamicentriescontroller_set_filter(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
        "roomlistentrieswithdynamicadaptersresult_controller"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                  "roomlistentrieswithdynamicadaptersresult_controller"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_roomlistentrieswithdynamicadaptersresult_controller(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
        "roomlistentrieswithdynamicadaptersresult_entries_stream"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                  "roomlistentrieswithdynamicadaptersresult_entries_stream"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_roomlistentrieswithdynamicadaptersresult_entries_stream(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_roomlistitem_avatar_url"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "method_roomlistitem_avatar_url"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_roomlistitem_avatar_url(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_roomlistitem_canonical_"
        "alias"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_roomlistitem_canonical_alias"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_roomlistitem_canonical_alias(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_roomlistitem_display_"
        "name"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_roomlistitem_display_name"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_roomlistitem_display_name(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_roomlistitem_full_room"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "method_roomlistitem_full_room"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_roomlistitem_full_room(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_roomlistitem_id"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_roomlistitem_id"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_roomlistitem_id(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_roomlistitem_init_"
        "timeline"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_roomlistitem_init_timeline"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_roomlistitem_init_timeline(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_roomlistitem_invited_"
        "room"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_roomlistitem_invited_room"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_roomlistitem_invited_room(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_roomlistitem_is_direct"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "method_roomlistitem_is_direct"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_roomlistitem_is_direct(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_roomlistitem_is_"
        "encrypted"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_roomlistitem_is_encrypted"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_roomlistitem_is_encrypted(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_roomlistitem_is_timeline_"
        "initialized"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                                "roomlistitem_is_timeline_initialized"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_roomlistitem_is_timeline_initialized(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_roomlistitem_latest_"
        "event"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_roomlistitem_latest_event"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_roomlistitem_latest_event(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_roomlistitem_membership"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "method_roomlistitem_membership"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_roomlistitem_membership(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_roomlistitem_preview_"
        "room"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_roomlistitem_preview_room"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_roomlistitem_preview_room(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_roomlistitem_room_info"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "method_roomlistitem_room_info"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_roomlistitem_room_info(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_roomlistservice_all_"
        "rooms"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_roomlistservice_all_rooms"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_roomlistservice_all_rooms(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_roomlistservice_room"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "method_roomlistservice_room"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_roomlistservice_room(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_roomlistservice_state"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "method_roomlistservice_state"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_roomlistservice_state(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_roomlistservice_subscribe_"
        "to_rooms"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                                "roomlistservice_subscribe_to_rooms"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_roomlistservice_subscribe_to_rooms(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_roomlistservice_sync_"
        "indicator"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_roomlistservice_sync_indicator"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_roomlistservice_sync_indicator(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_roommembersiterator_len"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "method_roommembersiterator_len"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_roommembersiterator_len(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_roommembersiterator_next_"
        "chunk"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_roommembersiterator_next_chunk"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_roommembersiterator_next_chunk(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
        "roommessageeventcontentwithoutrelation_with_mentions"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                  "roommessageeventcontentwithoutrelation_with_mentions"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_roommessageeventcontentwithoutrelation_with_mentions(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_roompreview_info"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_checksum_method_roompreview_info"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_roompreview_info(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_roompreview_inviter"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_checksum_method_roompreview_inviter"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_roompreview_inviter(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_roompreview_leave"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_checksum_method_roompreview_leave"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_roompreview_leave(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_sendattachmentjoinhandle_"
        "cancel"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_sendattachmentjoinhandle_cancel"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_sendattachmentjoinhandle_cancel(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_sendattachmentjoinhandle_"
        "join"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_sendattachmentjoinhandle_join"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_sendattachmentjoinhandle_join(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_sendhandle_abort"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_checksum_method_sendhandle_abort"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_sendhandle_abort(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_sendhandle_try_resend"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "method_sendhandle_try_resend"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_sendhandle_try_resend(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
        "sessionverificationcontroller_accept_verification_request"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                  "sessionverificationcontroller_accept_verification_request"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontroller_accept_verification_request(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
        "sessionverificationcontroller_acknowledge_verification_request"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
              "sessionverificationcontroller_acknowledge_verification_request"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontroller_acknowledge_verification_request(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
        "sessionverificationcontroller_approve_verification"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                  "sessionverificationcontroller_approve_verification"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontroller_approve_verification(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
        "sessionverificationcontroller_cancel_verification"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                  "sessionverificationcontroller_cancel_verification"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontroller_cancel_verification(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
        "sessionverificationcontroller_decline_verification"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                  "sessionverificationcontroller_decline_verification"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontroller_decline_verification(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
        "sessionverificationcontroller_request_verification"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                  "sessionverificationcontroller_request_verification"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontroller_request_verification(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
        "sessionverificationcontroller_set_delegate"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                  "sessionverificationcontroller_set_delegate"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontroller_set_delegate(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
        "sessionverificationcontroller_start_sas_verification"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                  "sessionverificationcontroller_start_sas_verification"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontroller_start_sas_verification(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_sessionverificationemoji_"
        "description"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                                "sessionverificationemoji_description"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_sessionverificationemoji_description(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_sessionverificationemoji_"
        "symbol"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_sessionverificationemoji_symbol"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_sessionverificationemoji_symbol(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_span_enter"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_span_enter"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_checksum_method_span_enter(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_span_exit"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_span_exit"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_checksum_method_span_exit(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_span_is_none"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_span_is_none"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_matrix_sdk_ffi_checksum_method_span_is_none(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_ssohandler_finish"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_checksum_method_ssohandler_finish"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_ssohandler_finish(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_ssohandler_url"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_ssohandler_url"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_ssohandler_url(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_syncservice_room_list_"
        "service"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_syncservice_room_list_service"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_syncservice_room_list_service(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_syncservice_start"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_checksum_method_syncservice_start"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_syncservice_start(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_syncservice_state"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_checksum_method_syncservice_state"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_syncservice_state(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_syncservice_stop"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_checksum_method_syncservice_stop"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_syncservice_stop(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_syncservicebuilder_"
        "finish"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_syncservicebuilder_finish"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_syncservicebuilder_finish(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_syncservicebuilder_with_"
        "cross_process_lock"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                                "syncservicebuilder_with_cross_process_lock"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_syncservicebuilder_with_cross_process_lock(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_syncservicebuilder_with_"
        "utd_hook"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_syncservicebuilder_with_utd_hook"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_syncservicebuilder_with_utd_hook(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_taskhandle_cancel"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_checksum_method_taskhandle_cancel"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_taskhandle_cancel(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_taskhandle_is_finished"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "method_taskhandle_is_finished"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_taskhandle_is_finished(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_timeline_add_listener"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "method_timeline_add_listener"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_timeline_add_listener(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_timeline_create_message_"
        "content"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_timeline_create_message_content"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_timeline_create_message_content(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_timeline_create_poll"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "method_timeline_create_poll"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_timeline_create_poll(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_timeline_edit"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_timeline_edit"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_timeline_edit(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_timeline_end_poll"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_checksum_method_timeline_end_poll"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_timeline_end_poll(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_timeline_fetch_details_for_"
        "event"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_timeline_fetch_details_for_event"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_timeline_fetch_details_for_event(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_timeline_fetch_members"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "method_timeline_fetch_members"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_timeline_fetch_members(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_timeline_focused_paginate_"
        "forwards"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                                "timeline_focused_paginate_forwards"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_timeline_focused_paginate_forwards(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_timeline_get_event_"
        "timeline_item_by_event_id"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                                "timeline_get_event_timeline_item_by_event_id"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_timeline_get_event_timeline_item_by_event_id(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_timeline_load_reply_"
        "details"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_timeline_load_reply_details"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_timeline_load_reply_details(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_timeline_mark_as_read"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "method_timeline_mark_as_read"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_timeline_mark_as_read(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_timeline_paginate_"
        "backwards"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_timeline_paginate_backwards"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_timeline_paginate_backwards(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_timeline_pin_event"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_checksum_method_timeline_pin_event"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_timeline_pin_event(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_timeline_redact_event"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "method_timeline_redact_event"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_timeline_redact_event(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_timeline_retry_"
        "decryption"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_timeline_retry_decryption"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_timeline_retry_decryption(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_timeline_send"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_timeline_send"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_timeline_send(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_timeline_send_audio"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_checksum_method_timeline_send_audio"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_timeline_send_audio(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_timeline_send_file"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_checksum_method_timeline_send_file"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_timeline_send_file(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_timeline_send_image"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_checksum_method_timeline_send_image"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_timeline_send_image(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_timeline_send_location"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "method_timeline_send_location"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_timeline_send_location(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_timeline_send_poll_"
        "response"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_timeline_send_poll_response"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_timeline_send_poll_response(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_timeline_send_read_"
        "receipt"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_timeline_send_read_receipt"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_timeline_send_read_receipt(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_timeline_send_reply"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_checksum_method_timeline_send_reply"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_timeline_send_reply(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_timeline_send_video"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_checksum_method_timeline_send_video"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_timeline_send_video(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_timeline_send_voice_"
        "message"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_timeline_send_voice_message"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_timeline_send_voice_message(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_timeline_subscribe_to_back_"
        "pagination_status"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                                "timeline_subscribe_to_back_pagination_status"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_timeline_subscribe_to_back_pagination_status(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_timeline_toggle_reaction"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "method_timeline_toggle_reaction"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_timeline_toggle_reaction(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_timeline_unpin_event"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "method_timeline_unpin_event"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_timeline_unpin_event(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_timelinediff_append"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_checksum_method_timelinediff_append"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_timelinediff_append(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_timelinediff_change"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_checksum_method_timelinediff_change"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_timelinediff_change(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_timelinediff_insert"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_checksum_method_timelinediff_insert"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_timelinediff_insert(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_timelinediff_push_back"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "method_timelinediff_push_back"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_timelinediff_push_back(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_timelinediff_push_front"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "method_timelinediff_push_front"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_timelinediff_push_front(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_timelinediff_remove"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_checksum_method_timelinediff_remove"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_timelinediff_remove(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_timelinediff_reset"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_checksum_method_timelinediff_reset"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_timelinediff_reset(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_timelinediff_set"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_checksum_method_timelinediff_set"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_timelinediff_set(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_timelinediff_truncate"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "method_timelinediff_truncate"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_timelinediff_truncate(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_timelineevent_event_id"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "method_timelineevent_event_id"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_timelineevent_event_id(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_timelineevent_event_type"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "method_timelineevent_event_type"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_timelineevent_event_type(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_timelineevent_sender_id"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "method_timelineevent_sender_id"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_timelineevent_sender_id(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_timelineevent_timestamp"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "method_timelineevent_timestamp"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_timelineevent_timestamp(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_timelineitem_as_event"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "method_timelineitem_as_event"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_timelineitem_as_event(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_timelineitem_as_virtual"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "method_timelineitem_as_virtual"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_timelineitem_as_virtual(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_timelineitem_fmt_debug"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "method_timelineitem_fmt_debug"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_timelineitem_fmt_debug(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_timelineitem_unique_id"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "method_timelineitem_unique_id"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_timelineitem_unique_id(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_unreadnotificationscount_"
        "has_notifications"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                                "unreadnotificationscount_has_notifications"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_unreadnotificationscount_has_notifications(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_unreadnotificationscount_"
        "highlight_count"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                                "unreadnotificationscount_highlight_count"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_unreadnotificationscount_highlight_count(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_unreadnotificationscount_"
        "notification_count"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                                "unreadnotificationscount_notification_count"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_unreadnotificationscount_notification_count(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_useridentity_is_verified"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "method_useridentity_is_verified"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_useridentity_is_verified(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_useridentity_master_key"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "method_useridentity_master_key"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_useridentity_master_key(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_useridentity_pin"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_checksum_method_useridentity_pin"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_useridentity_pin(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_widgetdriver_run"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_checksum_method_widgetdriver_run"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_widgetdriver_run(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_widgetdriverhandle_recv"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "method_widgetdriverhandle_recv"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_widgetdriverhandle_recv(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_widgetdriverhandle_send"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "method_widgetdriverhandle_send"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_widgetdriverhandle_send(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_constructor_clientbuilder_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "constructor_clientbuilder_new"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_constructor_clientbuilder_new(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_constructor_mediasource_from_"
        "json"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "constructor_mediasource_from_json"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_constructor_mediasource_from_json(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_constructor_mediasource_from_"
        "url"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "constructor_mediasource_from_url"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_constructor_mediasource_from_url(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_constructor_qrcodedata_from_"
        "bytes"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "constructor_qrcodedata_from_bytes"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_constructor_qrcodedata_from_bytes(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_constructor_span_current"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_matrix_sdk_ffi_checksum_constructor_span_current"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_constructor_span_current(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_constructor_span_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_constructor_span_new"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_constructor_span_new(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_constructor_"
        "timelineeventtypefilter_exclude"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                "constructor_timelineeventtypefilter_exclude"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_constructor_timelineeventtypefilter_exclude(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_constructor_"
        "timelineeventtypefilter_include"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                "constructor_timelineeventtypefilter_include"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_constructor_timelineeventtypefilter_include(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_backupstatelistener_on_"
        "update"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_backupstatelistener_on_update"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_backupstatelistener_on_update(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_backupsteadystatelistener_"
        "on_update"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                                "backupsteadystatelistener_on_update"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_backupsteadystatelistener_on_update(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_clientdelegate_did_receive_"
        "auth_error"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                                "clientdelegate_did_receive_auth_error"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_clientdelegate_did_receive_auth_error(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_clientdelegate_did_refresh_"
        "tokens"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_clientdelegate_did_refresh_tokens"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_clientdelegate_did_refresh_tokens(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_clientsessiondelegate_"
        "retrieve_session_from_keychain"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(
          rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
              "clientsessiondelegate_retrieve_session_from_keychain"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_clientsessiondelegate_retrieve_session_from_keychain(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_clientsessiondelegate_save_"
        "session_in_keychain"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(
          rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
              "clientsessiondelegate_save_session_in_keychain"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_clientsessiondelegate_save_session_in_keychain(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
        "enablerecoveryprogresslistener_on_update"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                  "enablerecoveryprogresslistener_on_update"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_enablerecoveryprogresslistener_on_update(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
        "identitystatuschangelistener_call"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_identitystatuschangelistener_call"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_identitystatuschangelistener_call(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_ignoreduserslistener_"
        "call"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_ignoreduserslistener_call"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_ignoreduserslistener_call(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_knockrequestslistener_"
        "call"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_knockrequestslistener_call"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_knockrequestslistener_call(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
        "notificationsettingsdelegate_settings_did_change"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                  "notificationsettingsdelegate_settings_did_change"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_notificationsettingsdelegate_settings_did_change(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_paginationstatuslistener_"
        "on_update"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                                "paginationstatuslistener_on_update"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_paginationstatuslistener_on_update(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_progresswatcher_"
        "transmission_progress"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                                "progresswatcher_transmission_progress"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_progresswatcher_transmission_progress(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_qrloginprogresslistener_on_"
        "update"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_qrloginprogresslistener_on_update"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_qrloginprogresslistener_on_update(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_recoverystatelistener_on_"
        "update"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_recoverystatelistener_on_update"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_recoverystatelistener_on_update(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
        "roomdirectorysearchentrieslistener_on_update"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                  "roomdirectorysearchentrieslistener_on_update"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_roomdirectorysearchentrieslistener_on_update(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_roominfolistener_call"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                        "method_roominfolistener_call"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_roominfolistener_call(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_roomlistentrieslistener_on_"
        "update"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_roomlistentrieslistener_on_update"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_roomlistentrieslistener_on_update(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
        "roomlistloadingstatelistener_on_update"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                  "roomlistloadingstatelistener_on_update"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_roomlistloadingstatelistener_on_update(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
        "roomlistservicestatelistener_on_update"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                  "roomlistservicestatelistener_on_update"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_roomlistservicestatelistener_on_update(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
        "roomlistservicesyncindicatorlistener_on_update"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                  "roomlistservicesyncindicatorlistener_on_update"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_roomlistservicesyncindicatorlistener_on_update(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_sendqueueroomerrorlistener_"
        "on_error"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                                "sendqueueroomerrorlistener_on_error"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_sendqueueroomerrorlistener_on_error(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
        "sessionverificationcontrollerdelegate_did_receive_verification_"
        "request"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                                "sessionverificationcontrollerdelegate_did_"
                                "receive_verification_request"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontrollerdelegate_did_receive_verification_request(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
        "sessionverificationcontrollerdelegate_did_accept_verification_"
        "request"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                                "sessionverificationcontrollerdelegate_did_"
                                "accept_verification_request"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontrollerdelegate_did_accept_verification_request(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
        "sessionverificationcontrollerdelegate_did_start_sas_verification"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                  "sessionverificationcontrollerdelegate_did_start_sas_"
                  "verification"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontrollerdelegate_did_start_sas_verification(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
        "sessionverificationcontrollerdelegate_did_receive_verification_data"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                  "sessionverificationcontrollerdelegate_did_receive_"
                  "verification_data"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontrollerdelegate_did_receive_verification_data(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
        "sessionverificationcontrollerdelegate_did_fail"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                  "sessionverificationcontrollerdelegate_did_fail"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontrollerdelegate_did_fail(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
        "sessionverificationcontrollerdelegate_did_cancel"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                  "sessionverificationcontrollerdelegate_did_cancel"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontrollerdelegate_did_cancel(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
        "sessionverificationcontrollerdelegate_did_finish"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                  "sessionverificationcontrollerdelegate_did_finish"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontrollerdelegate_did_finish(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_syncservicestateobserver_"
        "on_update"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                                "syncservicestateobserver_on_update"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_syncservicestateobserver_on_update(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_timelinelistener_on_"
        "update"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_timelinelistener_on_update"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_timelinelistener_on_update(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
        "typingnotificationslistener_call"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_typingnotificationslistener_call"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_typingnotificationslistener_call(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_unabletodecryptdelegate_on_"
        "utd"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_"
                                    "method_unabletodecryptdelegate_on_utd"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_unabletodecryptdelegate_on_utd(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_verificationstatelistener_"
        "on_update"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
                                "verificationstatelistener_on_update"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_verificationstatelistener_on_update(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_checksum_method_widgetcapabilitiesprovider_"
        "acquire_capabilities"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(
          rt, "ubrn_uniffi_matrix_sdk_ffi_checksum_method_"
              "widgetcapabilitiesprovider_acquire_capabilities"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_checksum_method_widgetcapabilitiesprovider_acquire_capabilities(
                rt, thisVal, args, count);
      });
  props["ubrn_ffi_matrix_sdk_ffi_uniffi_contract_version"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_matrix_sdk_ffi_uniffi_contract_version"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_matrix_sdk_ffi_uniffi_contract_version(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_"
        "backupstatelistener"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_init_"
                                    "callback_vtable_backupstatelistener"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_backupstatelistener(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_"
        "backupsteadystatelistener"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_fn_init_callback_"
                                "vtable_backupsteadystatelistener"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_backupsteadystatelistener(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_clientdelegate"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_init_"
                                        "callback_vtable_clientdelegate"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_clientdelegate(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_"
        "clientsessiondelegate"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_init_"
                                    "callback_vtable_clientsessiondelegate"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_clientsessiondelegate(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_"
        "enablerecoveryprogresslistener"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_fn_init_callback_"
                                "vtable_enablerecoveryprogresslistener"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_enablerecoveryprogresslistener(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_"
        "identitystatuschangelistener"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_fn_init_callback_"
                                "vtable_identitystatuschangelistener"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_identitystatuschangelistener(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_"
        "ignoreduserslistener"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_init_"
                                    "callback_vtable_ignoreduserslistener"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_ignoreduserslistener(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_"
        "knockrequestslistener"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_init_"
                                    "callback_vtable_knockrequestslistener"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_knockrequestslistener(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_"
        "notificationsettingsdelegate"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_fn_init_callback_"
                                "vtable_notificationsettingsdelegate"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_notificationsettingsdelegate(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_"
        "paginationstatuslistener"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_init_"
                                    "callback_vtable_paginationstatuslistener"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_paginationstatuslistener(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_progresswatcher"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_init_"
                                        "callback_vtable_progresswatcher"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_progresswatcher(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_"
        "qrloginprogresslistener"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_init_"
                                    "callback_vtable_qrloginprogresslistener"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_qrloginprogresslistener(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_"
        "recoverystatelistener"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_init_"
                                    "callback_vtable_recoverystatelistener"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_recoverystatelistener(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_"
        "roomdirectorysearchentrieslistener"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_"
                  "roomdirectorysearchentrieslistener"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_roomdirectorysearchentrieslistener(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_roominfolistener"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_init_"
                                        "callback_vtable_roominfolistener"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_roominfolistener(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_"
        "roomlistentrieslistener"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_init_"
                                    "callback_vtable_roomlistentrieslistener"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_roomlistentrieslistener(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_"
        "roomlistloadingstatelistener"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_fn_init_callback_"
                                "vtable_roomlistloadingstatelistener"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_roomlistloadingstatelistener(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_"
        "roomlistservicestatelistener"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_fn_init_callback_"
                                "vtable_roomlistservicestatelistener"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_roomlistservicestatelistener(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_"
        "roomlistservicesyncindicatorlistener"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_"
                  "roomlistservicesyncindicatorlistener"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_roomlistservicesyncindicatorlistener(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_"
        "sendqueueroomerrorlistener"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_fn_init_callback_"
                                "vtable_sendqueueroomerrorlistener"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_sendqueueroomerrorlistener(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_"
        "sessionverificationcontrollerdelegate"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_"
                  "sessionverificationcontrollerdelegate"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_sessionverificationcontrollerdelegate(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_"
        "syncservicestateobserver"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_init_"
                                    "callback_vtable_syncservicestateobserver"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_syncservicestateobserver(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_timelinelistener"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_init_"
                                        "callback_vtable_timelinelistener"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_timelinelistener(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_"
        "typingnotificationslistener"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_fn_init_callback_"
                                "vtable_typingnotificationslistener"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_typingnotificationslistener(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_"
        "unabletodecryptdelegate"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_matrix_sdk_ffi_fn_init_"
                                    "callback_vtable_unabletodecryptdelegate"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_unabletodecryptdelegate(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_"
        "verificationstatelistener"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_fn_init_callback_"
                                "vtable_verificationstatelistener"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_verificationstatelistener(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_"
        "widgetcapabilitiesprovider"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_matrix_sdk_ffi_fn_init_callback_"
                                "vtable_widgetcapabilitiesprovider"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_widgetcapabilitiesprovider(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_internal_fn_method_client_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_internal_fn_method_client_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_client_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_clientbuilder_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_internal_fn_method_"
                                        "clientbuilder_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_clientbuilder_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_encryption_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_internal_fn_method_encryption_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_encryption_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_homeserverlogindetails_ffi__bless_"
        "pointer"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_internal_fn_method_"
                                "homeserverlogindetails_ffi__bless_pointer"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_internal_fn_method_homeserverlogindetails_ffi__bless_pointer(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_internal_fn_method_identityresethandle_ffi__bless_"
        "pointer"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_internal_fn_method_"
                                    "identityresethandle_ffi__bless_pointer"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_internal_fn_method_identityresethandle_ffi__bless_pointer(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_internal_fn_method_inreplytodetails_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_internal_fn_method_"
                                        "inreplytodetails_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_inreplytodetails_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_knockrequestactions_ffi__bless_"
        "pointer"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_internal_fn_method_"
                                    "knockrequestactions_ffi__bless_pointer"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_internal_fn_method_knockrequestactions_ffi__bless_pointer(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_internal_fn_method_lazytimelineitemprovider_ffi__bless_"
        "pointer"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_internal_fn_method_"
                                "lazytimelineitemprovider_ffi__bless_pointer"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_internal_fn_method_lazytimelineitemprovider_ffi__bless_pointer(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_internal_fn_method_mediafilehandle_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_internal_fn_method_"
                                        "mediafilehandle_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_mediafilehandle_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_mediasource_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_internal_fn_method_mediasource_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_mediasource_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_notificationclient_ffi__bless_"
        "pointer"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_internal_fn_method_"
                                    "notificationclient_ffi__bless_pointer"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_internal_fn_method_notificationclient_ffi__bless_pointer(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_internal_fn_method_notificationsettings_ffi__bless_"
        "pointer"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_internal_fn_method_"
                                    "notificationsettings_ffi__bless_pointer"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_internal_fn_method_notificationsettings_ffi__bless_pointer(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_internal_fn_method_qrcodedata_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_internal_fn_method_qrcodedata_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_qrcodedata_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_room_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_internal_fn_method_room_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_internal_fn_method_room_ffi__bless_pointer(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_roomdirectorysearch_ffi__bless_"
        "pointer"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_internal_fn_method_"
                                    "roomdirectorysearch_ffi__bless_pointer"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_internal_fn_method_roomdirectorysearch_ffi__bless_pointer(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_internal_fn_method_roomlist_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_internal_fn_method_roomlist_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_roomlist_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_roomlistdynamicentriescontroller_ffi__"
        "bless_pointer"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(
          rt, "ubrn_uniffi_internal_fn_method_roomlistdynamicentriescontroller_"
              "ffi__bless_pointer"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_internal_fn_method_roomlistdynamicentriescontroller_ffi__bless_pointer(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_internal_fn_method_"
        "roomlistentrieswithdynamicadaptersresult_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_internal_fn_method_"
              "roomlistentrieswithdynamicadaptersresult_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_roomlistentrieswithdynamicadaptersresult_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_roomlistitem_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_internal_fn_method_roomlistitem_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_roomlistitem_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_roomlistservice_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_internal_fn_method_"
                                        "roomlistservice_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_roomlistservice_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_roommembersiterator_ffi__bless_"
        "pointer"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_internal_fn_method_"
                                    "roommembersiterator_ffi__bless_pointer"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_internal_fn_method_roommembersiterator_ffi__bless_pointer(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_internal_fn_method_roommessageeventcontentwithoutrelation_"
        "ffi__bless_pointer"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(
          rt, "ubrn_uniffi_internal_fn_method_"
              "roommessageeventcontentwithoutrelation_ffi__bless_pointer"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_internal_fn_method_roommessageeventcontentwithoutrelation_ffi__bless_pointer(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_internal_fn_method_roompreview_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_internal_fn_method_roompreview_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_roompreview_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_sendattachmentjoinhandle_ffi__bless_"
        "pointer"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_internal_fn_method_"
                                "sendattachmentjoinhandle_ffi__bless_pointer"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_internal_fn_method_sendattachmentjoinhandle_ffi__bless_pointer(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_internal_fn_method_sendhandle_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_internal_fn_method_sendhandle_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_sendhandle_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_sessionverificationcontroller_ffi__"
        "bless_pointer"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(
          rt, "ubrn_uniffi_internal_fn_method_sessionverificationcontroller_"
              "ffi__bless_pointer"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_internal_fn_method_sessionverificationcontroller_ffi__bless_pointer(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_internal_fn_method_sessionverificationemoji_ffi__bless_"
        "pointer"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_internal_fn_method_"
                                "sessionverificationemoji_ffi__bless_pointer"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_internal_fn_method_sessionverificationemoji_ffi__bless_pointer(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_internal_fn_method_span_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_internal_fn_method_span_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_internal_fn_method_span_ffi__bless_pointer(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_ssohandler_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_internal_fn_method_ssohandler_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_ssohandler_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_syncservice_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_internal_fn_method_syncservice_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_syncservice_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_syncservicebuilder_ffi__bless_"
        "pointer"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_internal_fn_method_"
                                    "syncservicebuilder_ffi__bless_pointer"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_internal_fn_method_syncservicebuilder_ffi__bless_pointer(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_internal_fn_method_taskhandle_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_internal_fn_method_taskhandle_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_taskhandle_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_timeline_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_internal_fn_method_timeline_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_timeline_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_timelinediff_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_internal_fn_method_timelinediff_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_timelinediff_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_timelineevent_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_internal_fn_method_"
                                        "timelineevent_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_timelineevent_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_timelineeventtypefilter_ffi__bless_"
        "pointer"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_internal_fn_method_"
                                "timelineeventtypefilter_ffi__bless_pointer"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_internal_fn_method_timelineeventtypefilter_ffi__bless_pointer(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_internal_fn_method_timelineitem_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_internal_fn_method_timelineitem_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_timelineitem_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_unreadnotificationscount_ffi__bless_"
        "pointer"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_internal_fn_method_"
                                "unreadnotificationscount_ffi__bless_pointer"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_internal_fn_method_unreadnotificationscount_ffi__bless_pointer(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_internal_fn_method_useridentity_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_internal_fn_method_useridentity_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_useridentity_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_widgetdriver_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_internal_fn_method_widgetdriver_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_widgetdriver_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_widgetdriverhandle_ffi__bless_"
        "pointer"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_internal_fn_method_"
                                    "widgetdriverhandle_ffi__bless_pointer"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_internal_fn_method_widgetdriverhandle_ffi__bless_pointer(
                rt, thisVal, args, count);
      });
}

void NativeMatrixSdkFfi::registerModule(
    jsi::Runtime &rt, std::shared_ptr<react::CallInvoker> callInvoker) {
  auto invoker =
      std::make_shared<uniffi_runtime::UniffiCallInvoker>(callInvoker);
  auto tm = std::make_shared<NativeMatrixSdkFfi>(rt, invoker);
  auto obj = rt.global().createFromHostObject(rt, tm);
  rt.global().setProperty(rt, "NativeMatrixSdkFfi", obj);
}

void NativeMatrixSdkFfi::unregisterModule(jsi::Runtime &rt) {
  uniffi::matrix_sdk_ffi::registry::clearRegistry();
}

jsi::Value NativeMatrixSdkFfi::get(jsi::Runtime &rt,
                                   const jsi::PropNameID &name) {
  try {
    return jsi::Value(rt, props.at(name.utf8(rt)));
  } catch (std::out_of_range &e) {
    return jsi::Value::undefined();
  }
}

std::vector<jsi::PropNameID>
NativeMatrixSdkFfi::getPropertyNames(jsi::Runtime &rt) {
  std::vector<jsi::PropNameID> rval;
  for (auto &[key, value] : props) {
    rval.push_back(jsi::PropNameID::forUtf8(rt, key));
  }
  return rval;
}

void NativeMatrixSdkFfi::set(jsi::Runtime &rt, const jsi::PropNameID &name,
                             const jsi::Value &value) {
  props.insert_or_assign(name.utf8(rt), &value);
}

NativeMatrixSdkFfi::~NativeMatrixSdkFfi() {
  // Cleanup for callback function RustFutureContinuationCallback
  uniffi::matrix_sdk_ffi::cb::rustfuturecontinuationcallback::cleanup();
  // Cleanup for "free" callback function CallbackInterfaceFree
  uniffi::matrix_sdk_ffi::st::foreignfuture::foreignfuture::free::cleanup();
  uniffi::matrix_sdk_ffi::st::vtablecallbackinterfacebackupstatelistener::
      vtablecallbackinterfacebackupstatelistener::free::cleanup();
  uniffi::matrix_sdk_ffi::st::vtablecallbackinterfacebackupsteadystatelistener::
      vtablecallbackinterfacebackupsteadystatelistener::free::cleanup();
  uniffi::matrix_sdk_ffi::st::vtablecallbackinterfaceclientdelegate::
      vtablecallbackinterfaceclientdelegate::free::cleanup();
  uniffi::matrix_sdk_ffi::st::vtablecallbackinterfaceclientsessiondelegate::
      vtablecallbackinterfaceclientsessiondelegate::free::cleanup();
  uniffi::matrix_sdk_ffi::st::
      vtablecallbackinterfaceenablerecoveryprogresslistener::
          vtablecallbackinterfaceenablerecoveryprogresslistener::free::
              cleanup();
  uniffi::matrix_sdk_ffi::st::
      vtablecallbackinterfaceidentitystatuschangelistener::
          vtablecallbackinterfaceidentitystatuschangelistener::free::cleanup();
  uniffi::matrix_sdk_ffi::st::vtablecallbackinterfaceignoreduserslistener::
      vtablecallbackinterfaceignoreduserslistener::free::cleanup();
  uniffi::matrix_sdk_ffi::st::vtablecallbackinterfaceknockrequestslistener::
      vtablecallbackinterfaceknockrequestslistener::free::cleanup();
  uniffi::matrix_sdk_ffi::st::
      vtablecallbackinterfacenotificationsettingsdelegate::
          vtablecallbackinterfacenotificationsettingsdelegate::free::cleanup();
  uniffi::matrix_sdk_ffi::st::vtablecallbackinterfacepaginationstatuslistener::
      vtablecallbackinterfacepaginationstatuslistener::free::cleanup();
  uniffi::matrix_sdk_ffi::st::vtablecallbackinterfaceprogresswatcher::
      vtablecallbackinterfaceprogresswatcher::free::cleanup();
  uniffi::matrix_sdk_ffi::st::vtablecallbackinterfaceqrloginprogresslistener::
      vtablecallbackinterfaceqrloginprogresslistener::free::cleanup();
  uniffi::matrix_sdk_ffi::st::vtablecallbackinterfacerecoverystatelistener::
      vtablecallbackinterfacerecoverystatelistener::free::cleanup();
  uniffi::matrix_sdk_ffi::st::
      vtablecallbackinterfaceroomdirectorysearchentrieslistener::
          vtablecallbackinterfaceroomdirectorysearchentrieslistener::free::
              cleanup();
  uniffi::matrix_sdk_ffi::st::vtablecallbackinterfaceroominfolistener::
      vtablecallbackinterfaceroominfolistener::free::cleanup();
  uniffi::matrix_sdk_ffi::st::vtablecallbackinterfaceroomlistentrieslistener::
      vtablecallbackinterfaceroomlistentrieslistener::free::cleanup();
  uniffi::matrix_sdk_ffi::st::
      vtablecallbackinterfaceroomlistloadingstatelistener::
          vtablecallbackinterfaceroomlistloadingstatelistener::free::cleanup();
  uniffi::matrix_sdk_ffi::st::
      vtablecallbackinterfaceroomlistservicestatelistener::
          vtablecallbackinterfaceroomlistservicestatelistener::free::cleanup();
  uniffi::matrix_sdk_ffi::st::
      vtablecallbackinterfaceroomlistservicesyncindicatorlistener::
          vtablecallbackinterfaceroomlistservicesyncindicatorlistener::free::
              cleanup();
  uniffi::matrix_sdk_ffi::st::
      vtablecallbackinterfacesendqueueroomerrorlistener::
          vtablecallbackinterfacesendqueueroomerrorlistener::free::cleanup();
  uniffi::matrix_sdk_ffi::st::
      vtablecallbackinterfacesessionverificationcontrollerdelegate::
          vtablecallbackinterfacesessionverificationcontrollerdelegate::free::
              cleanup();
  uniffi::matrix_sdk_ffi::st::vtablecallbackinterfacesyncservicestateobserver::
      vtablecallbackinterfacesyncservicestateobserver::free::cleanup();
  uniffi::matrix_sdk_ffi::st::vtablecallbackinterfacetimelinelistener::
      vtablecallbackinterfacetimelinelistener::free::cleanup();
  uniffi::matrix_sdk_ffi::st::
      vtablecallbackinterfacetypingnotificationslistener::
          vtablecallbackinterfacetypingnotificationslistener::free::cleanup();
  uniffi::matrix_sdk_ffi::st::vtablecallbackinterfaceunabletodecryptdelegate::
      vtablecallbackinterfaceunabletodecryptdelegate::free::cleanup();
  uniffi::matrix_sdk_ffi::st::vtablecallbackinterfaceverificationstatelistener::
      vtablecallbackinterfaceverificationstatelistener::free::cleanup();
  uniffi::matrix_sdk_ffi::st::
      vtablecallbackinterfacewidgetcapabilitiesprovider::
          vtablecallbackinterfacewidgetcapabilitiesprovider::free::cleanup();
  // Cleanup for callback function CallbackInterfaceBackupStateListenerMethod0
  uniffi::matrix_sdk_ffi::cb::callbackinterfacebackupstatelistenermethod0::
      cleanup();
  // Cleanup for callback function
  // CallbackInterfaceBackupSteadyStateListenerMethod0
  uniffi::matrix_sdk_ffi::cb::
      callbackinterfacebackupsteadystatelistenermethod0::cleanup();
  // Cleanup for callback function CallbackInterfaceClientDelegateMethod0
  uniffi::matrix_sdk_ffi::cb::callbackinterfaceclientdelegatemethod0::cleanup();
  // Cleanup for callback function CallbackInterfaceClientDelegateMethod1
  uniffi::matrix_sdk_ffi::cb::callbackinterfaceclientdelegatemethod1::cleanup();
  // Cleanup for callback function CallbackInterfaceClientSessionDelegateMethod0
  uniffi::matrix_sdk_ffi::cb::callbackinterfaceclientsessiondelegatemethod0::
      cleanup();
  // Cleanup for callback function CallbackInterfaceClientSessionDelegateMethod1
  uniffi::matrix_sdk_ffi::cb::callbackinterfaceclientsessiondelegatemethod1::
      cleanup();
  // Cleanup for callback function
  // CallbackInterfaceEnableRecoveryProgressListenerMethod0
  uniffi::matrix_sdk_ffi::cb::
      callbackinterfaceenablerecoveryprogresslistenermethod0::cleanup();
  // Cleanup for callback function
  // CallbackInterfaceIdentityStatusChangeListenerMethod0
  uniffi::matrix_sdk_ffi::cb::
      callbackinterfaceidentitystatuschangelistenermethod0::cleanup();
  // Cleanup for callback function CallbackInterfaceIgnoredUsersListenerMethod0
  uniffi::matrix_sdk_ffi::cb::callbackinterfaceignoreduserslistenermethod0::
      cleanup();
  // Cleanup for callback function CallbackInterfaceKnockRequestsListenerMethod0
  uniffi::matrix_sdk_ffi::cb::callbackinterfaceknockrequestslistenermethod0::
      cleanup();
  // Cleanup for callback function
  // CallbackInterfaceNotificationSettingsDelegateMethod0
  uniffi::matrix_sdk_ffi::cb::
      callbackinterfacenotificationsettingsdelegatemethod0::cleanup();
  // Cleanup for callback function
  // CallbackInterfacePaginationStatusListenerMethod0
  uniffi::matrix_sdk_ffi::cb::callbackinterfacepaginationstatuslistenermethod0::
      cleanup();
  // Cleanup for callback function CallbackInterfaceProgressWatcherMethod0
  uniffi::matrix_sdk_ffi::cb::callbackinterfaceprogresswatchermethod0::
      cleanup();
  // Cleanup for callback function
  // CallbackInterfaceQrLoginProgressListenerMethod0
  uniffi::matrix_sdk_ffi::cb::callbackinterfaceqrloginprogresslistenermethod0::
      cleanup();
  // Cleanup for callback function CallbackInterfaceRecoveryStateListenerMethod0
  uniffi::matrix_sdk_ffi::cb::callbackinterfacerecoverystatelistenermethod0::
      cleanup();
  // Cleanup for callback function
  // CallbackInterfaceRoomDirectorySearchEntriesListenerMethod0
  uniffi::matrix_sdk_ffi::cb::
      callbackinterfaceroomdirectorysearchentrieslistenermethod0::cleanup();
  // Cleanup for callback function CallbackInterfaceRoomInfoListenerMethod0
  uniffi::matrix_sdk_ffi::cb::callbackinterfaceroominfolistenermethod0::
      cleanup();
  // Cleanup for callback function
  // CallbackInterfaceRoomListEntriesListenerMethod0
  uniffi::matrix_sdk_ffi::cb::callbackinterfaceroomlistentrieslistenermethod0::
      cleanup();
  // Cleanup for callback function
  // CallbackInterfaceRoomListLoadingStateListenerMethod0
  uniffi::matrix_sdk_ffi::cb::
      callbackinterfaceroomlistloadingstatelistenermethod0::cleanup();
  // Cleanup for callback function
  // CallbackInterfaceRoomListServiceStateListenerMethod0
  uniffi::matrix_sdk_ffi::cb::
      callbackinterfaceroomlistservicestatelistenermethod0::cleanup();
  // Cleanup for callback function
  // CallbackInterfaceRoomListServiceSyncIndicatorListenerMethod0
  uniffi::matrix_sdk_ffi::cb::
      callbackinterfaceroomlistservicesyncindicatorlistenermethod0::cleanup();
  // Cleanup for callback function
  // CallbackInterfaceSendQueueRoomErrorListenerMethod0
  uniffi::matrix_sdk_ffi::cb::
      callbackinterfacesendqueueroomerrorlistenermethod0::cleanup();
  // Cleanup for callback function
  // CallbackInterfaceSessionVerificationControllerDelegateMethod0
  uniffi::matrix_sdk_ffi::cb::
      callbackinterfacesessionverificationcontrollerdelegatemethod0::cleanup();
  // Cleanup for callback function
  // CallbackInterfaceSessionVerificationControllerDelegateMethod1
  uniffi::matrix_sdk_ffi::cb::
      callbackinterfacesessionverificationcontrollerdelegatemethod1::cleanup();
  // Cleanup for callback function
  // CallbackInterfaceSessionVerificationControllerDelegateMethod2
  uniffi::matrix_sdk_ffi::cb::
      callbackinterfacesessionverificationcontrollerdelegatemethod2::cleanup();
  // Cleanup for callback function
  // CallbackInterfaceSessionVerificationControllerDelegateMethod3
  uniffi::matrix_sdk_ffi::cb::
      callbackinterfacesessionverificationcontrollerdelegatemethod3::cleanup();
  // Cleanup for callback function
  // CallbackInterfaceSessionVerificationControllerDelegateMethod4
  uniffi::matrix_sdk_ffi::cb::
      callbackinterfacesessionverificationcontrollerdelegatemethod4::cleanup();
  // Cleanup for callback function
  // CallbackInterfaceSessionVerificationControllerDelegateMethod5
  uniffi::matrix_sdk_ffi::cb::
      callbackinterfacesessionverificationcontrollerdelegatemethod5::cleanup();
  // Cleanup for callback function
  // CallbackInterfaceSessionVerificationControllerDelegateMethod6
  uniffi::matrix_sdk_ffi::cb::
      callbackinterfacesessionverificationcontrollerdelegatemethod6::cleanup();
  // Cleanup for callback function
  // CallbackInterfaceSyncServiceStateObserverMethod0
  uniffi::matrix_sdk_ffi::cb::callbackinterfacesyncservicestateobservermethod0::
      cleanup();
  // Cleanup for callback function CallbackInterfaceTimelineListenerMethod0
  uniffi::matrix_sdk_ffi::cb::callbackinterfacetimelinelistenermethod0::
      cleanup();
  // Cleanup for callback function
  // CallbackInterfaceTypingNotificationsListenerMethod0
  uniffi::matrix_sdk_ffi::cb::
      callbackinterfacetypingnotificationslistenermethod0::cleanup();
  // Cleanup for callback function
  // CallbackInterfaceUnableToDecryptDelegateMethod0
  uniffi::matrix_sdk_ffi::cb::callbackinterfaceunabletodecryptdelegatemethod0::
      cleanup();
  // Cleanup for callback function
  // CallbackInterfaceVerificationStateListenerMethod0
  uniffi::matrix_sdk_ffi::cb::
      callbackinterfaceverificationstatelistenermethod0::cleanup();
  // Cleanup for callback function
  // CallbackInterfaceWidgetCapabilitiesProviderMethod0
  uniffi::matrix_sdk_ffi::cb::
      callbackinterfacewidgetcapabilitiesprovidermethod0::cleanup();
}

// Utility functions for serialization/deserialization of strings.
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_internal_fn_func_ffi__string_to_byte_length(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  return uniffi_jsi::Bridging<std::string>::string_to_bytelength(rt, args[0]);
}

jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_internal_fn_func_ffi__string_to_arraybuffer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  return uniffi_jsi::Bridging<std::string>::string_to_arraybuffer(rt, args[0]);
}

jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_internal_fn_func_ffi__arraybuffer_to_string(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  return uniffi_jsi::Bridging<std::string>::arraybuffer_to_string(rt, args[0]);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_internal_fn_method_client_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_matrix_sdk_ffi_fn_free_client(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_internal_fn_method_clientbuilder_ffi__bless_pointer(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_matrix_sdk_ffi_fn_free_clientbuilder(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_internal_fn_method_encryption_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_matrix_sdk_ffi_fn_free_encryption(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_internal_fn_method_homeserverlogindetails_ffi__bless_pointer(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_matrix_sdk_ffi_fn_free_homeserverlogindetails(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_internal_fn_method_identityresethandle_ffi__bless_pointer(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_matrix_sdk_ffi_fn_free_identityresethandle(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_internal_fn_method_inreplytodetails_ffi__bless_pointer(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_matrix_sdk_ffi_fn_free_inreplytodetails(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_internal_fn_method_knockrequestactions_ffi__bless_pointer(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_matrix_sdk_ffi_fn_free_knockrequestactions(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_internal_fn_method_lazytimelineitemprovider_ffi__bless_pointer(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_matrix_sdk_ffi_fn_free_lazytimelineitemprovider(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_internal_fn_method_mediafilehandle_ffi__bless_pointer(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_matrix_sdk_ffi_fn_free_mediafilehandle(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_internal_fn_method_mediasource_ffi__bless_pointer(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_matrix_sdk_ffi_fn_free_mediasource(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_internal_fn_method_notificationclient_ffi__bless_pointer(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_matrix_sdk_ffi_fn_free_notificationclient(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_internal_fn_method_notificationsettings_ffi__bless_pointer(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_matrix_sdk_ffi_fn_free_notificationsettings(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_internal_fn_method_qrcodedata_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_matrix_sdk_ffi_fn_free_qrcodedata(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_internal_fn_method_room_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_matrix_sdk_ffi_fn_free_room(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_internal_fn_method_roomdirectorysearch_ffi__bless_pointer(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_matrix_sdk_ffi_fn_free_roomdirectorysearch(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_internal_fn_method_roomlist_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_matrix_sdk_ffi_fn_free_roomlist(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_internal_fn_method_roomlistdynamicentriescontroller_ffi__bless_pointer(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_matrix_sdk_ffi_fn_free_roomlistdynamicentriescontroller(pointer,
                                                                   &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_internal_fn_method_roomlistentrieswithdynamicadaptersresult_ffi__bless_pointer(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_matrix_sdk_ffi_fn_free_roomlistentrieswithdynamicadaptersresult(
        pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_internal_fn_method_roomlistitem_ffi__bless_pointer(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_matrix_sdk_ffi_fn_free_roomlistitem(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_internal_fn_method_roomlistservice_ffi__bless_pointer(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_matrix_sdk_ffi_fn_free_roomlistservice(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_internal_fn_method_roommembersiterator_ffi__bless_pointer(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_matrix_sdk_ffi_fn_free_roommembersiterator(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_internal_fn_method_roommessageeventcontentwithoutrelation_ffi__bless_pointer(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_matrix_sdk_ffi_fn_free_roommessageeventcontentwithoutrelation(
        pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_internal_fn_method_roompreview_ffi__bless_pointer(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_matrix_sdk_ffi_fn_free_roompreview(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_internal_fn_method_sendattachmentjoinhandle_ffi__bless_pointer(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_matrix_sdk_ffi_fn_free_sendattachmentjoinhandle(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_internal_fn_method_sendhandle_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_matrix_sdk_ffi_fn_free_sendhandle(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_internal_fn_method_sessionverificationcontroller_ffi__bless_pointer(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_matrix_sdk_ffi_fn_free_sessionverificationcontroller(pointer,
                                                                &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_internal_fn_method_sessionverificationemoji_ffi__bless_pointer(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_matrix_sdk_ffi_fn_free_sessionverificationemoji(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_internal_fn_method_span_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_matrix_sdk_ffi_fn_free_span(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_internal_fn_method_ssohandler_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_matrix_sdk_ffi_fn_free_ssohandler(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_internal_fn_method_syncservice_ffi__bless_pointer(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_matrix_sdk_ffi_fn_free_syncservice(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_internal_fn_method_syncservicebuilder_ffi__bless_pointer(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_matrix_sdk_ffi_fn_free_syncservicebuilder(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_internal_fn_method_taskhandle_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_matrix_sdk_ffi_fn_free_taskhandle(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_internal_fn_method_timeline_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_matrix_sdk_ffi_fn_free_timeline(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_internal_fn_method_timelinediff_ffi__bless_pointer(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_matrix_sdk_ffi_fn_free_timelinediff(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_internal_fn_method_timelineevent_ffi__bless_pointer(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_matrix_sdk_ffi_fn_free_timelineevent(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_internal_fn_method_timelineeventtypefilter_ffi__bless_pointer(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_matrix_sdk_ffi_fn_free_timelineeventtypefilter(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_internal_fn_method_timelineitem_ffi__bless_pointer(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_matrix_sdk_ffi_fn_free_timelineitem(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_internal_fn_method_unreadnotificationscount_ffi__bless_pointer(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_matrix_sdk_ffi_fn_free_unreadnotificationscount(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_internal_fn_method_useridentity_ffi__bless_pointer(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_matrix_sdk_ffi_fn_free_useridentity(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_internal_fn_method_widgetdriver_ffi__bless_pointer(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_matrix_sdk_ffi_fn_free_widgetdriver(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_internal_fn_method_widgetdriverhandle_ffi__bless_pointer(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_matrix_sdk_ffi_fn_free_widgetdriverhandle(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}

// Methods calling directly into the uniffi generated C API of the Rust crate.
jsi::Value NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_clone_client(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_clone_client(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_free_client(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_matrix_sdk_ffi_fn_free_client(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_client_abort_oidc_auth(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_client_abort_oidc_auth(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_client_account_data(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_client_account_data(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_client_account_url(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_client_account_url(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_client_available_sliding_sync_versions(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_client_available_sliding_sync_versions(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_client_avatar_url(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_client_avatar_url(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_client_await_room_remote_echo(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_client_await_room_remote_echo(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_client_cached_avatar_url(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_client_cached_avatar_url(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(rt, callInvoker,
                                                            value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_client_can_deactivate_account(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_client_can_deactivate_account(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_client_create_room(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_client_create_room(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_client_create_room_alias(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_client_create_room_alias(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[2]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_client_custom_login_with_jwt(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_client_custom_login_with_jwt(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[2]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[3]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_client_deactivate_account(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_client_deactivate_account(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]),
      uniffi_jsi::Bridging<int8_t>::fromJs(rt, callInvoker, args[2]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_client_delete_pusher(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_client_delete_pusher(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_client_device_id(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_client_device_id(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(rt, callInvoker,
                                                            value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_client_display_name(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_client_display_name(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_client_enable_all_send_queues(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_client_enable_all_send_queues(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<int8_t>::fromJs(rt, callInvoker, args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_client_encryption(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_client_encryption(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_client_get_dm_room(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_client_get_dm_room(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]),
      &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(rt, callInvoker,
                                                            value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_client_get_media_content(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_client_get_media_content(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_client_get_media_file(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_client_get_media_file(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[2]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[3]),
      uniffi_jsi::Bridging<int8_t>::fromJs(rt, callInvoker, args[4]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[5]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_client_get_media_thumbnail(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_client_get_media_thumbnail(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]),
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[2]),
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[3]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_client_get_notification_settings(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_client_get_notification_settings(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_client_get_profile(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_client_get_profile(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_client_get_recently_visited_rooms(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_client_get_recently_visited_rooms(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_client_get_room_preview_from_room_alias(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_client_get_room_preview_from_room_alias(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                               args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_client_get_room_preview_from_room_id(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_client_get_room_preview_from_room_id(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                               args[1]),
          uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                               args[2]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_client_get_session_verification_controller(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_client_get_session_verification_controller(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_client_get_url(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_client_get_url(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_client_homeserver(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_client_homeserver(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(rt, callInvoker,
                                                            value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_client_homeserver_login_details(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_client_homeserver_login_details(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_client_ignore_user(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_client_ignore_user(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_client_ignored_users(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_client_ignored_users(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_client_is_room_alias_available(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_client_is_room_alias_available(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_client_join_room_by_id(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_client_join_room_by_id(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_client_join_room_by_id_or_alias(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_client_join_room_by_id_or_alias(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[2]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_client_knock(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_client_knock(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[2]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[3]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_client_login(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_client_login(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[2]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[3]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[4]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_client_login_with_email(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_client_login_with_email(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[2]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[3]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[4]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_client_login_with_oidc_callback(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_client_login_with_oidc_callback(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[2]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_client_logout(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_client_logout(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_client_notification_client(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_client_notification_client(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_client_remove_avatar(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_client_remove_avatar(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_client_reset_server_capabilities(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_client_reset_server_capabilities(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_client_resolve_room_alias(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_client_resolve_room_alias(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_client_restore_session(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_client_restore_session(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_client_room_alias_exists(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_client_room_alias_exists(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_client_room_directory_search(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_client_room_directory_search(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_client_rooms(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_client_rooms(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(rt, callInvoker,
                                                            value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_client_search_users(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_client_search_users(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]),
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[2]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_client_server(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_client_server(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(rt, callInvoker,
                                                            value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_client_session(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_client_session(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(rt, callInvoker,
                                                            value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_client_set_account_data(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_client_set_account_data(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[2]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_client_set_delegate(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_client_set_delegate(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]),
      &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(rt, callInvoker,
                                                            value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_client_set_display_name(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_client_set_display_name(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_client_set_pusher(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_client_set_pusher(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[2]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[3]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[4]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[5]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[6]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_client_sliding_sync_version(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_client_sliding_sync_version(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(rt, callInvoker,
                                                            value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_client_start_sso_login(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_client_start_sso_login(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[2]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_client_subscribe_to_ignored_users(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_client_subscribe_to_ignored_users(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[1]),
          &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_client_subscribe_to_send_queue_status(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_client_subscribe_to_send_queue_status(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[1]),
          &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_client_sync_service(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_client_sync_service(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_client_track_recently_visited_room(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_client_track_recently_visited_room(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                               args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_client_unignore_user(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_client_unignore_user(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_client_upload_avatar(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_client_upload_avatar(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[2]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_client_upload_media(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_client_upload_media(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[2]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[3]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_client_url_for_oidc(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_client_url_for_oidc(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[2]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_client_user_id(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_client_user_id(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(rt, callInvoker,
                                                            value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_client_user_id_server_name(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_client_user_id_server_name(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(rt, callInvoker,
                                                            value);
}
jsi::Value NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_clone_clientbuilder(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_clone_clientbuilder(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_free_clientbuilder(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_matrix_sdk_ffi_fn_free_clientbuilder(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_constructor_clientbuilder_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_constructor_clientbuilder_new(&status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_add_root_certificates(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_clientbuilder_add_root_certificates(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                               args[1]),
          &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_auto_enable_backups(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_clientbuilder_auto_enable_backups(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          uniffi_jsi::Bridging<int8_t>::fromJs(rt, callInvoker, args[1]),
          &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_auto_enable_cross_signing(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_clientbuilder_auto_enable_cross_signing(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          uniffi_jsi::Bridging<int8_t>::fromJs(rt, callInvoker, args[1]),
          &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_backup_download_strategy(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_clientbuilder_backup_download_strategy(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                               args[1]),
          &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_build(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_clientbuilder_build(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_build_with_qr_code(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_clientbuilder_build_with_qr_code(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[2]),
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[3]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_cross_process_store_locks_holder_name(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_clientbuilder_cross_process_store_locks_holder_name(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                               args[1]),
          &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_disable_automatic_token_refresh(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_clientbuilder_disable_automatic_token_refresh(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_disable_built_in_root_certificates(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_clientbuilder_disable_built_in_root_certificates(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_disable_ssl_verification(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_clientbuilder_disable_ssl_verification(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_enable_oidc_refresh_lock(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_clientbuilder_enable_oidc_refresh_lock(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_homeserver_url(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_clientbuilder_homeserver_url(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]),
      &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_passphrase(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_clientbuilder_passphrase(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]),
      &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_proxy(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_clientbuilder_proxy(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]),
      &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_request_config(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_clientbuilder_request_config(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]),
      &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_room_decryption_trust_requirement(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_clientbuilder_room_decryption_trust_requirement(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                               args[1]),
          &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_room_key_recipient_strategy(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_clientbuilder_room_key_recipient_strategy(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                               args[1]),
          &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_server_name(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_clientbuilder_server_name(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]),
      &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_server_name_or_homeserver_url(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_clientbuilder_server_name_or_homeserver_url(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                               args[1]),
          &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_session_paths(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_clientbuilder_session_paths(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[2]),
      &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_set_session_delegate(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_clientbuilder_set_session_delegate(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[1]),
          &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_sliding_sync_version_builder(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_clientbuilder_sliding_sync_version_builder(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                               args[1]),
          &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_use_event_cache_persistent_storage(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_clientbuilder_use_event_cache_persistent_storage(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          uniffi_jsi::Bridging<int8_t>::fromJs(rt, callInvoker, args[1]),
          &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_user_agent(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_clientbuilder_user_agent(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]),
      &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_clientbuilder_username(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_clientbuilder_username(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]),
      &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_clone_encryption(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_clone_encryption(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_free_encryption(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_matrix_sdk_ffi_fn_free_encryption(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_encryption_backup_exists_on_server(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_encryption_backup_exists_on_server(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_encryption_backup_state(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_encryption_backup_state(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(rt, callInvoker,
                                                            value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_encryption_backup_state_listener(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_encryption_backup_state_listener(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_encryption_curve25519_key(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_encryption_curve25519_key(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_encryption_disable_recovery(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_encryption_disable_recovery(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_encryption_ed25519_key(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_encryption_ed25519_key(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_encryption_enable_backups(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_encryption_enable_backups(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_encryption_enable_recovery(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_encryption_enable_recovery(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<int8_t>::fromJs(rt, callInvoker, args[1]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[2]),
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[3]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_encryption_is_last_device(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_encryption_is_last_device(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_encryption_recover(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_encryption_recover(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_encryption_recover_and_reset(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_encryption_recover_and_reset(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_encryption_recovery_state(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_encryption_recovery_state(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(rt, callInvoker,
                                                            value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_encryption_recovery_state_listener(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_encryption_recovery_state_listener(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[1]),
          &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_encryption_reset_identity(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_encryption_reset_identity(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_encryption_reset_recovery_key(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_encryption_reset_recovery_key(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_encryption_user_identity(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_encryption_user_identity(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_encryption_verification_state(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_encryption_verification_state(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(rt, callInvoker,
                                                            value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_encryption_verification_state_listener(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_encryption_verification_state_listener(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[1]),
          &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_encryption_wait_for_backup_upload_steady_state(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_encryption_wait_for_backup_upload_steady_state(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                               args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_encryption_wait_for_e2ee_initialization_tasks(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_encryption_wait_for_e2ee_initialization_tasks(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_clone_homeserverlogindetails(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_clone_homeserverlogindetails(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_free_homeserverlogindetails(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_matrix_sdk_ffi_fn_free_homeserverlogindetails(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_homeserverlogindetails_sliding_sync_version(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_homeserverlogindetails_sliding_sync_version(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(rt, callInvoker,
                                                            value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_homeserverlogindetails_supported_oidc_prompts(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_homeserverlogindetails_supported_oidc_prompts(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(rt, callInvoker,
                                                            value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_homeserverlogindetails_supports_oidc_login(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_homeserverlogindetails_supports_oidc_login(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_homeserverlogindetails_supports_password_login(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_homeserverlogindetails_supports_password_login(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_homeserverlogindetails_url(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_homeserverlogindetails_url(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(rt, callInvoker,
                                                            value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_clone_identityresethandle(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_clone_identityresethandle(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_free_identityresethandle(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_matrix_sdk_ffi_fn_free_identityresethandle(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_identityresethandle_auth_type(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_identityresethandle_auth_type(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(rt, callInvoker,
                                                            value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_identityresethandle_cancel(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_identityresethandle_cancel(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_identityresethandle_reset(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_identityresethandle_reset(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_clone_inreplytodetails(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_clone_inreplytodetails(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_free_inreplytodetails(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_matrix_sdk_ffi_fn_free_inreplytodetails(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_inreplytodetails_event(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_inreplytodetails_event(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(rt, callInvoker,
                                                            value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_inreplytodetails_event_id(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_inreplytodetails_event_id(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(rt, callInvoker,
                                                            value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_clone_knockrequestactions(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_clone_knockrequestactions(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_free_knockrequestactions(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_matrix_sdk_ffi_fn_free_knockrequestactions(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_knockrequestactions_accept(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_knockrequestactions_accept(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_knockrequestactions_decline(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_knockrequestactions_decline(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_knockrequestactions_decline_and_ban(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_knockrequestactions_decline_and_ban(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                               args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_knockrequestactions_mark_as_seen(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_knockrequestactions_mark_as_seen(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_clone_lazytimelineitemprovider(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_clone_lazytimelineitemprovider(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_free_lazytimelineitemprovider(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_matrix_sdk_ffi_fn_free_lazytimelineitemprovider(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_lazytimelineitemprovider_debug_info(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_lazytimelineitemprovider_debug_info(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(rt, callInvoker,
                                                            value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_lazytimelineitemprovider_get_send_handle(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_lazytimelineitemprovider_get_send_handle(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(rt, callInvoker,
                                                            value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_lazytimelineitemprovider_get_shields(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_lazytimelineitemprovider_get_shields(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          uniffi_jsi::Bridging<int8_t>::fromJs(rt, callInvoker, args[1]),
          &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(rt, callInvoker,
                                                            value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_clone_mediafilehandle(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_clone_mediafilehandle(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_free_mediafilehandle(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_matrix_sdk_ffi_fn_free_mediafilehandle(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_mediafilehandle_path(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_mediafilehandle_path(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(rt, callInvoker,
                                                            value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_mediafilehandle_persist(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_mediafilehandle_persist(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]),
      &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_clone_mediasource(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_clone_mediasource(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_free_mediasource(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_matrix_sdk_ffi_fn_free_mediasource(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_constructor_mediasource_from_json(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_constructor_mediasource_from_json(
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[0]),
      &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_constructor_mediasource_from_url(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_constructor_mediasource_from_url(
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[0]),
      &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_mediasource_to_json(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_mediasource_to_json(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(rt, callInvoker,
                                                            value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_mediasource_url(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_mediasource_url(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(rt, callInvoker,
                                                            value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_clone_notificationclient(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_clone_notificationclient(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_free_notificationclient(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_matrix_sdk_ffi_fn_free_notificationclient(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_notificationclient_get_notification(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_notificationclient_get_notification(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                               args[1]),
          uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                               args[2]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_clone_notificationsettings(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_clone_notificationsettings(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_free_notificationsettings(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_matrix_sdk_ffi_fn_free_notificationsettings(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_notificationsettings_can_homeserver_push_encrypted_event_to_device(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_notificationsettings_can_homeserver_push_encrypted_event_to_device(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_notificationsettings_can_push_encrypted_event_to_device(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_notificationsettings_can_push_encrypted_event_to_device(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_notificationsettings_contains_keywords_rules(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_notificationsettings_contains_keywords_rules(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_notificationsettings_get_default_room_notification_mode(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_notificationsettings_get_default_room_notification_mode(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          uniffi_jsi::Bridging<int8_t>::fromJs(rt, callInvoker, args[1]),
          uniffi_jsi::Bridging<int8_t>::fromJs(rt, callInvoker, args[2]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_notificationsettings_get_room_notification_settings(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_notificationsettings_get_room_notification_settings(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                               args[1]),
          uniffi_jsi::Bridging<int8_t>::fromJs(rt, callInvoker, args[2]),
          uniffi_jsi::Bridging<int8_t>::fromJs(rt, callInvoker, args[3]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_notificationsettings_get_rooms_with_user_defined_rules(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_notificationsettings_get_rooms_with_user_defined_rules(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                               args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_notificationsettings_get_user_defined_room_notification_mode(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_notificationsettings_get_user_defined_room_notification_mode(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                               args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_notificationsettings_is_call_enabled(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_notificationsettings_is_call_enabled(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_notificationsettings_is_invite_for_me_enabled(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_notificationsettings_is_invite_for_me_enabled(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_notificationsettings_is_room_mention_enabled(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_notificationsettings_is_room_mention_enabled(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_notificationsettings_is_user_mention_enabled(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_notificationsettings_is_user_mention_enabled(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_notificationsettings_restore_default_room_notification_mode(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_notificationsettings_restore_default_room_notification_mode(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                               args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_notificationsettings_set_call_enabled(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_notificationsettings_set_call_enabled(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          uniffi_jsi::Bridging<int8_t>::fromJs(rt, callInvoker, args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_notificationsettings_set_default_room_notification_mode(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_notificationsettings_set_default_room_notification_mode(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          uniffi_jsi::Bridging<int8_t>::fromJs(rt, callInvoker, args[1]),
          uniffi_jsi::Bridging<int8_t>::fromJs(rt, callInvoker, args[2]),
          uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                               args[3]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_notificationsettings_set_delegate(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_matrix_sdk_ffi_fn_method_notificationsettings_set_delegate(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]),
      &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_notificationsettings_set_invite_for_me_enabled(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_notificationsettings_set_invite_for_me_enabled(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          uniffi_jsi::Bridging<int8_t>::fromJs(rt, callInvoker, args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_notificationsettings_set_room_mention_enabled(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_notificationsettings_set_room_mention_enabled(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          uniffi_jsi::Bridging<int8_t>::fromJs(rt, callInvoker, args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_notificationsettings_set_room_notification_mode(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_notificationsettings_set_room_notification_mode(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                               args[1]),
          uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                               args[2]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_notificationsettings_set_user_mention_enabled(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_notificationsettings_set_user_mention_enabled(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          uniffi_jsi::Bridging<int8_t>::fromJs(rt, callInvoker, args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_notificationsettings_unmute_room(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_notificationsettings_unmute_room(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]),
      uniffi_jsi::Bridging<int8_t>::fromJs(rt, callInvoker, args[2]),
      uniffi_jsi::Bridging<int8_t>::fromJs(rt, callInvoker, args[3]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_clone_qrcodedata(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_clone_qrcodedata(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_free_qrcodedata(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_matrix_sdk_ffi_fn_free_qrcodedata(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_constructor_qrcodedata_from_bytes(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_constructor_qrcodedata_from_bytes(
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[0]),
      &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_clone_room(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_clone_room(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_free_room(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_matrix_sdk_ffi_fn_free_room(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_room_active_members_count(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_room_active_members_count(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_room_active_room_call_participants(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_room_active_room_call_participants(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(rt, callInvoker,
                                                            value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_room_alternative_aliases(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_room_alternative_aliases(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(rt, callInvoker,
                                                            value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_room_apply_power_level_changes(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_room_apply_power_level_changes(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_room_avatar_url(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_room_avatar_url(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(rt, callInvoker,
                                                            value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_room_ban_user(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_room_ban_user(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[2]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_room_can_user_ban(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_room_can_user_ban(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_room_can_user_invite(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_room_can_user_invite(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_room_can_user_kick(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_room_can_user_kick(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_room_can_user_pin_unpin(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_room_can_user_pin_unpin(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_room_can_user_redact_other(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_room_can_user_redact_other(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_room_can_user_redact_own(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_room_can_user_redact_own(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_room_can_user_send_message(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_room_can_user_send_message(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[2]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_room_can_user_send_state(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_room_can_user_send_state(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[2]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_room_can_user_trigger_room_notification(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_room_can_user_trigger_room_notification(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                               args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_room_canonical_alias(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_room_canonical_alias(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(rt, callInvoker,
                                                            value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_room_clear_composer_draft(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_room_clear_composer_draft(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_room_clear_event_cache_storage(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_room_clear_event_cache_storage(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_room_discard_room_key(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_room_discard_room_key(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_room_display_name(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_room_display_name(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(rt, callInvoker,
                                                            value);
}
jsi::Value NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_room_edit(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_room_edit(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[2]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_room_enable_send_queue(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_matrix_sdk_ffi_fn_method_room_enable_send_queue(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<int8_t>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_room_get_power_levels(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_room_get_power_levels(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_room_has_active_room_call(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_room_has_active_room_call(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_room_heroes(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_room_heroes(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(rt, callInvoker,
                                                            value);
}
jsi::Value NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_room_id(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_room_id(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(rt, callInvoker,
                                                            value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_room_ignore_device_trust_and_resend(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_room_ignore_device_trust_and_resend(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                               args[1]),
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[2]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_room_ignore_user(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_room_ignore_user(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_room_invite_user_by_id(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_room_invite_user_by_id(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_room_invited_members_count(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_room_invited_members_count(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_room_inviter(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_room_inviter(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_room_is_direct(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_room_is_direct(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_room_is_encrypted(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_room_is_encrypted(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_room_is_public(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_room_is_public(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_room_is_send_queue_enabled(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_room_is_send_queue_enabled(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_room_is_space(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_room_is_space(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_room_is_tombstoned(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_room_is_tombstoned(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_room_join(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_room_join(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_room_joined_members_count(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_room_joined_members_count(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_room_kick_user(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_room_kick_user(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[2]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_room_leave(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_room_leave(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_room_load_composer_draft(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_room_load_composer_draft(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_room_mark_as_read(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_room_mark_as_read(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_room_matrix_to_event_permalink(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_room_matrix_to_event_permalink(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_room_matrix_to_permalink(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_room_matrix_to_permalink(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_room_member(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_room_member(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_room_member_avatar_url(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_room_member_avatar_url(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_room_member_display_name(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_room_member_display_name(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_room_members(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_room_members(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_room_members_no_sync(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_room_members_no_sync(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_room_membership(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_room_membership(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(rt, callInvoker,
                                                            value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_room_message_filtered_timeline(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_room_message_filtered_timeline(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[2]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[3]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_room_own_user_id(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_room_own_user_id(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(rt, callInvoker,
                                                            value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_room_pinned_events_timeline(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_room_pinned_events_timeline(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]),
      uniffi_jsi::Bridging<uint16_t>::fromJs(rt, callInvoker, args[2]),
      uniffi_jsi::Bridging<uint16_t>::fromJs(rt, callInvoker, args[3]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_room_raw_name(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_room_raw_name(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(rt, callInvoker,
                                                            value);
}
jsi::Value NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_room_redact(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_room_redact(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[2]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_room_remove_avatar(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_room_remove_avatar(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_room_report_content(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_room_report_content(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[2]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[3]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_room_reset_power_levels(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_room_reset_power_levels(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_room_room_events_debug_string(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_room_room_events_debug_string(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_room_room_info(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_room_room_info(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_room_save_composer_draft(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_room_save_composer_draft(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_room_send_call_notification(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_room_send_call_notification(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[2]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[3]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[4]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_room_send_call_notification_if_needed(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_room_send_call_notification_if_needed(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_room_send_raw(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_room_send_raw(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[2]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_room_set_is_favourite(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_room_set_is_favourite(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<int8_t>::fromJs(rt, callInvoker, args[1]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[2]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_room_set_is_low_priority(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_room_set_is_low_priority(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<int8_t>::fromJs(rt, callInvoker, args[1]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[2]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_room_set_name(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_room_set_name(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_room_set_topic(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_room_set_topic(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_room_set_unread_flag(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_room_set_unread_flag(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<int8_t>::fromJs(rt, callInvoker, args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_room_subscribe_to_identity_status_changes(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_room_subscribe_to_identity_status_changes(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[1]),
          &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_room_subscribe_to_knock_requests(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_room_subscribe_to_knock_requests(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_room_subscribe_to_room_info_updates(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_room_subscribe_to_room_info_updates(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[1]),
          &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_room_subscribe_to_typing_notifications(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_room_subscribe_to_typing_notifications(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[1]),
          &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_room_suggested_role_for_user(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_room_suggested_role_for_user(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_room_timeline(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_room_timeline(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_room_timeline_focused_on_event(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_room_timeline_focused_on_event(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]),
      uniffi_jsi::Bridging<uint16_t>::fromJs(rt, callInvoker, args[2]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[3]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_room_topic(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_room_topic(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(rt, callInvoker,
                                                            value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_room_typing_notice(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_room_typing_notice(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<int8_t>::fromJs(rt, callInvoker, args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_room_unban_user(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_room_unban_user(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[2]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_room_update_power_levels_for_users(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_room_update_power_levels_for_users(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                               args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_room_upload_avatar(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_room_upload_avatar(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[2]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[3]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_room_withdraw_verification_and_resend(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_room_withdraw_verification_and_resend(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                               args[1]),
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[2]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_clone_roomdirectorysearch(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_clone_roomdirectorysearch(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_free_roomdirectorysearch(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_matrix_sdk_ffi_fn_free_roomdirectorysearch(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_roomdirectorysearch_is_at_last_page(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_roomdirectorysearch_is_at_last_page(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_roomdirectorysearch_loaded_pages(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_roomdirectorysearch_loaded_pages(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_roomdirectorysearch_next_page(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_roomdirectorysearch_next_page(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_roomdirectorysearch_results(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_roomdirectorysearch_results(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_roomdirectorysearch_search(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_roomdirectorysearch_search(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]),
      uniffi_jsi::Bridging<uint32_t>::fromJs(rt, callInvoker, args[2]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[3]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_clone_roomlist(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_clone_roomlist(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_free_roomlist(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_matrix_sdk_ffi_fn_free_roomlist(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_roomlist_entries_with_dynamic_adapters(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_roomlist_entries_with_dynamic_adapters(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          uniffi_jsi::Bridging<uint32_t>::fromJs(rt, callInvoker, args[1]),
          uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[2]),
          &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_roomlist_loading_state(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_roomlist_loading_state(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(rt, callInvoker,
                                                            value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_roomlist_room(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_roomlist_room(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]),
      &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_clone_roomlistdynamicentriescontroller(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_clone_roomlistdynamicentriescontroller(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_free_roomlistdynamicentriescontroller(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_matrix_sdk_ffi_fn_free_roomlistdynamicentriescontroller(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_roomlistdynamicentriescontroller_add_one_page(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_matrix_sdk_ffi_fn_method_roomlistdynamicentriescontroller_add_one_page(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_roomlistdynamicentriescontroller_reset_to_one_page(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_matrix_sdk_ffi_fn_method_roomlistdynamicentriescontroller_reset_to_one_page(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_roomlistdynamicentriescontroller_set_filter(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_roomlistdynamicentriescontroller_set_filter(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                               args[1]),
          &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_clone_roomlistentrieswithdynamicadaptersresult(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_matrix_sdk_ffi_fn_clone_roomlistentrieswithdynamicadaptersresult(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_free_roomlistentrieswithdynamicadaptersresult(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_matrix_sdk_ffi_fn_free_roomlistentrieswithdynamicadaptersresult(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_roomlistentrieswithdynamicadaptersresult_controller(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_roomlistentrieswithdynamicadaptersresult_controller(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_roomlistentrieswithdynamicadaptersresult_entries_stream(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_roomlistentrieswithdynamicadaptersresult_entries_stream(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_clone_roomlistitem(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_clone_roomlistitem(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_free_roomlistitem(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_matrix_sdk_ffi_fn_free_roomlistitem(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_roomlistitem_avatar_url(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_roomlistitem_avatar_url(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(rt, callInvoker,
                                                            value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_roomlistitem_canonical_alias(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_roomlistitem_canonical_alias(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(rt, callInvoker,
                                                            value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_roomlistitem_display_name(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_roomlistitem_display_name(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(rt, callInvoker,
                                                            value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_roomlistitem_full_room(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_roomlistitem_full_room(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_roomlistitem_id(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_roomlistitem_id(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(rt, callInvoker,
                                                            value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_roomlistitem_init_timeline(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_roomlistitem_init_timeline(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[2]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_roomlistitem_invited_room(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_roomlistitem_invited_room(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_roomlistitem_is_direct(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_roomlistitem_is_direct(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_roomlistitem_is_encrypted(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_roomlistitem_is_encrypted(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_roomlistitem_is_timeline_initialized(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_roomlistitem_is_timeline_initialized(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_roomlistitem_latest_event(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_roomlistitem_latest_event(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_roomlistitem_membership(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_roomlistitem_membership(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(rt, callInvoker,
                                                            value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_roomlistitem_preview_room(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_roomlistitem_preview_room(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_roomlistitem_room_info(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_roomlistitem_room_info(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_clone_roomlistservice(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_clone_roomlistservice(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_free_roomlistservice(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_matrix_sdk_ffi_fn_free_roomlistservice(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_roomlistservice_all_rooms(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_roomlistservice_all_rooms(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_roomlistservice_room(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_roomlistservice_room(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]),
      &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_roomlistservice_state(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_roomlistservice_state(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_roomlistservice_subscribe_to_rooms(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_matrix_sdk_ffi_fn_method_roomlistservice_subscribe_to_rooms(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]),
      &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_roomlistservice_sync_indicator(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_roomlistservice_sync_indicator(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<uint32_t>::fromJs(rt, callInvoker, args[1]),
      uniffi_jsi::Bridging<uint32_t>::fromJs(rt, callInvoker, args[2]),
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[3]),
      &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_clone_roommembersiterator(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_clone_roommembersiterator(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_free_roommembersiterator(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_matrix_sdk_ffi_fn_free_roommembersiterator(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_roommembersiterator_len(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_roommembersiterator_len(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<uint32_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_roommembersiterator_next_chunk(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_roommembersiterator_next_chunk(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<uint32_t>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(rt, callInvoker,
                                                            value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_clone_roommessageeventcontentwithoutrelation(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_matrix_sdk_ffi_fn_clone_roommessageeventcontentwithoutrelation(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_free_roommessageeventcontentwithoutrelation(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_matrix_sdk_ffi_fn_free_roommessageeventcontentwithoutrelation(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_roommessageeventcontentwithoutrelation_with_mentions(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_roommessageeventcontentwithoutrelation_with_mentions(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                               args[1]),
          &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_clone_roompreview(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_clone_roompreview(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_free_roompreview(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_matrix_sdk_ffi_fn_free_roompreview(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_roompreview_info(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_roompreview_info(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(rt, callInvoker,
                                                            value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_roompreview_inviter(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_roompreview_inviter(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_roompreview_leave(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_roompreview_leave(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_clone_sendattachmentjoinhandle(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_clone_sendattachmentjoinhandle(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_free_sendattachmentjoinhandle(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_matrix_sdk_ffi_fn_free_sendattachmentjoinhandle(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_sendattachmentjoinhandle_cancel(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_matrix_sdk_ffi_fn_method_sendattachmentjoinhandle_cancel(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_sendattachmentjoinhandle_join(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_sendattachmentjoinhandle_join(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_clone_sendhandle(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_clone_sendhandle(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_free_sendhandle(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_matrix_sdk_ffi_fn_free_sendhandle(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_sendhandle_abort(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_sendhandle_abort(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_sendhandle_try_resend(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_sendhandle_try_resend(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_clone_sessionverificationcontroller(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_clone_sessionverificationcontroller(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_free_sessionverificationcontroller(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_matrix_sdk_ffi_fn_free_sessionverificationcontroller(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_sessionverificationcontroller_accept_verification_request(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_sessionverificationcontroller_accept_verification_request(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_sessionverificationcontroller_acknowledge_verification_request(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_sessionverificationcontroller_acknowledge_verification_request(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                               args[1]),
          uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                               args[2]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_sessionverificationcontroller_approve_verification(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_sessionverificationcontroller_approve_verification(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_sessionverificationcontroller_cancel_verification(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_sessionverificationcontroller_cancel_verification(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_sessionverificationcontroller_decline_verification(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_sessionverificationcontroller_decline_verification(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_sessionverificationcontroller_request_verification(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_sessionverificationcontroller_request_verification(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_sessionverificationcontroller_set_delegate(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_matrix_sdk_ffi_fn_method_sessionverificationcontroller_set_delegate(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]),
      &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_sessionverificationcontroller_start_sas_verification(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_sessionverificationcontroller_start_sas_verification(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_clone_sessionverificationemoji(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_clone_sessionverificationemoji(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_free_sessionverificationemoji(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_matrix_sdk_ffi_fn_free_sessionverificationemoji(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_sessionverificationemoji_description(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_sessionverificationemoji_description(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(rt, callInvoker,
                                                            value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_sessionverificationemoji_symbol(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_sessionverificationemoji_symbol(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(rt, callInvoker,
                                                            value);
}
jsi::Value NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_clone_span(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_clone_span(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_free_span(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_matrix_sdk_ffi_fn_free_span(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_constructor_span_current(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_constructor_span_current(&status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_constructor_span_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_constructor_span_new(
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[2]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[3]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[4]),
      &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_span_enter(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_matrix_sdk_ffi_fn_method_span_enter(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_span_exit(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_matrix_sdk_ffi_fn_method_span_exit(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_span_is_none(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_span_is_none(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_clone_ssohandler(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_clone_ssohandler(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_free_ssohandler(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_matrix_sdk_ffi_fn_free_ssohandler(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_ssohandler_finish(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_ssohandler_finish(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_ssohandler_url(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_ssohandler_url(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(rt, callInvoker,
                                                            value);
}
jsi::Value NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_clone_syncservice(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_clone_syncservice(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_free_syncservice(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_matrix_sdk_ffi_fn_free_syncservice(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_syncservice_room_list_service(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_syncservice_room_list_service(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_syncservice_start(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_syncservice_start(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_syncservice_state(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_syncservice_state(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_syncservice_stop(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_syncservice_stop(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_clone_syncservicebuilder(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_clone_syncservicebuilder(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_free_syncservicebuilder(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_matrix_sdk_ffi_fn_free_syncservicebuilder(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_syncservicebuilder_finish(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_syncservicebuilder_finish(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_syncservicebuilder_with_cross_process_lock(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_syncservicebuilder_with_cross_process_lock(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_syncservicebuilder_with_utd_hook(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_syncservicebuilder_with_utd_hook(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_clone_taskhandle(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_clone_taskhandle(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_free_taskhandle(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_matrix_sdk_ffi_fn_free_taskhandle(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_taskhandle_cancel(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_matrix_sdk_ffi_fn_method_taskhandle_cancel(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_taskhandle_is_finished(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_taskhandle_is_finished(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_clone_timeline(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_clone_timeline(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_free_timeline(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_matrix_sdk_ffi_fn_free_timeline(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_timeline_add_listener(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_timeline_add_listener(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_timeline_create_message_content(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_timeline_create_message_content(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]),
      &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(rt, callInvoker,
                                                            value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_timeline_create_poll(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_timeline_create_poll(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[2]),
      uniffi_jsi::Bridging<uint8_t>::fromJs(rt, callInvoker, args[3]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[4]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_timeline_edit(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_timeline_edit(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[2]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_timeline_end_poll(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_matrix_sdk_ffi_fn_method_timeline_end_poll(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[2]),
      &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_timeline_fetch_details_for_event(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_timeline_fetch_details_for_event(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_timeline_fetch_members(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_timeline_fetch_members(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_timeline_focused_paginate_forwards(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_timeline_focused_paginate_forwards(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          uniffi_jsi::Bridging<uint16_t>::fromJs(rt, callInvoker, args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_timeline_get_event_timeline_item_by_event_id(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_timeline_get_event_timeline_item_by_event_id(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                               args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_timeline_load_reply_details(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_timeline_load_reply_details(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_timeline_mark_as_read(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_timeline_mark_as_read(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_timeline_paginate_backwards(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_timeline_paginate_backwards(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<uint16_t>::fromJs(rt, callInvoker, args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_timeline_pin_event(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_timeline_pin_event(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_timeline_redact_event(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_timeline_redact_event(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[2]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_timeline_retry_decryption(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_matrix_sdk_ffi_fn_method_timeline_retry_decryption(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]),
      &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_timeline_send(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_timeline_send(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_timeline_send_audio(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_timeline_send_audio(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[2]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[3]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[4]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[5]),
      uniffi_jsi::Bridging<int8_t>::fromJs(rt, callInvoker, args[6]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_timeline_send_file(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_timeline_send_file(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[2]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[3]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[4]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[5]),
      uniffi_jsi::Bridging<int8_t>::fromJs(rt, callInvoker, args[6]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_timeline_send_image(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_timeline_send_image(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[2]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[3]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[4]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[5]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[6]),
      uniffi_jsi::Bridging<int8_t>::fromJs(rt, callInvoker, args[7]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_timeline_send_location(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_timeline_send_location(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[2]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[3]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[4]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[5]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_timeline_send_poll_response(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_timeline_send_poll_response(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[2]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_timeline_send_read_receipt(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_timeline_send_read_receipt(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[2]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_timeline_send_reply(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_timeline_send_reply(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[2]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_timeline_send_video(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_timeline_send_video(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[2]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[3]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[4]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[5]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[6]),
      uniffi_jsi::Bridging<int8_t>::fromJs(rt, callInvoker, args[7]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_timeline_send_voice_message(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_timeline_send_voice_message(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[2]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[3]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[4]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[5]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[6]),
      uniffi_jsi::Bridging<int8_t>::fromJs(rt, callInvoker, args[7]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_timeline_subscribe_to_back_pagination_status(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_timeline_subscribe_to_back_pagination_status(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_timeline_toggle_reaction(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_timeline_toggle_reaction(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[2]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_timeline_unpin_event(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_timeline_unpin_event(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_clone_timelinediff(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_clone_timelinediff(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_free_timelinediff(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_matrix_sdk_ffi_fn_free_timelinediff(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_timelinediff_append(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_timelinediff_append(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(rt, callInvoker,
                                                            value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_timelinediff_change(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_timelinediff_change(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(rt, callInvoker,
                                                            value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_timelinediff_insert(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_timelinediff_insert(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(rt, callInvoker,
                                                            value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_timelinediff_push_back(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_timelinediff_push_back(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(rt, callInvoker,
                                                            value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_timelinediff_push_front(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_timelinediff_push_front(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(rt, callInvoker,
                                                            value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_timelinediff_remove(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_timelinediff_remove(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(rt, callInvoker,
                                                            value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_timelinediff_reset(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_timelinediff_reset(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(rt, callInvoker,
                                                            value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_timelinediff_set(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_timelinediff_set(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(rt, callInvoker,
                                                            value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_timelinediff_truncate(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_timelinediff_truncate(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(rt, callInvoker,
                                                            value);
}
jsi::Value NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_clone_timelineevent(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_clone_timelineevent(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_free_timelineevent(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_matrix_sdk_ffi_fn_free_timelineevent(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_timelineevent_event_id(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_timelineevent_event_id(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(rt, callInvoker,
                                                            value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_timelineevent_event_type(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_timelineevent_event_type(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(rt, callInvoker,
                                                            value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_timelineevent_sender_id(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_timelineevent_sender_id(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(rt, callInvoker,
                                                            value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_timelineevent_timestamp(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_timelineevent_timestamp(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_clone_timelineeventtypefilter(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_clone_timelineeventtypefilter(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_free_timelineeventtypefilter(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_matrix_sdk_ffi_fn_free_timelineeventtypefilter(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_constructor_timelineeventtypefilter_exclude(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_matrix_sdk_ffi_fn_constructor_timelineeventtypefilter_exclude(
          uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                               args[0]),
          &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_constructor_timelineeventtypefilter_include(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_matrix_sdk_ffi_fn_constructor_timelineeventtypefilter_include(
          uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                               args[0]),
          &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_clone_timelineitem(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_clone_timelineitem(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_free_timelineitem(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_matrix_sdk_ffi_fn_free_timelineitem(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_timelineitem_as_event(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_timelineitem_as_event(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(rt, callInvoker,
                                                            value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_timelineitem_as_virtual(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_timelineitem_as_virtual(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(rt, callInvoker,
                                                            value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_timelineitem_fmt_debug(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_timelineitem_fmt_debug(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(rt, callInvoker,
                                                            value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_timelineitem_unique_id(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_timelineitem_unique_id(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(rt, callInvoker,
                                                            value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_clone_unreadnotificationscount(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_clone_unreadnotificationscount(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_free_unreadnotificationscount(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_matrix_sdk_ffi_fn_free_unreadnotificationscount(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_unreadnotificationscount_has_notifications(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_unreadnotificationscount_has_notifications(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_unreadnotificationscount_highlight_count(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_unreadnotificationscount_highlight_count(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<uint32_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_unreadnotificationscount_notification_count(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_matrix_sdk_ffi_fn_method_unreadnotificationscount_notification_count(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<uint32_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_clone_useridentity(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_clone_useridentity(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_free_useridentity(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_matrix_sdk_ffi_fn_free_useridentity(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_method_useridentity_is_verified(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_useridentity_is_verified(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_useridentity_master_key(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_method_useridentity_master_key(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(rt, callInvoker,
                                                            value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_useridentity_pin(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_useridentity_pin(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_clone_widgetdriver(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_clone_widgetdriver(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_free_widgetdriver(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_matrix_sdk_ffi_fn_free_widgetdriver(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_widgetdriver_run(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_widgetdriver_run(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]),
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[2]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_clone_widgetdriverhandle(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_clone_widgetdriverhandle(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_free_widgetdriverhandle(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_matrix_sdk_ffi_fn_free_widgetdriverhandle(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_widgetdriverhandle_recv(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_widgetdriverhandle_recv(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_method_widgetdriverhandle_send(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_method_widgetdriverhandle_send(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_func_content_without_relation_from_message(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_matrix_sdk_ffi_fn_func_content_without_relation_from_message(
          uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                               args[0]),
          &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_func_create_caption_edit(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_func_create_caption_edit(
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]),
      &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(rt, callInvoker,
                                                            value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_func_gen_transaction_id(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_func_gen_transaction_id(&status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(rt, callInvoker,
                                                            value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_func_generate_webview_url(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_fn_func_generate_webview_url(
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[2]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_func_get_element_call_required_permissions(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_matrix_sdk_ffi_fn_func_get_element_call_required_permissions(
          uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                               args[0]),
          uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                               args[1]),
          &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(rt, callInvoker,
                                                            value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_func_is_room_alias_format_valid(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_func_is_room_alias_format_valid(
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[0]),
      &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_func_log_event(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_matrix_sdk_ffi_fn_func_log_event(
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[2]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[3]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[4]),
      &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_func_make_element_well_known(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_func_make_element_well_known(
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[0]),
      &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(rt, callInvoker,
                                                            value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_func_make_widget_driver(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_func_make_widget_driver(
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[0]),
      &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(rt, callInvoker,
                                                            value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_func_matrix_to_room_alias_permalink(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_func_matrix_to_room_alias_permalink(
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[0]),
      &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(rt, callInvoker,
                                                            value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_func_matrix_to_user_permalink(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_func_matrix_to_user_permalink(
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[0]),
      &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(rt, callInvoker,
                                                            value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_func_message_event_content_from_html(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_func_message_event_content_from_html(
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[0]),
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[1]),
      &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_func_message_event_content_from_html_as_emote(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_matrix_sdk_ffi_fn_func_message_event_content_from_html_as_emote(
          uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                               args[0]),
          uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                               args[1]),
          &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_func_message_event_content_from_markdown(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_matrix_sdk_ffi_fn_func_message_event_content_from_markdown(
          uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                               args[0]),
          &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_func_message_event_content_from_markdown_as_emote(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_matrix_sdk_ffi_fn_func_message_event_content_from_markdown_as_emote(
          uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                               args[0]),
          &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_func_message_event_content_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_func_message_event_content_new(
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[0]),
      &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_func_new_virtual_element_call_widget(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_func_new_virtual_element_call_widget(
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[0]),
      &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(rt, callInvoker,
                                                            value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_func_parse_matrix_entity_from(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_func_parse_matrix_entity_from(
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[0]),
      &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(rt, callInvoker,
                                                            value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_func_room_alias_name_from_room_display_name(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_matrix_sdk_ffi_fn_func_room_alias_name_from_room_display_name(
          uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                               args[0]),
          &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(rt, callInvoker,
                                                            value);
}
jsi::Value NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_func_sdk_git_sha(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_func_sdk_git_sha(&status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(rt, callInvoker,
                                                            value);
}
jsi::Value NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_fn_func_setup_tracing(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_matrix_sdk_ffi_fn_func_setup_tracing(
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[0]),
      &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_func_suggested_power_level_for_role(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_func_suggested_power_level_for_role(
      uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                           args[0]),
      &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int64_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_func_suggested_role_for_power_level(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_matrix_sdk_ffi_fn_func_suggested_role_for_power_level(
      uniffi_jsi::Bridging<int64_t>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(rt, callInvoker,
                                                            value);
}
jsi::Value NativeMatrixSdkFfi::cpp_ffi_matrix_sdk_ffi_rust_future_poll_u8(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  ffi_matrix_sdk_ffi_rust_future_poll_u8(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]),
      uniffi::matrix_sdk_ffi::Bridging<
          UniffiRustFutureContinuationCallback>::fromJs(rt, callInvoker,
                                                        args[1]),
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[2]));

  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::cpp_ffi_matrix_sdk_ffi_rust_future_cancel_u8(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  ffi_matrix_sdk_ffi_rust_future_cancel_u8(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]));

  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::cpp_ffi_matrix_sdk_ffi_rust_future_free_u8(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  ffi_matrix_sdk_ffi_rust_future_free_u8(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]));

  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::cpp_ffi_matrix_sdk_ffi_rust_future_complete_u8(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = ffi_matrix_sdk_ffi_rust_future_complete_u8(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]),
      &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<uint8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::cpp_ffi_matrix_sdk_ffi_rust_future_poll_i8(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  ffi_matrix_sdk_ffi_rust_future_poll_i8(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]),
      uniffi::matrix_sdk_ffi::Bridging<
          UniffiRustFutureContinuationCallback>::fromJs(rt, callInvoker,
                                                        args[1]),
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[2]));

  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::cpp_ffi_matrix_sdk_ffi_rust_future_cancel_i8(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  ffi_matrix_sdk_ffi_rust_future_cancel_i8(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]));

  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::cpp_ffi_matrix_sdk_ffi_rust_future_free_i8(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  ffi_matrix_sdk_ffi_rust_future_free_i8(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]));

  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::cpp_ffi_matrix_sdk_ffi_rust_future_complete_i8(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = ffi_matrix_sdk_ffi_rust_future_complete_i8(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]),
      &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::cpp_ffi_matrix_sdk_ffi_rust_future_poll_u16(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  ffi_matrix_sdk_ffi_rust_future_poll_u16(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]),
      uniffi::matrix_sdk_ffi::Bridging<
          UniffiRustFutureContinuationCallback>::fromJs(rt, callInvoker,
                                                        args[1]),
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[2]));

  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::cpp_ffi_matrix_sdk_ffi_rust_future_cancel_u16(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  ffi_matrix_sdk_ffi_rust_future_cancel_u16(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]));

  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::cpp_ffi_matrix_sdk_ffi_rust_future_free_u16(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  ffi_matrix_sdk_ffi_rust_future_free_u16(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]));

  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::cpp_ffi_matrix_sdk_ffi_rust_future_complete_u16(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = ffi_matrix_sdk_ffi_rust_future_complete_u16(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]),
      &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::cpp_ffi_matrix_sdk_ffi_rust_future_poll_i16(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  ffi_matrix_sdk_ffi_rust_future_poll_i16(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]),
      uniffi::matrix_sdk_ffi::Bridging<
          UniffiRustFutureContinuationCallback>::fromJs(rt, callInvoker,
                                                        args[1]),
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[2]));

  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::cpp_ffi_matrix_sdk_ffi_rust_future_cancel_i16(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  ffi_matrix_sdk_ffi_rust_future_cancel_i16(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]));

  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::cpp_ffi_matrix_sdk_ffi_rust_future_free_i16(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  ffi_matrix_sdk_ffi_rust_future_free_i16(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]));

  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::cpp_ffi_matrix_sdk_ffi_rust_future_complete_i16(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = ffi_matrix_sdk_ffi_rust_future_complete_i16(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]),
      &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::cpp_ffi_matrix_sdk_ffi_rust_future_poll_u32(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  ffi_matrix_sdk_ffi_rust_future_poll_u32(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]),
      uniffi::matrix_sdk_ffi::Bridging<
          UniffiRustFutureContinuationCallback>::fromJs(rt, callInvoker,
                                                        args[1]),
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[2]));

  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::cpp_ffi_matrix_sdk_ffi_rust_future_cancel_u32(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  ffi_matrix_sdk_ffi_rust_future_cancel_u32(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]));

  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::cpp_ffi_matrix_sdk_ffi_rust_future_free_u32(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  ffi_matrix_sdk_ffi_rust_future_free_u32(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]));

  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::cpp_ffi_matrix_sdk_ffi_rust_future_complete_u32(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = ffi_matrix_sdk_ffi_rust_future_complete_u32(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]),
      &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<uint32_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::cpp_ffi_matrix_sdk_ffi_rust_future_poll_i32(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  ffi_matrix_sdk_ffi_rust_future_poll_i32(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]),
      uniffi::matrix_sdk_ffi::Bridging<
          UniffiRustFutureContinuationCallback>::fromJs(rt, callInvoker,
                                                        args[1]),
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[2]));

  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::cpp_ffi_matrix_sdk_ffi_rust_future_cancel_i32(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  ffi_matrix_sdk_ffi_rust_future_cancel_i32(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]));

  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::cpp_ffi_matrix_sdk_ffi_rust_future_free_i32(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  ffi_matrix_sdk_ffi_rust_future_free_i32(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]));

  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::cpp_ffi_matrix_sdk_ffi_rust_future_complete_i32(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = ffi_matrix_sdk_ffi_rust_future_complete_i32(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]),
      &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int32_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::cpp_ffi_matrix_sdk_ffi_rust_future_poll_u64(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  ffi_matrix_sdk_ffi_rust_future_poll_u64(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]),
      uniffi::matrix_sdk_ffi::Bridging<
          UniffiRustFutureContinuationCallback>::fromJs(rt, callInvoker,
                                                        args[1]),
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[2]));

  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::cpp_ffi_matrix_sdk_ffi_rust_future_cancel_u64(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  ffi_matrix_sdk_ffi_rust_future_cancel_u64(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]));

  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::cpp_ffi_matrix_sdk_ffi_rust_future_free_u64(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  ffi_matrix_sdk_ffi_rust_future_free_u64(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]));

  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::cpp_ffi_matrix_sdk_ffi_rust_future_complete_u64(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = ffi_matrix_sdk_ffi_rust_future_complete_u64(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]),
      &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::cpp_ffi_matrix_sdk_ffi_rust_future_poll_i64(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  ffi_matrix_sdk_ffi_rust_future_poll_i64(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]),
      uniffi::matrix_sdk_ffi::Bridging<
          UniffiRustFutureContinuationCallback>::fromJs(rt, callInvoker,
                                                        args[1]),
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[2]));

  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::cpp_ffi_matrix_sdk_ffi_rust_future_cancel_i64(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  ffi_matrix_sdk_ffi_rust_future_cancel_i64(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]));

  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::cpp_ffi_matrix_sdk_ffi_rust_future_free_i64(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  ffi_matrix_sdk_ffi_rust_future_free_i64(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]));

  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::cpp_ffi_matrix_sdk_ffi_rust_future_complete_i64(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = ffi_matrix_sdk_ffi_rust_future_complete_i64(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]),
      &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int64_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::cpp_ffi_matrix_sdk_ffi_rust_future_poll_f32(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  ffi_matrix_sdk_ffi_rust_future_poll_f32(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]),
      uniffi::matrix_sdk_ffi::Bridging<
          UniffiRustFutureContinuationCallback>::fromJs(rt, callInvoker,
                                                        args[1]),
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[2]));

  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::cpp_ffi_matrix_sdk_ffi_rust_future_cancel_f32(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  ffi_matrix_sdk_ffi_rust_future_cancel_f32(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]));

  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::cpp_ffi_matrix_sdk_ffi_rust_future_free_f32(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  ffi_matrix_sdk_ffi_rust_future_free_f32(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]));

  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::cpp_ffi_matrix_sdk_ffi_rust_future_complete_f32(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = ffi_matrix_sdk_ffi_rust_future_complete_f32(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]),
      &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<float>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::cpp_ffi_matrix_sdk_ffi_rust_future_poll_f64(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  ffi_matrix_sdk_ffi_rust_future_poll_f64(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]),
      uniffi::matrix_sdk_ffi::Bridging<
          UniffiRustFutureContinuationCallback>::fromJs(rt, callInvoker,
                                                        args[1]),
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[2]));

  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::cpp_ffi_matrix_sdk_ffi_rust_future_cancel_f64(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  ffi_matrix_sdk_ffi_rust_future_cancel_f64(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]));

  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::cpp_ffi_matrix_sdk_ffi_rust_future_free_f64(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  ffi_matrix_sdk_ffi_rust_future_free_f64(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]));

  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::cpp_ffi_matrix_sdk_ffi_rust_future_complete_f64(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = ffi_matrix_sdk_ffi_rust_future_complete_f64(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]),
      &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<double>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::cpp_ffi_matrix_sdk_ffi_rust_future_poll_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  ffi_matrix_sdk_ffi_rust_future_poll_pointer(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]),
      uniffi::matrix_sdk_ffi::Bridging<
          UniffiRustFutureContinuationCallback>::fromJs(rt, callInvoker,
                                                        args[1]),
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[2]));

  return jsi::Value::undefined();
}
jsi::Value
NativeMatrixSdkFfi::cpp_ffi_matrix_sdk_ffi_rust_future_cancel_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  ffi_matrix_sdk_ffi_rust_future_cancel_pointer(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]));

  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::cpp_ffi_matrix_sdk_ffi_rust_future_free_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  ffi_matrix_sdk_ffi_rust_future_free_pointer(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]));

  return jsi::Value::undefined();
}
jsi::Value
NativeMatrixSdkFfi::cpp_ffi_matrix_sdk_ffi_rust_future_complete_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = ffi_matrix_sdk_ffi_rust_future_complete_pointer(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]),
      &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_ffi_matrix_sdk_ffi_rust_future_poll_rust_buffer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  ffi_matrix_sdk_ffi_rust_future_poll_rust_buffer(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]),
      uniffi::matrix_sdk_ffi::Bridging<
          UniffiRustFutureContinuationCallback>::fromJs(rt, callInvoker,
                                                        args[1]),
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[2]));

  return jsi::Value::undefined();
}
jsi::Value
NativeMatrixSdkFfi::cpp_ffi_matrix_sdk_ffi_rust_future_cancel_rust_buffer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  ffi_matrix_sdk_ffi_rust_future_cancel_rust_buffer(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]));

  return jsi::Value::undefined();
}
jsi::Value
NativeMatrixSdkFfi::cpp_ffi_matrix_sdk_ffi_rust_future_free_rust_buffer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  ffi_matrix_sdk_ffi_rust_future_free_rust_buffer(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]));

  return jsi::Value::undefined();
}
jsi::Value
NativeMatrixSdkFfi::cpp_ffi_matrix_sdk_ffi_rust_future_complete_rust_buffer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = ffi_matrix_sdk_ffi_rust_future_complete_rust_buffer(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]),
      &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::matrix_sdk_ffi::Bridging<RustBuffer>::toJs(rt, callInvoker,
                                                            value);
}
jsi::Value NativeMatrixSdkFfi::cpp_ffi_matrix_sdk_ffi_rust_future_poll_void(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  ffi_matrix_sdk_ffi_rust_future_poll_void(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]),
      uniffi::matrix_sdk_ffi::Bridging<
          UniffiRustFutureContinuationCallback>::fromJs(rt, callInvoker,
                                                        args[1]),
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[2]));

  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::cpp_ffi_matrix_sdk_ffi_rust_future_cancel_void(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  ffi_matrix_sdk_ffi_rust_future_cancel_void(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]));

  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::cpp_ffi_matrix_sdk_ffi_rust_future_free_void(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  ffi_matrix_sdk_ffi_rust_future_free_void(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]));

  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::cpp_ffi_matrix_sdk_ffi_rust_future_complete_void(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::rustSuccess(rt);
  ffi_matrix_sdk_ffi_rust_future_complete_void(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]),
      &status);
  uniffi::matrix_sdk_ffi::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_func_content_without_relation_from_message(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_func_content_without_relation_from_message();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_checksum_func_create_caption_edit(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_func_create_caption_edit();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_checksum_func_gen_transaction_id(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_func_gen_transaction_id();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_func_generate_webview_url(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_func_generate_webview_url();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_func_get_element_call_required_permissions(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_func_get_element_call_required_permissions();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_func_is_room_alias_format_valid(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_func_is_room_alias_format_valid();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_checksum_func_log_event(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_func_log_event();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_func_make_element_well_known(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_func_make_element_well_known();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_checksum_func_make_widget_driver(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_func_make_widget_driver();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_func_matrix_to_room_alias_permalink(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_func_matrix_to_room_alias_permalink();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_func_matrix_to_user_permalink(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_func_matrix_to_user_permalink();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_func_message_event_content_from_html(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_func_message_event_content_from_html();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_func_message_event_content_from_html_as_emote(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_func_message_event_content_from_html_as_emote();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_func_message_event_content_from_markdown(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_func_message_event_content_from_markdown();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_func_message_event_content_from_markdown_as_emote(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_func_message_event_content_from_markdown_as_emote();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_func_message_event_content_new(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_func_message_event_content_new();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_func_new_virtual_element_call_widget(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_func_new_virtual_element_call_widget();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_func_parse_matrix_entity_from(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_func_parse_matrix_entity_from();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_func_room_alias_name_from_room_display_name(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_func_room_alias_name_from_room_display_name();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_checksum_func_sdk_git_sha(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_func_sdk_git_sha();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_checksum_func_setup_tracing(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_func_setup_tracing();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_func_suggested_power_level_for_role(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_func_suggested_power_level_for_role();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_func_suggested_role_for_power_level(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_func_suggested_role_for_power_level();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_client_abort_oidc_auth(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_client_abort_oidc_auth();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_client_account_data(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_client_account_data();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_client_account_url(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_client_account_url();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_client_available_sliding_sync_versions(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_client_available_sliding_sync_versions();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_checksum_method_client_avatar_url(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_client_avatar_url();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_client_await_room_remote_echo(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_client_await_room_remote_echo();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_client_cached_avatar_url(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_client_cached_avatar_url();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_client_can_deactivate_account(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_client_can_deactivate_account();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_client_create_room(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_client_create_room();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_client_create_room_alias(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_client_create_room_alias();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_client_custom_login_with_jwt(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_client_custom_login_with_jwt();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_client_deactivate_account(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_client_deactivate_account();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_client_delete_pusher(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_client_delete_pusher();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_checksum_method_client_device_id(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_client_device_id();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_client_display_name(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_client_display_name();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_client_enable_all_send_queues(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_client_enable_all_send_queues();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_checksum_method_client_encryption(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_client_encryption();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_client_get_dm_room(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_client_get_dm_room();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_client_get_media_content(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_client_get_media_content();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_client_get_media_file(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_client_get_media_file();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_client_get_media_thumbnail(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_client_get_media_thumbnail();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_client_get_notification_settings(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_client_get_notification_settings();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_client_get_profile(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_client_get_profile();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_client_get_recently_visited_rooms(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_client_get_recently_visited_rooms();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_client_get_room_preview_from_room_alias(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_client_get_room_preview_from_room_alias();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_client_get_room_preview_from_room_id(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_client_get_room_preview_from_room_id();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_client_get_session_verification_controller(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_client_get_session_verification_controller();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_checksum_method_client_get_url(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_client_get_url();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_checksum_method_client_homeserver(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_client_homeserver();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_client_homeserver_login_details(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_client_homeserver_login_details();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_client_ignore_user(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_client_ignore_user();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_client_ignored_users(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_client_ignored_users();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_client_is_room_alias_available(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_client_is_room_alias_available();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_client_join_room_by_id(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_client_join_room_by_id();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_client_join_room_by_id_or_alias(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_client_join_room_by_id_or_alias();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_checksum_method_client_knock(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_client_knock();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_checksum_method_client_login(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_client_login();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_client_login_with_email(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_client_login_with_email();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_client_login_with_oidc_callback(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_client_login_with_oidc_callback();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_checksum_method_client_logout(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_client_logout();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_client_notification_client(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_client_notification_client();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_client_remove_avatar(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_client_remove_avatar();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_client_reset_server_capabilities(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_client_reset_server_capabilities();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_client_resolve_room_alias(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_client_resolve_room_alias();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_client_restore_session(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_client_restore_session();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_client_room_alias_exists(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_client_room_alias_exists();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_client_room_directory_search(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_client_room_directory_search();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_checksum_method_client_rooms(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_client_rooms();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_client_search_users(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_client_search_users();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_checksum_method_client_server(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_client_server();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_checksum_method_client_session(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_client_session();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_client_set_account_data(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_client_set_account_data();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_client_set_delegate(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_client_set_delegate();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_client_set_display_name(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_client_set_display_name();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_checksum_method_client_set_pusher(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_client_set_pusher();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_client_sliding_sync_version(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_client_sliding_sync_version();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_client_start_sso_login(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_client_start_sso_login();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_client_subscribe_to_ignored_users(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_client_subscribe_to_ignored_users();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_client_subscribe_to_send_queue_status(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_client_subscribe_to_send_queue_status();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_client_sync_service(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_client_sync_service();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_client_track_recently_visited_room(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_client_track_recently_visited_room();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_client_unignore_user(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_client_unignore_user();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_client_upload_avatar(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_client_upload_avatar();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_client_upload_media(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_client_upload_media();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_client_url_for_oidc(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_client_url_for_oidc();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_checksum_method_client_user_id(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_client_user_id();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_client_user_id_server_name(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_client_user_id_server_name();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_add_root_certificates(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_add_root_certificates();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_auto_enable_backups(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_auto_enable_backups();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_auto_enable_cross_signing(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_auto_enable_cross_signing();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_backup_download_strategy(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_backup_download_strategy();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_build(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_build();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_build_with_qr_code(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_build_with_qr_code();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_cross_process_store_locks_holder_name(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_cross_process_store_locks_holder_name();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_disable_automatic_token_refresh(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_disable_automatic_token_refresh();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_disable_built_in_root_certificates(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_disable_built_in_root_certificates();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_disable_ssl_verification(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_disable_ssl_verification();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_enable_oidc_refresh_lock(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_enable_oidc_refresh_lock();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_homeserver_url(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_homeserver_url();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_passphrase(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_passphrase();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_proxy(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_proxy();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_request_config(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_request_config();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_room_decryption_trust_requirement(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_room_decryption_trust_requirement();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_room_key_recipient_strategy(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_room_key_recipient_strategy();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_server_name(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_server_name();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_server_name_or_homeserver_url(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_server_name_or_homeserver_url();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_session_paths(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_session_paths();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_set_session_delegate(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_set_session_delegate();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_sliding_sync_version_builder(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_sliding_sync_version_builder();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_use_event_cache_persistent_storage(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_use_event_cache_persistent_storage();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_user_agent(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_user_agent();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_username(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_username();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_encryption_backup_exists_on_server(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_encryption_backup_exists_on_server();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_encryption_backup_state(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_encryption_backup_state();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_encryption_backup_state_listener(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_encryption_backup_state_listener();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_encryption_curve25519_key(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_encryption_curve25519_key();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_encryption_disable_recovery(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_encryption_disable_recovery();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_encryption_ed25519_key(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_encryption_ed25519_key();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_encryption_enable_backups(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_encryption_enable_backups();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_encryption_enable_recovery(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_encryption_enable_recovery();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_encryption_is_last_device(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_encryption_is_last_device();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_encryption_recover(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_encryption_recover();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_encryption_recover_and_reset(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_encryption_recover_and_reset();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_encryption_recovery_state(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_encryption_recovery_state();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_encryption_recovery_state_listener(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_encryption_recovery_state_listener();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_encryption_reset_identity(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_encryption_reset_identity();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_encryption_reset_recovery_key(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_encryption_reset_recovery_key();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_encryption_user_identity(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_encryption_user_identity();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_encryption_verification_state(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_encryption_verification_state();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_encryption_verification_state_listener(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_encryption_verification_state_listener();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_encryption_wait_for_backup_upload_steady_state(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_encryption_wait_for_backup_upload_steady_state();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_encryption_wait_for_e2ee_initialization_tasks(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_encryption_wait_for_e2ee_initialization_tasks();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_homeserverlogindetails_sliding_sync_version(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_homeserverlogindetails_sliding_sync_version();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_homeserverlogindetails_supported_oidc_prompts(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_homeserverlogindetails_supported_oidc_prompts();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_homeserverlogindetails_supports_oidc_login(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_homeserverlogindetails_supports_oidc_login();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_homeserverlogindetails_supports_password_login(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_homeserverlogindetails_supports_password_login();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_homeserverlogindetails_url(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_homeserverlogindetails_url();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_identityresethandle_auth_type(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_identityresethandle_auth_type();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_identityresethandle_cancel(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_identityresethandle_cancel();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_identityresethandle_reset(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_identityresethandle_reset();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_inreplytodetails_event(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_inreplytodetails_event();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_inreplytodetails_event_id(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_inreplytodetails_event_id();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_knockrequestactions_accept(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_knockrequestactions_accept();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_knockrequestactions_decline(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_knockrequestactions_decline();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_knockrequestactions_decline_and_ban(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_knockrequestactions_decline_and_ban();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_knockrequestactions_mark_as_seen(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_knockrequestactions_mark_as_seen();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_lazytimelineitemprovider_debug_info(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_lazytimelineitemprovider_debug_info();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_lazytimelineitemprovider_get_send_handle(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_lazytimelineitemprovider_get_send_handle();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_lazytimelineitemprovider_get_shields(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_lazytimelineitemprovider_get_shields();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_mediafilehandle_path(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_mediafilehandle_path();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_mediafilehandle_persist(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_mediafilehandle_persist();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_mediasource_to_json(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_mediasource_to_json();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_checksum_method_mediasource_url(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_mediasource_url();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_notificationclient_get_notification(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_notificationclient_get_notification();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_can_homeserver_push_encrypted_event_to_device(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_can_homeserver_push_encrypted_event_to_device();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_can_push_encrypted_event_to_device(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_can_push_encrypted_event_to_device();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_contains_keywords_rules(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_contains_keywords_rules();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_get_default_room_notification_mode(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_get_default_room_notification_mode();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_get_room_notification_settings(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_get_room_notification_settings();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_get_rooms_with_user_defined_rules(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_get_rooms_with_user_defined_rules();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_get_user_defined_room_notification_mode(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_get_user_defined_room_notification_mode();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_is_call_enabled(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_is_call_enabled();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_is_invite_for_me_enabled(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_is_invite_for_me_enabled();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_is_room_mention_enabled(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_is_room_mention_enabled();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_is_user_mention_enabled(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_is_user_mention_enabled();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_restore_default_room_notification_mode(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_restore_default_room_notification_mode();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_set_call_enabled(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_set_call_enabled();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_set_default_room_notification_mode(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_set_default_room_notification_mode();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_set_delegate(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_set_delegate();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_set_invite_for_me_enabled(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_set_invite_for_me_enabled();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_set_room_mention_enabled(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_set_room_mention_enabled();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_set_room_notification_mode(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_set_room_notification_mode();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_set_user_mention_enabled(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_set_user_mention_enabled();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_unmute_room(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_unmute_room();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_room_active_members_count(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_room_active_members_count();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_room_active_room_call_participants(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_room_active_room_call_participants();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_room_alternative_aliases(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_room_alternative_aliases();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_room_apply_power_level_changes(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_room_apply_power_level_changes();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_checksum_method_room_avatar_url(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_room_avatar_url();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_checksum_method_room_ban_user(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_room_ban_user();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_checksum_method_room_can_user_ban(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_room_can_user_ban();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_room_can_user_invite(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_room_can_user_invite();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_room_can_user_kick(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_room_can_user_kick();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_room_can_user_pin_unpin(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_room_can_user_pin_unpin();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_room_can_user_redact_other(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_room_can_user_redact_other();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_room_can_user_redact_own(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_room_can_user_redact_own();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_room_can_user_send_message(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_room_can_user_send_message();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_room_can_user_send_state(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_room_can_user_send_state();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_room_can_user_trigger_room_notification(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_room_can_user_trigger_room_notification();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_room_canonical_alias(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_room_canonical_alias();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_room_clear_composer_draft(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_room_clear_composer_draft();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_room_clear_event_cache_storage(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_room_clear_event_cache_storage();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_room_discard_room_key(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_room_discard_room_key();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_checksum_method_room_display_name(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_room_display_name();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_checksum_method_room_edit(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_room_edit();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_room_enable_send_queue(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_room_enable_send_queue();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_room_get_power_levels(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_room_get_power_levels();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_room_has_active_room_call(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_room_has_active_room_call();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_checksum_method_room_heroes(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_room_heroes();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_checksum_method_room_id(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_room_id();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_room_ignore_device_trust_and_resend(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_room_ignore_device_trust_and_resend();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_checksum_method_room_ignore_user(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_room_ignore_user();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_room_invite_user_by_id(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_room_invite_user_by_id();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_room_invited_members_count(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_room_invited_members_count();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_checksum_method_room_inviter(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_room_inviter();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_checksum_method_room_is_direct(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_room_is_direct();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_checksum_method_room_is_encrypted(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_room_is_encrypted();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_checksum_method_room_is_public(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_room_is_public();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_room_is_send_queue_enabled(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_room_is_send_queue_enabled();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_checksum_method_room_is_space(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_room_is_space();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_room_is_tombstoned(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_room_is_tombstoned();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_checksum_method_room_join(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_room_join();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_room_joined_members_count(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_room_joined_members_count();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_checksum_method_room_kick_user(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_room_kick_user();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_checksum_method_room_leave(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_room_leave();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_room_load_composer_draft(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_room_load_composer_draft();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_checksum_method_room_mark_as_read(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_room_mark_as_read();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_room_matrix_to_event_permalink(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_room_matrix_to_event_permalink();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_room_matrix_to_permalink(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_room_matrix_to_permalink();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_checksum_method_room_member(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_room_member();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_room_member_avatar_url(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_room_member_avatar_url();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_room_member_display_name(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_room_member_display_name();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_checksum_method_room_members(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_room_members();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_room_members_no_sync(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_room_members_no_sync();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_checksum_method_room_membership(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_room_membership();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_room_message_filtered_timeline(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_room_message_filtered_timeline();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_checksum_method_room_own_user_id(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_room_own_user_id();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_room_pinned_events_timeline(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_room_pinned_events_timeline();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_checksum_method_room_raw_name(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_room_raw_name();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_checksum_method_room_redact(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_room_redact();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_room_remove_avatar(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_room_remove_avatar();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_room_report_content(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_room_report_content();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_room_reset_power_levels(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_room_reset_power_levels();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_room_room_events_debug_string(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_room_room_events_debug_string();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_checksum_method_room_room_info(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_room_room_info();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_room_save_composer_draft(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_room_save_composer_draft();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_room_send_call_notification(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_room_send_call_notification();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_room_send_call_notification_if_needed(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_room_send_call_notification_if_needed();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_checksum_method_room_send_raw(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_room_send_raw();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_room_set_is_favourite(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_room_set_is_favourite();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_room_set_is_low_priority(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_room_set_is_low_priority();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_checksum_method_room_set_name(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_room_set_name();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_checksum_method_room_set_topic(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_room_set_topic();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_room_set_unread_flag(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_room_set_unread_flag();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_room_subscribe_to_identity_status_changes(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_room_subscribe_to_identity_status_changes();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_room_subscribe_to_knock_requests(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_room_subscribe_to_knock_requests();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_room_subscribe_to_room_info_updates(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_room_subscribe_to_room_info_updates();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_room_subscribe_to_typing_notifications(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_room_subscribe_to_typing_notifications();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_room_suggested_role_for_user(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_room_suggested_role_for_user();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_checksum_method_room_timeline(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_room_timeline();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_room_timeline_focused_on_event(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_room_timeline_focused_on_event();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_checksum_method_room_topic(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_room_topic();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_room_typing_notice(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_room_typing_notice();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_checksum_method_room_unban_user(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_room_unban_user();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_room_update_power_levels_for_users(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_room_update_power_levels_for_users();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_room_upload_avatar(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_room_upload_avatar();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_room_withdraw_verification_and_resend(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_room_withdraw_verification_and_resend();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_roomdirectorysearch_is_at_last_page(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_roomdirectorysearch_is_at_last_page();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_roomdirectorysearch_loaded_pages(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_roomdirectorysearch_loaded_pages();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_roomdirectorysearch_next_page(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_roomdirectorysearch_next_page();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_roomdirectorysearch_results(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_roomdirectorysearch_results();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_roomdirectorysearch_search(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_roomdirectorysearch_search();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_roomlist_entries_with_dynamic_adapters(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_roomlist_entries_with_dynamic_adapters();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_roomlist_loading_state(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_roomlist_loading_state();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_checksum_method_roomlist_room(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_roomlist_room();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_roomlistdynamicentriescontroller_add_one_page(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_roomlistdynamicentriescontroller_add_one_page();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_roomlistdynamicentriescontroller_reset_to_one_page(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_roomlistdynamicentriescontroller_reset_to_one_page();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_roomlistdynamicentriescontroller_set_filter(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_roomlistdynamicentriescontroller_set_filter();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_roomlistentrieswithdynamicadaptersresult_controller(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_roomlistentrieswithdynamicadaptersresult_controller();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_roomlistentrieswithdynamicadaptersresult_entries_stream(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_roomlistentrieswithdynamicadaptersresult_entries_stream();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_roomlistitem_avatar_url(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_roomlistitem_avatar_url();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_roomlistitem_canonical_alias(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_roomlistitem_canonical_alias();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_roomlistitem_display_name(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_roomlistitem_display_name();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_roomlistitem_full_room(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_roomlistitem_full_room();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_checksum_method_roomlistitem_id(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_roomlistitem_id();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_roomlistitem_init_timeline(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_roomlistitem_init_timeline();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_roomlistitem_invited_room(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_roomlistitem_invited_room();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_roomlistitem_is_direct(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_roomlistitem_is_direct();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_roomlistitem_is_encrypted(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_roomlistitem_is_encrypted();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_roomlistitem_is_timeline_initialized(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_roomlistitem_is_timeline_initialized();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_roomlistitem_latest_event(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_roomlistitem_latest_event();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_roomlistitem_membership(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_roomlistitem_membership();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_roomlistitem_preview_room(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_roomlistitem_preview_room();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_roomlistitem_room_info(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_roomlistitem_room_info();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_roomlistservice_all_rooms(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_roomlistservice_all_rooms();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_roomlistservice_room(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_roomlistservice_room();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_roomlistservice_state(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_roomlistservice_state();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_roomlistservice_subscribe_to_rooms(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_roomlistservice_subscribe_to_rooms();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_roomlistservice_sync_indicator(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_roomlistservice_sync_indicator();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_roommembersiterator_len(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_roommembersiterator_len();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_roommembersiterator_next_chunk(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_roommembersiterator_next_chunk();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_roommessageeventcontentwithoutrelation_with_mentions(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_roommessageeventcontentwithoutrelation_with_mentions();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_checksum_method_roompreview_info(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_roompreview_info();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_roompreview_inviter(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_roompreview_inviter();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_checksum_method_roompreview_leave(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_roompreview_leave();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_sendattachmentjoinhandle_cancel(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_sendattachmentjoinhandle_cancel();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_sendattachmentjoinhandle_join(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_sendattachmentjoinhandle_join();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_checksum_method_sendhandle_abort(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_sendhandle_abort();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_sendhandle_try_resend(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_sendhandle_try_resend();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontroller_accept_verification_request(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontroller_accept_verification_request();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontroller_acknowledge_verification_request(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontroller_acknowledge_verification_request();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontroller_approve_verification(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontroller_approve_verification();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontroller_cancel_verification(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontroller_cancel_verification();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontroller_decline_verification(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontroller_decline_verification();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontroller_request_verification(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontroller_request_verification();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontroller_set_delegate(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontroller_set_delegate();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontroller_start_sas_verification(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontroller_start_sas_verification();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_sessionverificationemoji_description(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_sessionverificationemoji_description();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_sessionverificationemoji_symbol(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_sessionverificationemoji_symbol();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_checksum_method_span_enter(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_span_enter();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_checksum_method_span_exit(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_span_exit();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_checksum_method_span_is_none(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_span_is_none();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_checksum_method_ssohandler_finish(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_ssohandler_finish();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_checksum_method_ssohandler_url(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_ssohandler_url();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_syncservice_room_list_service(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_syncservice_room_list_service();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_checksum_method_syncservice_start(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_syncservice_start();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_checksum_method_syncservice_state(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_syncservice_state();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_checksum_method_syncservice_stop(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_syncservice_stop();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_syncservicebuilder_finish(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_syncservicebuilder_finish();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_syncservicebuilder_with_cross_process_lock(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_syncservicebuilder_with_cross_process_lock();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_syncservicebuilder_with_utd_hook(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_syncservicebuilder_with_utd_hook();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_checksum_method_taskhandle_cancel(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_taskhandle_cancel();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_taskhandle_is_finished(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_taskhandle_is_finished();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_timeline_add_listener(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_timeline_add_listener();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_timeline_create_message_content(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_timeline_create_message_content();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_timeline_create_poll(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_timeline_create_poll();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_checksum_method_timeline_edit(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_timeline_edit();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_checksum_method_timeline_end_poll(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_timeline_end_poll();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_timeline_fetch_details_for_event(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_timeline_fetch_details_for_event();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_timeline_fetch_members(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_timeline_fetch_members();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_timeline_focused_paginate_forwards(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_timeline_focused_paginate_forwards();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_timeline_get_event_timeline_item_by_event_id(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_timeline_get_event_timeline_item_by_event_id();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_timeline_load_reply_details(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_timeline_load_reply_details();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_timeline_mark_as_read(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_timeline_mark_as_read();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_timeline_paginate_backwards(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_timeline_paginate_backwards();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_timeline_pin_event(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_timeline_pin_event();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_timeline_redact_event(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_timeline_redact_event();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_timeline_retry_decryption(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_timeline_retry_decryption();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_checksum_method_timeline_send(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_timeline_send();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_timeline_send_audio(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_timeline_send_audio();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_timeline_send_file(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_timeline_send_file();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_timeline_send_image(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_timeline_send_image();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_timeline_send_location(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_timeline_send_location();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_timeline_send_poll_response(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_timeline_send_poll_response();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_timeline_send_read_receipt(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_timeline_send_read_receipt();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_timeline_send_reply(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_timeline_send_reply();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_timeline_send_video(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_timeline_send_video();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_timeline_send_voice_message(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_timeline_send_voice_message();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_timeline_subscribe_to_back_pagination_status(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_timeline_subscribe_to_back_pagination_status();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_timeline_toggle_reaction(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_timeline_toggle_reaction();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_timeline_unpin_event(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_timeline_unpin_event();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_timelinediff_append(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_timelinediff_append();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_timelinediff_change(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_timelinediff_change();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_timelinediff_insert(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_timelinediff_insert();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_timelinediff_push_back(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_timelinediff_push_back();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_timelinediff_push_front(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_timelinediff_push_front();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_timelinediff_remove(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_timelinediff_remove();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_timelinediff_reset(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_timelinediff_reset();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_checksum_method_timelinediff_set(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_timelinediff_set();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_timelinediff_truncate(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_timelinediff_truncate();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_timelineevent_event_id(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_timelineevent_event_id();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_timelineevent_event_type(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_timelineevent_event_type();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_timelineevent_sender_id(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_timelineevent_sender_id();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_timelineevent_timestamp(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_timelineevent_timestamp();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_timelineitem_as_event(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_timelineitem_as_event();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_timelineitem_as_virtual(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_timelineitem_as_virtual();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_timelineitem_fmt_debug(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_timelineitem_fmt_debug();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_timelineitem_unique_id(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_timelineitem_unique_id();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_unreadnotificationscount_has_notifications(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_unreadnotificationscount_has_notifications();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_unreadnotificationscount_highlight_count(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_unreadnotificationscount_highlight_count();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_unreadnotificationscount_notification_count(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_unreadnotificationscount_notification_count();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_useridentity_is_verified(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_useridentity_is_verified();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_useridentity_master_key(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_useridentity_master_key();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_checksum_method_useridentity_pin(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_useridentity_pin();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_checksum_method_widgetdriver_run(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_widgetdriver_run();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_widgetdriverhandle_recv(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_widgetdriverhandle_recv();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_widgetdriverhandle_send(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_widgetdriverhandle_send();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_constructor_clientbuilder_new(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_constructor_clientbuilder_new();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_constructor_mediasource_from_json(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_constructor_mediasource_from_json();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_constructor_mediasource_from_url(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_constructor_mediasource_from_url();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_constructor_qrcodedata_from_bytes(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_constructor_qrcodedata_from_bytes();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_checksum_constructor_span_current(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_constructor_span_current();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeMatrixSdkFfi::cpp_uniffi_matrix_sdk_ffi_checksum_constructor_span_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_constructor_span_new();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_constructor_timelineeventtypefilter_exclude(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_constructor_timelineeventtypefilter_exclude();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_constructor_timelineeventtypefilter_include(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_constructor_timelineeventtypefilter_include();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_backupstatelistener_on_update(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_backupstatelistener_on_update();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_backupsteadystatelistener_on_update(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_backupsteadystatelistener_on_update();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_clientdelegate_did_receive_auth_error(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_clientdelegate_did_receive_auth_error();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_clientdelegate_did_refresh_tokens(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_clientdelegate_did_refresh_tokens();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_clientsessiondelegate_retrieve_session_from_keychain(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_clientsessiondelegate_retrieve_session_from_keychain();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_clientsessiondelegate_save_session_in_keychain(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_clientsessiondelegate_save_session_in_keychain();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_enablerecoveryprogresslistener_on_update(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_enablerecoveryprogresslistener_on_update();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_identitystatuschangelistener_call(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_identitystatuschangelistener_call();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_ignoreduserslistener_call(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_ignoreduserslistener_call();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_knockrequestslistener_call(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_knockrequestslistener_call();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_notificationsettingsdelegate_settings_did_change(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_notificationsettingsdelegate_settings_did_change();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_paginationstatuslistener_on_update(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_paginationstatuslistener_on_update();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_progresswatcher_transmission_progress(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_progresswatcher_transmission_progress();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_qrloginprogresslistener_on_update(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_qrloginprogresslistener_on_update();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_recoverystatelistener_on_update(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_recoverystatelistener_on_update();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_roomdirectorysearchentrieslistener_on_update(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_roomdirectorysearchentrieslistener_on_update();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_roominfolistener_call(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_matrix_sdk_ffi_checksum_method_roominfolistener_call();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_roomlistentrieslistener_on_update(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_roomlistentrieslistener_on_update();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_roomlistloadingstatelistener_on_update(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_roomlistloadingstatelistener_on_update();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_roomlistservicestatelistener_on_update(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_roomlistservicestatelistener_on_update();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_roomlistservicesyncindicatorlistener_on_update(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_roomlistservicesyncindicatorlistener_on_update();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_sendqueueroomerrorlistener_on_error(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_sendqueueroomerrorlistener_on_error();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontrollerdelegate_did_receive_verification_request(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontrollerdelegate_did_receive_verification_request();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontrollerdelegate_did_accept_verification_request(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontrollerdelegate_did_accept_verification_request();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontrollerdelegate_did_start_sas_verification(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontrollerdelegate_did_start_sas_verification();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontrollerdelegate_did_receive_verification_data(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontrollerdelegate_did_receive_verification_data();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontrollerdelegate_did_fail(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontrollerdelegate_did_fail();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontrollerdelegate_did_cancel(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontrollerdelegate_did_cancel();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontrollerdelegate_did_finish(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontrollerdelegate_did_finish();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_syncservicestateobserver_on_update(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_syncservicestateobserver_on_update();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_timelinelistener_on_update(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_timelinelistener_on_update();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_typingnotificationslistener_call(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_typingnotificationslistener_call();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_unabletodecryptdelegate_on_utd(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_unabletodecryptdelegate_on_utd();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_verificationstatelistener_on_update(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_verificationstatelistener_on_update();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_checksum_method_widgetcapabilitiesprovider_acquire_capabilities(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_matrix_sdk_ffi_checksum_method_widgetcapabilitiesprovider_acquire_capabilities();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::cpp_ffi_matrix_sdk_ffi_uniffi_contract_version(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = ffi_matrix_sdk_ffi_uniffi_contract_version();

  return uniffi_jsi::Bridging<uint32_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_backupstatelistener(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto vtableInstance = uniffi::matrix_sdk_ffi::Bridging<
      UniffiVTableCallbackInterfaceBackupStateListener>::fromJs(rt, callInvoker,
                                                                args[0]);

  std::lock_guard<std::mutex> lock(
      uniffi::matrix_sdk_ffi::registry::vtableMutex);
  uniffi_matrix_sdk_ffi_fn_init_callback_vtable_backupstatelistener(
      uniffi::matrix_sdk_ffi::registry::putTable(
          "UniffiVTableCallbackInterfaceBackupStateListener", vtableInstance));
  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_backupsteadystatelistener(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto vtableInstance = uniffi::matrix_sdk_ffi::
      Bridging<UniffiVTableCallbackInterfaceBackupSteadyStateListener>::fromJs(
          rt, callInvoker, args[0]);

  std::lock_guard<std::mutex> lock(
      uniffi::matrix_sdk_ffi::registry::vtableMutex);
  uniffi_matrix_sdk_ffi_fn_init_callback_vtable_backupsteadystatelistener(
      uniffi::matrix_sdk_ffi::registry::putTable(
          "UniffiVTableCallbackInterfaceBackupSteadyStateListener",
          vtableInstance));
  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_clientdelegate(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto vtableInstance = uniffi::matrix_sdk_ffi::Bridging<
      UniffiVTableCallbackInterfaceClientDelegate>::fromJs(rt, callInvoker,
                                                           args[0]);

  std::lock_guard<std::mutex> lock(
      uniffi::matrix_sdk_ffi::registry::vtableMutex);
  uniffi_matrix_sdk_ffi_fn_init_callback_vtable_clientdelegate(
      uniffi::matrix_sdk_ffi::registry::putTable(
          "UniffiVTableCallbackInterfaceClientDelegate", vtableInstance));
  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_clientsessiondelegate(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto vtableInstance = uniffi::matrix_sdk_ffi::Bridging<
      UniffiVTableCallbackInterfaceClientSessionDelegate>::fromJs(rt,
                                                                  callInvoker,
                                                                  args[0]);

  std::lock_guard<std::mutex> lock(
      uniffi::matrix_sdk_ffi::registry::vtableMutex);
  uniffi_matrix_sdk_ffi_fn_init_callback_vtable_clientsessiondelegate(
      uniffi::matrix_sdk_ffi::registry::putTable(
          "UniffiVTableCallbackInterfaceClientSessionDelegate",
          vtableInstance));
  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_enablerecoveryprogresslistener(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto vtableInstance = uniffi::matrix_sdk_ffi::Bridging<
      UniffiVTableCallbackInterfaceEnableRecoveryProgressListener>::
      fromJs(rt, callInvoker, args[0]);

  std::lock_guard<std::mutex> lock(
      uniffi::matrix_sdk_ffi::registry::vtableMutex);
  uniffi_matrix_sdk_ffi_fn_init_callback_vtable_enablerecoveryprogresslistener(
      uniffi::matrix_sdk_ffi::registry::putTable(
          "UniffiVTableCallbackInterfaceEnableRecoveryProgressListener",
          vtableInstance));
  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_identitystatuschangelistener(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto vtableInstance = uniffi::matrix_sdk_ffi::Bridging<
      UniffiVTableCallbackInterfaceIdentityStatusChangeListener>::
      fromJs(rt, callInvoker, args[0]);

  std::lock_guard<std::mutex> lock(
      uniffi::matrix_sdk_ffi::registry::vtableMutex);
  uniffi_matrix_sdk_ffi_fn_init_callback_vtable_identitystatuschangelistener(
      uniffi::matrix_sdk_ffi::registry::putTable(
          "UniffiVTableCallbackInterfaceIdentityStatusChangeListener",
          vtableInstance));
  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_ignoreduserslistener(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto vtableInstance = uniffi::matrix_sdk_ffi::Bridging<
      UniffiVTableCallbackInterfaceIgnoredUsersListener>::fromJs(rt,
                                                                 callInvoker,
                                                                 args[0]);

  std::lock_guard<std::mutex> lock(
      uniffi::matrix_sdk_ffi::registry::vtableMutex);
  uniffi_matrix_sdk_ffi_fn_init_callback_vtable_ignoreduserslistener(
      uniffi::matrix_sdk_ffi::registry::putTable(
          "UniffiVTableCallbackInterfaceIgnoredUsersListener", vtableInstance));
  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_knockrequestslistener(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto vtableInstance = uniffi::matrix_sdk_ffi::Bridging<
      UniffiVTableCallbackInterfaceKnockRequestsListener>::fromJs(rt,
                                                                  callInvoker,
                                                                  args[0]);

  std::lock_guard<std::mutex> lock(
      uniffi::matrix_sdk_ffi::registry::vtableMutex);
  uniffi_matrix_sdk_ffi_fn_init_callback_vtable_knockrequestslistener(
      uniffi::matrix_sdk_ffi::registry::putTable(
          "UniffiVTableCallbackInterfaceKnockRequestsListener",
          vtableInstance));
  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_notificationsettingsdelegate(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto vtableInstance = uniffi::matrix_sdk_ffi::Bridging<
      UniffiVTableCallbackInterfaceNotificationSettingsDelegate>::
      fromJs(rt, callInvoker, args[0]);

  std::lock_guard<std::mutex> lock(
      uniffi::matrix_sdk_ffi::registry::vtableMutex);
  uniffi_matrix_sdk_ffi_fn_init_callback_vtable_notificationsettingsdelegate(
      uniffi::matrix_sdk_ffi::registry::putTable(
          "UniffiVTableCallbackInterfaceNotificationSettingsDelegate",
          vtableInstance));
  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_paginationstatuslistener(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto vtableInstance = uniffi::matrix_sdk_ffi::
      Bridging<UniffiVTableCallbackInterfacePaginationStatusListener>::fromJs(
          rt, callInvoker, args[0]);

  std::lock_guard<std::mutex> lock(
      uniffi::matrix_sdk_ffi::registry::vtableMutex);
  uniffi_matrix_sdk_ffi_fn_init_callback_vtable_paginationstatuslistener(
      uniffi::matrix_sdk_ffi::registry::putTable(
          "UniffiVTableCallbackInterfacePaginationStatusListener",
          vtableInstance));
  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_progresswatcher(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto vtableInstance = uniffi::matrix_sdk_ffi::Bridging<
      UniffiVTableCallbackInterfaceProgressWatcher>::fromJs(rt, callInvoker,
                                                            args[0]);

  std::lock_guard<std::mutex> lock(
      uniffi::matrix_sdk_ffi::registry::vtableMutex);
  uniffi_matrix_sdk_ffi_fn_init_callback_vtable_progresswatcher(
      uniffi::matrix_sdk_ffi::registry::putTable(
          "UniffiVTableCallbackInterfaceProgressWatcher", vtableInstance));
  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_qrloginprogresslistener(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto vtableInstance = uniffi::matrix_sdk_ffi::Bridging<
      UniffiVTableCallbackInterfaceQrLoginProgressListener>::fromJs(rt,
                                                                    callInvoker,
                                                                    args[0]);

  std::lock_guard<std::mutex> lock(
      uniffi::matrix_sdk_ffi::registry::vtableMutex);
  uniffi_matrix_sdk_ffi_fn_init_callback_vtable_qrloginprogresslistener(
      uniffi::matrix_sdk_ffi::registry::putTable(
          "UniffiVTableCallbackInterfaceQrLoginProgressListener",
          vtableInstance));
  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_recoverystatelistener(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto vtableInstance = uniffi::matrix_sdk_ffi::Bridging<
      UniffiVTableCallbackInterfaceRecoveryStateListener>::fromJs(rt,
                                                                  callInvoker,
                                                                  args[0]);

  std::lock_guard<std::mutex> lock(
      uniffi::matrix_sdk_ffi::registry::vtableMutex);
  uniffi_matrix_sdk_ffi_fn_init_callback_vtable_recoverystatelistener(
      uniffi::matrix_sdk_ffi::registry::putTable(
          "UniffiVTableCallbackInterfaceRecoveryStateListener",
          vtableInstance));
  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_roomdirectorysearchentrieslistener(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto vtableInstance = uniffi::matrix_sdk_ffi::Bridging<
      UniffiVTableCallbackInterfaceRoomDirectorySearchEntriesListener>::
      fromJs(rt, callInvoker, args[0]);

  std::lock_guard<std::mutex> lock(
      uniffi::matrix_sdk_ffi::registry::vtableMutex);
  uniffi_matrix_sdk_ffi_fn_init_callback_vtable_roomdirectorysearchentrieslistener(
      uniffi::matrix_sdk_ffi::registry::putTable(
          "UniffiVTableCallbackInterfaceRoomDirectorySearchEntriesListener",
          vtableInstance));
  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_roominfolistener(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto vtableInstance = uniffi::matrix_sdk_ffi::Bridging<
      UniffiVTableCallbackInterfaceRoomInfoListener>::fromJs(rt, callInvoker,
                                                             args[0]);

  std::lock_guard<std::mutex> lock(
      uniffi::matrix_sdk_ffi::registry::vtableMutex);
  uniffi_matrix_sdk_ffi_fn_init_callback_vtable_roominfolistener(
      uniffi::matrix_sdk_ffi::registry::putTable(
          "UniffiVTableCallbackInterfaceRoomInfoListener", vtableInstance));
  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_roomlistentrieslistener(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto vtableInstance = uniffi::matrix_sdk_ffi::Bridging<
      UniffiVTableCallbackInterfaceRoomListEntriesListener>::fromJs(rt,
                                                                    callInvoker,
                                                                    args[0]);

  std::lock_guard<std::mutex> lock(
      uniffi::matrix_sdk_ffi::registry::vtableMutex);
  uniffi_matrix_sdk_ffi_fn_init_callback_vtable_roomlistentrieslistener(
      uniffi::matrix_sdk_ffi::registry::putTable(
          "UniffiVTableCallbackInterfaceRoomListEntriesListener",
          vtableInstance));
  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_roomlistloadingstatelistener(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto vtableInstance = uniffi::matrix_sdk_ffi::Bridging<
      UniffiVTableCallbackInterfaceRoomListLoadingStateListener>::
      fromJs(rt, callInvoker, args[0]);

  std::lock_guard<std::mutex> lock(
      uniffi::matrix_sdk_ffi::registry::vtableMutex);
  uniffi_matrix_sdk_ffi_fn_init_callback_vtable_roomlistloadingstatelistener(
      uniffi::matrix_sdk_ffi::registry::putTable(
          "UniffiVTableCallbackInterfaceRoomListLoadingStateListener",
          vtableInstance));
  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_roomlistservicestatelistener(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto vtableInstance = uniffi::matrix_sdk_ffi::Bridging<
      UniffiVTableCallbackInterfaceRoomListServiceStateListener>::
      fromJs(rt, callInvoker, args[0]);

  std::lock_guard<std::mutex> lock(
      uniffi::matrix_sdk_ffi::registry::vtableMutex);
  uniffi_matrix_sdk_ffi_fn_init_callback_vtable_roomlistservicestatelistener(
      uniffi::matrix_sdk_ffi::registry::putTable(
          "UniffiVTableCallbackInterfaceRoomListServiceStateListener",
          vtableInstance));
  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_roomlistservicesyncindicatorlistener(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto vtableInstance = uniffi::matrix_sdk_ffi::Bridging<
      UniffiVTableCallbackInterfaceRoomListServiceSyncIndicatorListener>::
      fromJs(rt, callInvoker, args[0]);

  std::lock_guard<std::mutex> lock(
      uniffi::matrix_sdk_ffi::registry::vtableMutex);
  uniffi_matrix_sdk_ffi_fn_init_callback_vtable_roomlistservicesyncindicatorlistener(
      uniffi::matrix_sdk_ffi::registry::putTable(
          "UniffiVTableCallbackInterfaceRoomListServiceSyncIndicatorListener",
          vtableInstance));
  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_sendqueueroomerrorlistener(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto vtableInstance = uniffi::matrix_sdk_ffi::
      Bridging<UniffiVTableCallbackInterfaceSendQueueRoomErrorListener>::fromJs(
          rt, callInvoker, args[0]);

  std::lock_guard<std::mutex> lock(
      uniffi::matrix_sdk_ffi::registry::vtableMutex);
  uniffi_matrix_sdk_ffi_fn_init_callback_vtable_sendqueueroomerrorlistener(
      uniffi::matrix_sdk_ffi::registry::putTable(
          "UniffiVTableCallbackInterfaceSendQueueRoomErrorListener",
          vtableInstance));
  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_sessionverificationcontrollerdelegate(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto vtableInstance = uniffi::matrix_sdk_ffi::Bridging<
      UniffiVTableCallbackInterfaceSessionVerificationControllerDelegate>::
      fromJs(rt, callInvoker, args[0]);

  std::lock_guard<std::mutex> lock(
      uniffi::matrix_sdk_ffi::registry::vtableMutex);
  uniffi_matrix_sdk_ffi_fn_init_callback_vtable_sessionverificationcontrollerdelegate(
      uniffi::matrix_sdk_ffi::registry::putTable(
          "UniffiVTableCallbackInterfaceSessionVerificationControllerDelegate",
          vtableInstance));
  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_syncservicestateobserver(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto vtableInstance = uniffi::matrix_sdk_ffi::
      Bridging<UniffiVTableCallbackInterfaceSyncServiceStateObserver>::fromJs(
          rt, callInvoker, args[0]);

  std::lock_guard<std::mutex> lock(
      uniffi::matrix_sdk_ffi::registry::vtableMutex);
  uniffi_matrix_sdk_ffi_fn_init_callback_vtable_syncservicestateobserver(
      uniffi::matrix_sdk_ffi::registry::putTable(
          "UniffiVTableCallbackInterfaceSyncServiceStateObserver",
          vtableInstance));
  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_timelinelistener(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto vtableInstance = uniffi::matrix_sdk_ffi::Bridging<
      UniffiVTableCallbackInterfaceTimelineListener>::fromJs(rt, callInvoker,
                                                             args[0]);

  std::lock_guard<std::mutex> lock(
      uniffi::matrix_sdk_ffi::registry::vtableMutex);
  uniffi_matrix_sdk_ffi_fn_init_callback_vtable_timelinelistener(
      uniffi::matrix_sdk_ffi::registry::putTable(
          "UniffiVTableCallbackInterfaceTimelineListener", vtableInstance));
  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_typingnotificationslistener(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto vtableInstance = uniffi::matrix_sdk_ffi::Bridging<
      UniffiVTableCallbackInterfaceTypingNotificationsListener>::
      fromJs(rt, callInvoker, args[0]);

  std::lock_guard<std::mutex> lock(
      uniffi::matrix_sdk_ffi::registry::vtableMutex);
  uniffi_matrix_sdk_ffi_fn_init_callback_vtable_typingnotificationslistener(
      uniffi::matrix_sdk_ffi::registry::putTable(
          "UniffiVTableCallbackInterfaceTypingNotificationsListener",
          vtableInstance));
  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_unabletodecryptdelegate(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto vtableInstance = uniffi::matrix_sdk_ffi::Bridging<
      UniffiVTableCallbackInterfaceUnableToDecryptDelegate>::fromJs(rt,
                                                                    callInvoker,
                                                                    args[0]);

  std::lock_guard<std::mutex> lock(
      uniffi::matrix_sdk_ffi::registry::vtableMutex);
  uniffi_matrix_sdk_ffi_fn_init_callback_vtable_unabletodecryptdelegate(
      uniffi::matrix_sdk_ffi::registry::putTable(
          "UniffiVTableCallbackInterfaceUnableToDecryptDelegate",
          vtableInstance));
  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_verificationstatelistener(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto vtableInstance = uniffi::matrix_sdk_ffi::
      Bridging<UniffiVTableCallbackInterfaceVerificationStateListener>::fromJs(
          rt, callInvoker, args[0]);

  std::lock_guard<std::mutex> lock(
      uniffi::matrix_sdk_ffi::registry::vtableMutex);
  uniffi_matrix_sdk_ffi_fn_init_callback_vtable_verificationstatelistener(
      uniffi::matrix_sdk_ffi::registry::putTable(
          "UniffiVTableCallbackInterfaceVerificationStateListener",
          vtableInstance));
  return jsi::Value::undefined();
}
jsi::Value NativeMatrixSdkFfi::
    cpp_uniffi_matrix_sdk_ffi_fn_init_callback_vtable_widgetcapabilitiesprovider(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto vtableInstance = uniffi::matrix_sdk_ffi::
      Bridging<UniffiVTableCallbackInterfaceWidgetCapabilitiesProvider>::fromJs(
          rt, callInvoker, args[0]);

  std::lock_guard<std::mutex> lock(
      uniffi::matrix_sdk_ffi::registry::vtableMutex);
  uniffi_matrix_sdk_ffi_fn_init_callback_vtable_widgetcapabilitiesprovider(
      uniffi::matrix_sdk_ffi::registry::putTable(
          "UniffiVTableCallbackInterfaceWidgetCapabilitiesProvider",
          vtableInstance));
  return jsi::Value::undefined();
}