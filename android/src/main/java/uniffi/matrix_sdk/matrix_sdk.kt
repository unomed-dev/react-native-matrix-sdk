// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

@file:Suppress("NAME_SHADOWING")

package uniffi.matrix_sdk

// Common helper code.
//
// Ideally this would live in a separate .kt file where it can be unittested etc
// in isolation, and perhaps even published as a re-useable package.
//
// However, it's important that the details of how this helper code works (e.g. the
// way that different builtin types are passed across the FFI) exactly match what's
// expected by the Rust code on the other side of the interface. In practice right
// now that means coming from the exact some version of `uniffi` that was used to
// compile the Rust component. The easiest way to ensure this is to bundle the Kotlin
// helpers directly inline like we're doing here.

import com.sun.jna.Library
import com.sun.jna.IntegerType
import com.sun.jna.Native
import com.sun.jna.Pointer
import com.sun.jna.Structure
import com.sun.jna.Callback
import com.sun.jna.ptr.*
import java.nio.ByteBuffer
import java.nio.ByteOrder
import java.nio.CharBuffer
import java.nio.charset.CodingErrorAction
import java.util.concurrent.atomic.AtomicLong
import java.util.concurrent.ConcurrentHashMap
import java.util.concurrent.atomic.AtomicBoolean

// This is a helper for safely working with byte buffers returned from the Rust code.
// A rust-owned buffer is represented by its capacity, its current length, and a
// pointer to the underlying data.

/**
 * @suppress
 */
@Structure.FieldOrder("capacity", "len", "data")
open class RustBuffer : Structure() {
    // Note: `capacity` and `len` are actually `ULong` values, but JVM only supports signed values.
    // When dealing with these fields, make sure to call `toULong()`.
    @JvmField var capacity: Long = 0
    @JvmField var len: Long = 0
    @JvmField var data: Pointer? = null

    class ByValue: RustBuffer(), Structure.ByValue
    class ByReference: RustBuffer(), Structure.ByReference

   internal fun setValue(other: RustBuffer) {
        capacity = other.capacity
        len = other.len
        data = other.data
    }

    companion object {
        internal fun alloc(size: ULong = 0UL) = uniffiRustCall() { status ->
            // Note: need to convert the size to a `Long` value to make this work with JVM.
            UniffiLib.INSTANCE.ffi_matrix_sdk_rustbuffer_alloc(size.toLong(), status)
        }.also {
            if(it.data == null) {
               throw RuntimeException("RustBuffer.alloc() returned null data pointer (size=${size})")
           }
        }

        internal fun create(capacity: ULong, len: ULong, data: Pointer?): RustBuffer.ByValue {
            var buf = RustBuffer.ByValue()
            buf.capacity = capacity.toLong()
            buf.len = len.toLong()
            buf.data = data
            return buf
        }

        internal fun free(buf: RustBuffer.ByValue) = uniffiRustCall() { status ->
            UniffiLib.INSTANCE.ffi_matrix_sdk_rustbuffer_free(buf, status)
        }
    }

    @Suppress("TooGenericExceptionThrown")
    fun asByteBuffer() =
        this.data?.getByteBuffer(0, this.len.toLong())?.also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
}

/**
 * The equivalent of the `*mut RustBuffer` type.
 * Required for callbacks taking in an out pointer.
 *
 * Size is the sum of all values in the struct.
 *
 * @suppress
 */
class RustBufferByReference : ByReference(16) {
    /**
     * Set the pointed-to `RustBuffer` to the given value.
     */
    fun setValue(value: RustBuffer.ByValue) {
        // NOTE: The offsets are as they are in the C-like struct.
        val pointer = getPointer()
        pointer.setLong(0, value.capacity)
        pointer.setLong(8, value.len)
        pointer.setPointer(16, value.data)
    }

    /**
     * Get a `RustBuffer.ByValue` from this reference.
     */
    fun getValue(): RustBuffer.ByValue {
        val pointer = getPointer()
        val value = RustBuffer.ByValue()
        value.writeField("capacity", pointer.getLong(0))
        value.writeField("len", pointer.getLong(8))
        value.writeField("data", pointer.getLong(16))

        return value
    }
}

// This is a helper for safely passing byte references into the rust code.
// It's not actually used at the moment, because there aren't many things that you
// can take a direct pointer to in the JVM, and if we're going to copy something
// then we might as well copy it into a `RustBuffer`. But it's here for API
// completeness.

@Structure.FieldOrder("len", "data")
internal open class ForeignBytes : Structure() {
    @JvmField var len: Int = 0
    @JvmField var data: Pointer? = null

    class ByValue : ForeignBytes(), Structure.ByValue
}
/**
 * The FfiConverter interface handles converter types to and from the FFI
 *
 * All implementing objects should be public to support external types.  When a
 * type is external we need to import it's FfiConverter.
 *
 * @suppress
 */
public interface FfiConverter<KotlinType, FfiType> {
    // Convert an FFI type to a Kotlin type
    fun lift(value: FfiType): KotlinType

    // Convert an Kotlin type to an FFI type
    fun lower(value: KotlinType): FfiType

    // Read a Kotlin type from a `ByteBuffer`
    fun read(buf: ByteBuffer): KotlinType

    // Calculate bytes to allocate when creating a `RustBuffer`
    //
    // This must return at least as many bytes as the write() function will
    // write. It can return more bytes than needed, for example when writing
    // Strings we can't know the exact bytes needed until we the UTF-8
    // encoding, so we pessimistically allocate the largest size possible (3
    // bytes per codepoint).  Allocating extra bytes is not really a big deal
    // because the `RustBuffer` is short-lived.
    fun allocationSize(value: KotlinType): ULong

    // Write a Kotlin type to a `ByteBuffer`
    fun write(value: KotlinType, buf: ByteBuffer)

    // Lower a value into a `RustBuffer`
    //
    // This method lowers a value into a `RustBuffer` rather than the normal
    // FfiType.  It's used by the callback interface code.  Callback interface
    // returns are always serialized into a `RustBuffer` regardless of their
    // normal FFI type.
    fun lowerIntoRustBuffer(value: KotlinType): RustBuffer.ByValue {
        val rbuf = RustBuffer.alloc(allocationSize(value))
        try {
            val bbuf = rbuf.data!!.getByteBuffer(0, rbuf.capacity).also {
                it.order(ByteOrder.BIG_ENDIAN)
            }
            write(value, bbuf)
            rbuf.writeField("len", bbuf.position().toLong())
            return rbuf
        } catch (e: Throwable) {
            RustBuffer.free(rbuf)
            throw e
        }
    }

    // Lift a value from a `RustBuffer`.
    //
    // This here mostly because of the symmetry with `lowerIntoRustBuffer()`.
    // It's currently only used by the `FfiConverterRustBuffer` class below.
    fun liftFromRustBuffer(rbuf: RustBuffer.ByValue): KotlinType {
        val byteBuf = rbuf.asByteBuffer()!!
        try {
           val item = read(byteBuf)
           if (byteBuf.hasRemaining()) {
               throw RuntimeException("junk remaining in buffer after lifting, something is very wrong!!")
           }
           return item
        } finally {
            RustBuffer.free(rbuf)
        }
    }
}

/**
 * FfiConverter that uses `RustBuffer` as the FfiType
 *
 * @suppress
 */
public interface FfiConverterRustBuffer<KotlinType>: FfiConverter<KotlinType, RustBuffer.ByValue> {
    override fun lift(value: RustBuffer.ByValue) = liftFromRustBuffer(value)
    override fun lower(value: KotlinType) = lowerIntoRustBuffer(value)
}
// A handful of classes and functions to support the generated data structures.
// This would be a good candidate for isolating in its own ffi-support lib.

internal const val UNIFFI_CALL_SUCCESS = 0.toByte()
internal const val UNIFFI_CALL_ERROR = 1.toByte()
internal const val UNIFFI_CALL_UNEXPECTED_ERROR = 2.toByte()

@Structure.FieldOrder("code", "error_buf")
internal open class UniffiRustCallStatus : Structure() {
    @JvmField var code: Byte = 0
    @JvmField var error_buf: RustBuffer.ByValue = RustBuffer.ByValue()

    class ByValue: UniffiRustCallStatus(), Structure.ByValue

    fun isSuccess(): Boolean {
        return code == UNIFFI_CALL_SUCCESS
    }

    fun isError(): Boolean {
        return code == UNIFFI_CALL_ERROR
    }

    fun isPanic(): Boolean {
        return code == UNIFFI_CALL_UNEXPECTED_ERROR
    }

    companion object {
        fun create(code: Byte, errorBuf: RustBuffer.ByValue): UniffiRustCallStatus.ByValue {
            val callStatus = UniffiRustCallStatus.ByValue()
            callStatus.code = code
            callStatus.error_buf = errorBuf
            return callStatus
        }
    }
}

class InternalException(message: String) : kotlin.Exception(message)

/**
 * Each top-level error class has a companion object that can lift the error from the call status's rust buffer
 *
 * @suppress
 */
interface UniffiRustCallStatusErrorHandler<E> {
    fun lift(error_buf: RustBuffer.ByValue): E;
}

// Helpers for calling Rust
// In practice we usually need to be synchronized to call this safely, so it doesn't
// synchronize itself

// Call a rust function that returns a Result<>.  Pass in the Error class companion that corresponds to the Err
private inline fun <U, E: kotlin.Exception> uniffiRustCallWithError(errorHandler: UniffiRustCallStatusErrorHandler<E>, callback: (UniffiRustCallStatus) -> U): U {
    var status = UniffiRustCallStatus()
    val return_value = callback(status)
    uniffiCheckCallStatus(errorHandler, status)
    return return_value
}

// Check UniffiRustCallStatus and throw an error if the call wasn't successful
private fun<E: kotlin.Exception> uniffiCheckCallStatus(errorHandler: UniffiRustCallStatusErrorHandler<E>, status: UniffiRustCallStatus) {
    if (status.isSuccess()) {
        return
    } else if (status.isError()) {
        throw errorHandler.lift(status.error_buf)
    } else if (status.isPanic()) {
        // when the rust code sees a panic, it tries to construct a rustbuffer
        // with the message.  but if that code panics, then it just sends back
        // an empty buffer.
        if (status.error_buf.len > 0) {
            throw InternalException(FfiConverterString.lift(status.error_buf))
        } else {
            throw InternalException("Rust panic")
        }
    } else {
        throw InternalException("Unknown rust call status: $status.code")
    }
}

/**
 * UniffiRustCallStatusErrorHandler implementation for times when we don't expect a CALL_ERROR
 *
 * @suppress
 */
object UniffiNullRustCallStatusErrorHandler: UniffiRustCallStatusErrorHandler<InternalException> {
    override fun lift(error_buf: RustBuffer.ByValue): InternalException {
        RustBuffer.free(error_buf)
        return InternalException("Unexpected CALL_ERROR")
    }
}

// Call a rust function that returns a plain value
private inline fun <U> uniffiRustCall(callback: (UniffiRustCallStatus) -> U): U {
    return uniffiRustCallWithError(UniffiNullRustCallStatusErrorHandler, callback)
}

internal inline fun<T> uniffiTraitInterfaceCall(
    callStatus: UniffiRustCallStatus,
    makeCall: () -> T,
    writeReturn: (T) -> Unit,
) {
    try {
        writeReturn(makeCall())
    } catch(e: kotlin.Exception) {
        callStatus.code = UNIFFI_CALL_UNEXPECTED_ERROR
        callStatus.error_buf = FfiConverterString.lower(e.toString())
    }
}

internal inline fun<T, reified E: Throwable> uniffiTraitInterfaceCallWithError(
    callStatus: UniffiRustCallStatus,
    makeCall: () -> T,
    writeReturn: (T) -> Unit,
    lowerError: (E) -> RustBuffer.ByValue
) {
    try {
        writeReturn(makeCall())
    } catch(e: kotlin.Exception) {
        if (e is E) {
            callStatus.code = UNIFFI_CALL_ERROR
            callStatus.error_buf = lowerError(e)
        } else {
            callStatus.code = UNIFFI_CALL_UNEXPECTED_ERROR
            callStatus.error_buf = FfiConverterString.lower(e.toString())
        }
    }
}
// Map handles to objects
//
// This is used pass an opaque 64-bit handle representing a foreign object to the Rust code.
internal class UniffiHandleMap<T: Any> {
    private val map = ConcurrentHashMap<Long, T>()
    private val counter = java.util.concurrent.atomic.AtomicLong(0)

    val size: Int
        get() = map.size

    // Insert a new object into the handle map and get a handle for it
    fun insert(obj: T): Long {
        val handle = counter.getAndAdd(1)
        map.put(handle, obj)
        return handle
    }

    // Get an object from the handle map
    fun get(handle: Long): T {
        return map.get(handle) ?: throw InternalException("UniffiHandleMap.get: Invalid handle")
    }

    // Remove an entry from the handlemap and get the Kotlin object back
    fun remove(handle: Long): T {
        return map.remove(handle) ?: throw InternalException("UniffiHandleMap: Invalid handle")
    }
}

// Contains loading, initialization code,
// and the FFI Function declarations in a com.sun.jna.Library.
@Synchronized
private fun findLibraryName(componentName: String): String {
    val libOverride = System.getProperty("uniffi.component.$componentName.libraryOverride")
    if (libOverride != null) {
        return libOverride
    }
    return "matrix_sdk_ffi"
}

private inline fun <reified Lib : Library> loadIndirect(
    componentName: String
): Lib {
    return Native.load<Lib>(findLibraryName(componentName), Lib::class.java)
}

// Define FFI callback types
internal interface UniffiRustFutureContinuationCallback : com.sun.jna.Callback {
    fun callback(`data`: Long,`pollResult`: Byte,)
}
internal interface UniffiForeignFutureFree : com.sun.jna.Callback {
    fun callback(`handle`: Long,)
}
internal interface UniffiCallbackInterfaceFree : com.sun.jna.Callback {
    fun callback(`handle`: Long,)
}
@Structure.FieldOrder("handle", "free")
internal open class UniffiForeignFuture(
    @JvmField internal var `handle`: Long = 0.toLong(),
    @JvmField internal var `free`: UniffiForeignFutureFree? = null,
) : Structure() {
    class UniffiByValue(
        `handle`: Long = 0.toLong(),
        `free`: UniffiForeignFutureFree? = null,
    ): UniffiForeignFuture(`handle`,`free`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFuture) {
        `handle` = other.`handle`
        `free` = other.`free`
    }

}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU8(
    @JvmField internal var `returnValue`: Byte = 0.toByte(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Byte = 0.toByte(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructU8(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructU8) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteU8 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructU8.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI8(
    @JvmField internal var `returnValue`: Byte = 0.toByte(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Byte = 0.toByte(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructI8(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructI8) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteI8 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructI8.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU16(
    @JvmField internal var `returnValue`: Short = 0.toShort(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Short = 0.toShort(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructU16(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructU16) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteU16 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructU16.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI16(
    @JvmField internal var `returnValue`: Short = 0.toShort(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Short = 0.toShort(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructI16(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructI16) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteI16 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructI16.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU32(
    @JvmField internal var `returnValue`: Int = 0,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Int = 0,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructU32(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructU32) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteU32 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructU32.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI32(
    @JvmField internal var `returnValue`: Int = 0,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Int = 0,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructI32(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructI32) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteI32 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructI32.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU64(
    @JvmField internal var `returnValue`: Long = 0.toLong(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Long = 0.toLong(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructU64(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructU64) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteU64 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructU64.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI64(
    @JvmField internal var `returnValue`: Long = 0.toLong(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Long = 0.toLong(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructI64(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructI64) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteI64 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructI64.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructF32(
    @JvmField internal var `returnValue`: Float = 0.0f,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Float = 0.0f,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructF32(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructF32) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteF32 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructF32.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructF64(
    @JvmField internal var `returnValue`: Double = 0.0,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Double = 0.0,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructF64(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructF64) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteF64 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructF64.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructPointer(
    @JvmField internal var `returnValue`: Pointer = Pointer.NULL,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Pointer = Pointer.NULL,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructPointer(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructPointer) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompletePointer : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructPointer.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructRustBuffer(
    @JvmField internal var `returnValue`: RustBuffer.ByValue = RustBuffer.ByValue(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: RustBuffer.ByValue = RustBuffer.ByValue(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructRustBuffer(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructRustBuffer) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteRustBuffer : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructRustBuffer.UniffiByValue,)
}
@Structure.FieldOrder("callStatus")
internal open class UniffiForeignFutureStructVoid(
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructVoid(`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructVoid) {
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteVoid : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructVoid.UniffiByValue,)
}






























































// For large crates we prevent `MethodTooLargeException` (see #2340)
// N.B. the name of the extension is very misleading, since it is 
// rather `InterfaceTooLargeException`, caused by too many methods 
// in the interface for large crates.
//
// By splitting the otherwise huge interface into two parts
// * UniffiLib 
// * IntegrityCheckingUniffiLib (this)
// we allow for ~2x as many methods in the UniffiLib interface.
// 
// The `ffi_uniffi_contract_version` method and all checksum methods are put 
// into `IntegrityCheckingUniffiLib` and these methods are called only once,
// when the library is loaded.
internal interface IntegrityCheckingUniffiLib : Library {
    // Integrity check functions only
    fun uniffi_matrix_sdk_checksum_method_oauthauthorizationdata_login_url(
): Short
fun ffi_matrix_sdk_uniffi_contract_version(
): Int

}

// A JNA Library to expose the extern-C FFI definitions.
// This is an implementation detail which will be called internally by the public API.
internal interface UniffiLib : Library {
    companion object {
        internal val INSTANCE: UniffiLib by lazy {
            val componentName = "matrix_sdk"
            // For large crates we prevent `MethodTooLargeException` (see #2340)
            // N.B. the name of the extension is very misleading, since it is 
            // rather `InterfaceTooLargeException`, caused by too many methods 
            // in the interface for large crates.
            //
            // By splitting the otherwise huge interface into two parts
            // * UniffiLib (this)
            // * IntegrityCheckingUniffiLib
            // And all checksum methods are put into `IntegrityCheckingUniffiLib`
            // we allow for ~2x as many methods in the UniffiLib interface.
            // 
            // Thus we first load the library with `loadIndirect` as `IntegrityCheckingUniffiLib`
            // so that we can (optionally!) call `uniffiCheckApiChecksums`...
            loadIndirect<IntegrityCheckingUniffiLib>(componentName)
                .also { lib: IntegrityCheckingUniffiLib ->
                    uniffiCheckContractApiVersion(lib)
                    uniffiCheckApiChecksums(lib)
                }
            // ... and then we load the library as `UniffiLib`
            // N.B. we cannot use `loadIndirect` once and then try to cast it to `UniffiLib`
            // => results in `java.lang.ClassCastException: com.sun.proxy.$Proxy cannot be cast to ...`
            // error. So we must call `loadIndirect` twice. For crates large enough
            // to trigger this issue, the performance impact is negligible, running on
            // a macOS M1 machine the `loadIndirect` call takes ~50ms.
            val lib = loadIndirect<UniffiLib>(componentName)
            // No need to check the contract version and checksums, since 
            // we already did that with `IntegrityCheckingUniffiLib` above.
            // Loading of library with integrity check done.
            lib
        }
        
        // The Cleaner for the whole library
        internal val CLEANER: UniffiCleaner by lazy {
            UniffiCleaner.create()
        }
    }

    // FFI functions
    fun uniffi_matrix_sdk_fn_clone_oauthauthorizationdata(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
): Pointer
fun uniffi_matrix_sdk_fn_free_oauthauthorizationdata(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
): Unit
fun uniffi_matrix_sdk_fn_method_oauthauthorizationdata_login_url(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
fun ffi_matrix_sdk_rustbuffer_alloc(`size`: Long,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
fun ffi_matrix_sdk_rustbuffer_from_bytes(`bytes`: ForeignBytes.ByValue,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
fun ffi_matrix_sdk_rustbuffer_free(`buf`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
): Unit
fun ffi_matrix_sdk_rustbuffer_reserve(`buf`: RustBuffer.ByValue,`additional`: Long,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
fun ffi_matrix_sdk_rust_future_poll_u8(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_matrix_sdk_rust_future_cancel_u8(`handle`: Long,
): Unit
fun ffi_matrix_sdk_rust_future_free_u8(`handle`: Long,
): Unit
fun ffi_matrix_sdk_rust_future_complete_u8(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Byte
fun ffi_matrix_sdk_rust_future_poll_i8(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_matrix_sdk_rust_future_cancel_i8(`handle`: Long,
): Unit
fun ffi_matrix_sdk_rust_future_free_i8(`handle`: Long,
): Unit
fun ffi_matrix_sdk_rust_future_complete_i8(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Byte
fun ffi_matrix_sdk_rust_future_poll_u16(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_matrix_sdk_rust_future_cancel_u16(`handle`: Long,
): Unit
fun ffi_matrix_sdk_rust_future_free_u16(`handle`: Long,
): Unit
fun ffi_matrix_sdk_rust_future_complete_u16(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Short
fun ffi_matrix_sdk_rust_future_poll_i16(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_matrix_sdk_rust_future_cancel_i16(`handle`: Long,
): Unit
fun ffi_matrix_sdk_rust_future_free_i16(`handle`: Long,
): Unit
fun ffi_matrix_sdk_rust_future_complete_i16(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Short
fun ffi_matrix_sdk_rust_future_poll_u32(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_matrix_sdk_rust_future_cancel_u32(`handle`: Long,
): Unit
fun ffi_matrix_sdk_rust_future_free_u32(`handle`: Long,
): Unit
fun ffi_matrix_sdk_rust_future_complete_u32(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Int
fun ffi_matrix_sdk_rust_future_poll_i32(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_matrix_sdk_rust_future_cancel_i32(`handle`: Long,
): Unit
fun ffi_matrix_sdk_rust_future_free_i32(`handle`: Long,
): Unit
fun ffi_matrix_sdk_rust_future_complete_i32(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Int
fun ffi_matrix_sdk_rust_future_poll_u64(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_matrix_sdk_rust_future_cancel_u64(`handle`: Long,
): Unit
fun ffi_matrix_sdk_rust_future_free_u64(`handle`: Long,
): Unit
fun ffi_matrix_sdk_rust_future_complete_u64(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Long
fun ffi_matrix_sdk_rust_future_poll_i64(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_matrix_sdk_rust_future_cancel_i64(`handle`: Long,
): Unit
fun ffi_matrix_sdk_rust_future_free_i64(`handle`: Long,
): Unit
fun ffi_matrix_sdk_rust_future_complete_i64(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Long
fun ffi_matrix_sdk_rust_future_poll_f32(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_matrix_sdk_rust_future_cancel_f32(`handle`: Long,
): Unit
fun ffi_matrix_sdk_rust_future_free_f32(`handle`: Long,
): Unit
fun ffi_matrix_sdk_rust_future_complete_f32(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Float
fun ffi_matrix_sdk_rust_future_poll_f64(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_matrix_sdk_rust_future_cancel_f64(`handle`: Long,
): Unit
fun ffi_matrix_sdk_rust_future_free_f64(`handle`: Long,
): Unit
fun ffi_matrix_sdk_rust_future_complete_f64(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Double
fun ffi_matrix_sdk_rust_future_poll_pointer(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_matrix_sdk_rust_future_cancel_pointer(`handle`: Long,
): Unit
fun ffi_matrix_sdk_rust_future_free_pointer(`handle`: Long,
): Unit
fun ffi_matrix_sdk_rust_future_complete_pointer(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Pointer
fun ffi_matrix_sdk_rust_future_poll_rust_buffer(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_matrix_sdk_rust_future_cancel_rust_buffer(`handle`: Long,
): Unit
fun ffi_matrix_sdk_rust_future_free_rust_buffer(`handle`: Long,
): Unit
fun ffi_matrix_sdk_rust_future_complete_rust_buffer(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
fun ffi_matrix_sdk_rust_future_poll_void(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_matrix_sdk_rust_future_cancel_void(`handle`: Long,
): Unit
fun ffi_matrix_sdk_rust_future_free_void(`handle`: Long,
): Unit
fun ffi_matrix_sdk_rust_future_complete_void(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Unit

}

private fun uniffiCheckContractApiVersion(lib: IntegrityCheckingUniffiLib) {
    // Get the bindings contract version from our ComponentInterface
    val bindings_contract_version = 29
    // Get the scaffolding contract version by calling the into the dylib
    val scaffolding_contract_version = lib.ffi_matrix_sdk_uniffi_contract_version()
    if (bindings_contract_version != scaffolding_contract_version) {
        throw RuntimeException("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    }
}
@Suppress("UNUSED_PARAMETER")
private fun uniffiCheckApiChecksums(lib: IntegrityCheckingUniffiLib) {
    if (lib.uniffi_matrix_sdk_checksum_method_oauthauthorizationdata_login_url() != 25566.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

/**
 * @suppress
 */
public fun uniffiEnsureInitialized() {
    UniffiLib.INSTANCE
}

// Async support

// Public interface members begin here.


// Interface implemented by anything that can contain an object reference.
//
// Such types expose a `destroy()` method that must be called to cleanly
// dispose of the contained objects. Failure to call this method may result
// in memory leaks.
//
// The easiest way to ensure this method is called is to use the `.use`
// helper method to execute a block and destroy the object at the end.
interface Disposable {
    fun destroy()
    companion object {
        fun destroy(vararg args: Any?) {
            for (arg in args) {
                when (arg) {
                    is Disposable -> arg.destroy()
                    is ArrayList<*> -> {
                        for (idx in arg.indices) {
                            val element = arg[idx]
                            if (element is Disposable) {
                                element.destroy()
                            }
                        }
                    }
                    is Map<*, *> -> {
                        for (element in arg.values) {
                            if (element is Disposable) {
                                element.destroy()
                            }
                        }
                    }
                    is Iterable<*> -> {
                        for (element in arg) {
                            if (element is Disposable) {
                                element.destroy()
                            }
                        }
                    }
                }
            }
        }
    }
}

/**
 * @suppress
 */
inline fun <T : Disposable?, R> T.use(block: (T) -> R) =
    try {
        block(this)
    } finally {
        try {
            // N.B. our implementation is on the nullable type `Disposable?`.
            this?.destroy()
        } catch (e: Throwable) {
            // swallow
        }
    }

/** 
 * Used to instantiate an interface without an actual pointer, for fakes in tests, mostly.
 *
 * @suppress
 * */
object NoPointer
/**
 * The cleaner interface for Object finalization code to run.
 * This is the entry point to any implementation that we're using.
 *
 * The cleaner registers objects and returns cleanables, so now we are
 * defining a `UniffiCleaner` with a `UniffiClenaer.Cleanable` to abstract the
 * different implmentations available at compile time.
 *
 * @suppress
 */
interface UniffiCleaner {
    interface Cleanable {
        fun clean()
    }

    fun register(value: Any, cleanUpTask: Runnable): UniffiCleaner.Cleanable

    companion object
}

// The fallback Jna cleaner, which is available for both Android, and the JVM.
private class UniffiJnaCleaner : UniffiCleaner {
    private val cleaner = com.sun.jna.internal.Cleaner.getCleaner()

    override fun register(value: Any, cleanUpTask: Runnable): UniffiCleaner.Cleanable =
        UniffiJnaCleanable(cleaner.register(value, cleanUpTask))
}

private class UniffiJnaCleanable(
    private val cleanable: com.sun.jna.internal.Cleaner.Cleanable,
) : UniffiCleaner.Cleanable {
    override fun clean() = cleanable.clean()
}


// We decide at uniffi binding generation time whether we were
// using Android or not.
// There are further runtime checks to chose the correct implementation
// of the cleaner.
private fun UniffiCleaner.Companion.create(): UniffiCleaner =
    try {
        // For safety's sake: if the library hasn't been run in android_cleaner = true
        // mode, but is being run on Android, then we still need to think about
        // Android API versions.
        // So we check if java.lang.ref.Cleaner is there, and use that…
        java.lang.Class.forName("java.lang.ref.Cleaner")
        JavaLangRefCleaner()
    } catch (e: ClassNotFoundException) {
        // … otherwise, fallback to the JNA cleaner.
        UniffiJnaCleaner()
    }

private class JavaLangRefCleaner : UniffiCleaner {
    val cleaner = java.lang.ref.Cleaner.create()

    override fun register(value: Any, cleanUpTask: Runnable): UniffiCleaner.Cleanable =
        JavaLangRefCleanable(cleaner.register(value, cleanUpTask))
}

private class JavaLangRefCleanable(
    val cleanable: java.lang.ref.Cleaner.Cleanable
) : UniffiCleaner.Cleanable {
    override fun clean() = cleanable.clean()
}

/**
 * @suppress
 */
public object FfiConverterLong: FfiConverter<Long, Long> {
    override fun lift(value: Long): Long {
        return value
    }

    override fun read(buf: ByteBuffer): Long {
        return buf.getLong()
    }

    override fun lower(value: Long): Long {
        return value
    }

    override fun allocationSize(value: Long) = 8UL

    override fun write(value: Long, buf: ByteBuffer) {
        buf.putLong(value)
    }
}

/**
 * @suppress
 */
public object FfiConverterDouble: FfiConverter<Double, Double> {
    override fun lift(value: Double): Double {
        return value
    }

    override fun read(buf: ByteBuffer): Double {
        return buf.getDouble()
    }

    override fun lower(value: Double): Double {
        return value
    }

    override fun allocationSize(value: Double) = 8UL

    override fun write(value: Double, buf: ByteBuffer) {
        buf.putDouble(value)
    }
}

/**
 * @suppress
 */
public object FfiConverterBoolean: FfiConverter<Boolean, Byte> {
    override fun lift(value: Byte): Boolean {
        return value.toInt() != 0
    }

    override fun read(buf: ByteBuffer): Boolean {
        return lift(buf.get())
    }

    override fun lower(value: Boolean): Byte {
        return if (value) 1.toByte() else 0.toByte()
    }

    override fun allocationSize(value: Boolean) = 1UL

    override fun write(value: Boolean, buf: ByteBuffer) {
        buf.put(lower(value))
    }
}

/**
 * @suppress
 */
public object FfiConverterString: FfiConverter<String, RustBuffer.ByValue> {
    // Note: we don't inherit from FfiConverterRustBuffer, because we use a
    // special encoding when lowering/lifting.  We can use `RustBuffer.len` to
    // store our length and avoid writing it out to the buffer.
    override fun lift(value: RustBuffer.ByValue): String {
        try {
            val byteArr = ByteArray(value.len.toInt())
            value.asByteBuffer()!!.get(byteArr)
            return byteArr.toString(Charsets.UTF_8)
        } finally {
            RustBuffer.free(value)
        }
    }

    override fun read(buf: ByteBuffer): String {
        val len = buf.getInt()
        val byteArr = ByteArray(len)
        buf.get(byteArr)
        return byteArr.toString(Charsets.UTF_8)
    }

    fun toUtf8(value: String): ByteBuffer {
        // Make sure we don't have invalid UTF-16, check for lone surrogates.
        return Charsets.UTF_8.newEncoder().run {
            onMalformedInput(CodingErrorAction.REPORT)
            encode(CharBuffer.wrap(value))
        }
    }

    override fun lower(value: String): RustBuffer.ByValue {
        val byteBuf = toUtf8(value)
        // Ideally we'd pass these bytes to `ffi_bytebuffer_from_bytes`, but doing so would require us
        // to copy them into a JNA `Memory`. So we might as well directly copy them into a `RustBuffer`.
        val rbuf = RustBuffer.alloc(byteBuf.limit().toULong())
        rbuf.asByteBuffer()!!.put(byteBuf)
        return rbuf
    }

    // We aren't sure exactly how many bytes our string will be once it's UTF-8
    // encoded.  Allocate 3 bytes per UTF-16 code unit which will always be
    // enough.
    override fun allocationSize(value: String): ULong {
        val sizeForLength = 4UL
        val sizeForString = value.length.toULong() * 3UL
        return sizeForLength + sizeForString
    }

    override fun write(value: String, buf: ByteBuffer) {
        val byteBuf = toUtf8(value)
        buf.putInt(byteBuf.limit())
        buf.put(byteBuf)
    }
}


// This template implements a class for working with a Rust struct via a Pointer/Arc<T>
// to the live Rust struct on the other side of the FFI.
//
// Each instance implements core operations for working with the Rust `Arc<T>` and the
// Kotlin Pointer to work with the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// theq Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an instance is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so risks
//     leaking the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
//   * To mitigate many of the risks of leaking memory and use-after-free unsafety, a `Cleaner`
//     is implemented to call the destructor when the Kotlin object becomes unreachable.
//     This is done in a background thread. This is not a panacea, and client code should be aware that
//      1. the thread may starve if some there are objects that have poorly performing
//     `drop` methods or do significant work in their `drop` methods.
//      2. the thread is shared across the whole library. This can be tuned by using `android_cleaner = true`,
//         or `android = true` in the [`kotlin` section of the `uniffi.toml` file](https://mozilla.github.io/uniffi-rs/kotlin/configuration.html).
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each instance an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// This makes a cleaner a better alternative to _not_ calling `destroy()` as
// and when the object is finished with, but the abstraction is not perfect: if the Rust object's `drop`
// method is slow, and/or there are many objects to cleanup, and it's on a low end Android device, then the cleaner
// thread may be starved, and the app will leak memory.
//
// In this case, `destroy`ing manually may be a better solution.
//
// The cleaner can live side by side with the manual calling of `destroy`. In the order of responsiveness, uniffi objects
// with Rust peers are reclaimed:
//
// 1. By calling the `destroy` method of the object, which calls `rustObject.free()`. If that doesn't happen:
// 2. When the object becomes unreachable, AND the Cleaner thread gets to call `rustObject.free()`. If the thread is starved then:
// 3. The memory is reclaimed when the process terminates.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//


/**
 * The data needed to perform authorization using OAuth 2.0.
 */
public interface OAuthAuthorizationDataInterface {
    
    /**
     * The login URL to use for authorization.
     */
    fun `loginUrl`(): kotlin.String
    
    companion object
}

/**
 * The data needed to perform authorization using OAuth 2.0.
 */
open class OAuthAuthorizationData: Disposable, AutoCloseable, OAuthAuthorizationDataInterface
{

    constructor(pointer: Pointer) {
        this.pointer = pointer
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    /**
     * This constructor can be used to instantiate a fake object. Only used for tests. Any
     * attempt to actually use an object constructed this way will fail as there is no
     * connected Rust object.
     */
    @Suppress("UNUSED_PARAMETER")
    constructor(noPointer: NoPointer) {
        this.pointer = null
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    protected val pointer: Pointer?
    protected val cleanable: UniffiCleaner.Cleanable

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (! this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.uniffiClonePointer())
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_matrix_sdk_fn_free_oauthauthorizationdata(ptr, status)
                }
            }
        }
    }

    fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_matrix_sdk_fn_clone_oauthauthorizationdata(pointer!!, status)
        }
    }

    
    /**
     * The login URL to use for authorization.
     */override fun `loginUrl`(): kotlin.String {
            return FfiConverterString.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_matrix_sdk_fn_method_oauthauthorizationdata_login_url(
        it, _status)
}
    }
    )
    }
    

    

    
    
    companion object
    
}

/**
 * @suppress
 */
public object FfiConverterTypeOAuthAuthorizationData: FfiConverter<OAuthAuthorizationData, Pointer> {

    override fun lower(value: OAuthAuthorizationData): Pointer {
        return value.uniffiClonePointer()
    }

    override fun lift(value: Pointer): OAuthAuthorizationData {
        return OAuthAuthorizationData(value)
    }

    override fun read(buf: ByteBuffer): OAuthAuthorizationData {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: OAuthAuthorizationData) = 8UL

    override fun write(value: OAuthAuthorizationData, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}



/**
 * A set of common power levels required for various operations within a room,
 * that can be applied as a single operation. When updating these
 * settings, any levels that are `None` will remain unchanged.
 */
data class RoomPowerLevelChanges (
    /**
     * The level required to ban a user.
     */
    var `ban`: kotlin.Long? = null, 
    /**
     * The level required to invite a user.
     */
    var `invite`: kotlin.Long? = null, 
    /**
     * The level required to kick a user.
     */
    var `kick`: kotlin.Long? = null, 
    /**
     * The level required to redact an event.
     */
    var `redact`: kotlin.Long? = null, 
    /**
     * The default level required to send message events.
     */
    var `eventsDefault`: kotlin.Long? = null, 
    /**
     * The default level required to send state events.
     */
    var `stateDefault`: kotlin.Long? = null, 
    /**
     * The default power level for every user in the room.
     */
    var `usersDefault`: kotlin.Long? = null, 
    /**
     * The level required to change the room's name.
     */
    var `roomName`: kotlin.Long? = null, 
    /**
     * The level required to change the room's avatar.
     */
    var `roomAvatar`: kotlin.Long? = null, 
    /**
     * The level required to change the room's topic.
     */
    var `roomTopic`: kotlin.Long? = null
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeRoomPowerLevelChanges: FfiConverterRustBuffer<RoomPowerLevelChanges> {
    override fun read(buf: ByteBuffer): RoomPowerLevelChanges {
        return RoomPowerLevelChanges(
            FfiConverterOptionalLong.read(buf),
            FfiConverterOptionalLong.read(buf),
            FfiConverterOptionalLong.read(buf),
            FfiConverterOptionalLong.read(buf),
            FfiConverterOptionalLong.read(buf),
            FfiConverterOptionalLong.read(buf),
            FfiConverterOptionalLong.read(buf),
            FfiConverterOptionalLong.read(buf),
            FfiConverterOptionalLong.read(buf),
            FfiConverterOptionalLong.read(buf),
        )
    }

    override fun allocationSize(value: RoomPowerLevelChanges) = (
            FfiConverterOptionalLong.allocationSize(value.`ban`) +
            FfiConverterOptionalLong.allocationSize(value.`invite`) +
            FfiConverterOptionalLong.allocationSize(value.`kick`) +
            FfiConverterOptionalLong.allocationSize(value.`redact`) +
            FfiConverterOptionalLong.allocationSize(value.`eventsDefault`) +
            FfiConverterOptionalLong.allocationSize(value.`stateDefault`) +
            FfiConverterOptionalLong.allocationSize(value.`usersDefault`) +
            FfiConverterOptionalLong.allocationSize(value.`roomName`) +
            FfiConverterOptionalLong.allocationSize(value.`roomAvatar`) +
            FfiConverterOptionalLong.allocationSize(value.`roomTopic`)
    )

    override fun write(value: RoomPowerLevelChanges, buf: ByteBuffer) {
            FfiConverterOptionalLong.write(value.`ban`, buf)
            FfiConverterOptionalLong.write(value.`invite`, buf)
            FfiConverterOptionalLong.write(value.`kick`, buf)
            FfiConverterOptionalLong.write(value.`redact`, buf)
            FfiConverterOptionalLong.write(value.`eventsDefault`, buf)
            FfiConverterOptionalLong.write(value.`stateDefault`, buf)
            FfiConverterOptionalLong.write(value.`usersDefault`, buf)
            FfiConverterOptionalLong.write(value.`roomName`, buf)
            FfiConverterOptionalLong.write(value.`roomAvatar`, buf)
            FfiConverterOptionalLong.write(value.`roomTopic`, buf)
    }
}



/**
 * Properties to create a new virtual Element Call widget.
 */
data class VirtualElementCallWidgetOptions (
    /**
     * The url to the app.
     *
     * E.g. <https://call.element.io>, <https://call.element.dev>, <https://call.element.dev/room>
     */
    var `elementCallUrl`: kotlin.String, 
    /**
     * The widget id.
     */
    var `widgetId`: kotlin.String, 
    /**
     * The url that is used as the target for the PostMessages sent
     * by the widget (to the client).
     *
     * For a web app client this is the client url. In case of using other
     * platforms the client most likely is setup up to listen to
     * postmessages in the same webview the widget is hosted. In this case
     * the `parent_url` is set to the url of the webview with the widget. Be
     * aware that this means that the widget will receive its own postmessage
     * messages. The `matrix-widget-api` (js) ignores those so this works but
     * it might break custom implementations.
     *
     * Defaults to `element_call_url` for the non-iframe (dedicated webview)
     * usecase.
     */
    var `parentUrl`: kotlin.String?, 
    /**
     * Whether the branding header of Element call should be shown or if a
     * mobile header navbar should be render.
     *
     * Default: [`HeaderStyle::Standard`]
     */
    var `header`: HeaderStyle?, 
    /**
     * Whether the branding header of Element call should be hidden.
     *
     * Default: `true`
     */
    var `hideHeader`: kotlin.Boolean?, 
    /**
     * If set, the lobby will be skipped and the widget will join the
     * call on the `io.element.join` action.
     *
     * Default: `false`
     */
    var `preload`: kotlin.Boolean?, 
    /**
     * The font scale which will be used inside element call.
     *
     * Default: `1`
     */
    var `fontScale`: kotlin.Double?, 
    /**
     * Whether element call should prompt the user to open in the browser or
     * the app.
     *
     * Default: `false`
     */
    var `appPrompt`: kotlin.Boolean?, 
    /**
     * Make it not possible to get to the calls list in the webview.
     *
     * Default: `true`
     */
    var `confineToRoom`: kotlin.Boolean?, 
    /**
     * The font to use, to adapt to the system font.
     */
    var `font`: kotlin.String?, 
    /**
     * The encryption system to use.
     *
     * Use `EncryptionSystem::Unencrypted` to disable encryption.
     */
    var `encryption`: EncryptionSystem, 
    /**
     * The intent of showing the call.
     * If the user wants to start a call or join an existing one.
     * Controls if the lobby is skipped or not.
     */
    var `intent`: Intent?, 
    /**
     * Do not show the screenshare button.
     */
    var `hideScreensharing`: kotlin.Boolean, 
    /**
     * Can be used to pass a PostHog id to element call.
     */
    var `posthogUserId`: kotlin.String?, 
    /**
     * The host of the posthog api.
     * This is only used by the embedded package of Element Call.
     */
    var `posthogApiHost`: kotlin.String?, 
    /**
     * The key for the posthog api.
     * This is only used by the embedded package of Element Call.
     */
    var `posthogApiKey`: kotlin.String?, 
    /**
     * The url to use for submitting rageshakes.
     * This is only used by the embedded package of Element Call.
     */
    var `rageshakeSubmitUrl`: kotlin.String?, 
    /**
     * Sentry [DSN](https://docs.sentry.io/concepts/key-terms/dsn-explainer/)
     * This is only used by the embedded package of Element Call.
     */
    var `sentryDsn`: kotlin.String?, 
    /**
     * Sentry [environment](https://docs.sentry.io/concepts/key-terms/key-terms/)
     * This is only used by the embedded package of Element Call.
     */
    var `sentryEnvironment`: kotlin.String?, 
    /**
     * - `false`: the webview shows a a list of devices injected by the
     * client. (used on ios & android)
     */
    var `controlledMediaDevices`: kotlin.Boolean
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeVirtualElementCallWidgetOptions: FfiConverterRustBuffer<VirtualElementCallWidgetOptions> {
    override fun read(buf: ByteBuffer): VirtualElementCallWidgetOptions {
        return VirtualElementCallWidgetOptions(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalTypeHeaderStyle.read(buf),
            FfiConverterOptionalBoolean.read(buf),
            FfiConverterOptionalBoolean.read(buf),
            FfiConverterOptionalDouble.read(buf),
            FfiConverterOptionalBoolean.read(buf),
            FfiConverterOptionalBoolean.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterTypeEncryptionSystem.read(buf),
            FfiConverterOptionalTypeIntent.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterBoolean.read(buf),
        )
    }

    override fun allocationSize(value: VirtualElementCallWidgetOptions) = (
            FfiConverterString.allocationSize(value.`elementCallUrl`) +
            FfiConverterString.allocationSize(value.`widgetId`) +
            FfiConverterOptionalString.allocationSize(value.`parentUrl`) +
            FfiConverterOptionalTypeHeaderStyle.allocationSize(value.`header`) +
            FfiConverterOptionalBoolean.allocationSize(value.`hideHeader`) +
            FfiConverterOptionalBoolean.allocationSize(value.`preload`) +
            FfiConverterOptionalDouble.allocationSize(value.`fontScale`) +
            FfiConverterOptionalBoolean.allocationSize(value.`appPrompt`) +
            FfiConverterOptionalBoolean.allocationSize(value.`confineToRoom`) +
            FfiConverterOptionalString.allocationSize(value.`font`) +
            FfiConverterTypeEncryptionSystem.allocationSize(value.`encryption`) +
            FfiConverterOptionalTypeIntent.allocationSize(value.`intent`) +
            FfiConverterBoolean.allocationSize(value.`hideScreensharing`) +
            FfiConverterOptionalString.allocationSize(value.`posthogUserId`) +
            FfiConverterOptionalString.allocationSize(value.`posthogApiHost`) +
            FfiConverterOptionalString.allocationSize(value.`posthogApiKey`) +
            FfiConverterOptionalString.allocationSize(value.`rageshakeSubmitUrl`) +
            FfiConverterOptionalString.allocationSize(value.`sentryDsn`) +
            FfiConverterOptionalString.allocationSize(value.`sentryEnvironment`) +
            FfiConverterBoolean.allocationSize(value.`controlledMediaDevices`)
    )

    override fun write(value: VirtualElementCallWidgetOptions, buf: ByteBuffer) {
            FfiConverterString.write(value.`elementCallUrl`, buf)
            FfiConverterString.write(value.`widgetId`, buf)
            FfiConverterOptionalString.write(value.`parentUrl`, buf)
            FfiConverterOptionalTypeHeaderStyle.write(value.`header`, buf)
            FfiConverterOptionalBoolean.write(value.`hideHeader`, buf)
            FfiConverterOptionalBoolean.write(value.`preload`, buf)
            FfiConverterOptionalDouble.write(value.`fontScale`, buf)
            FfiConverterOptionalBoolean.write(value.`appPrompt`, buf)
            FfiConverterOptionalBoolean.write(value.`confineToRoom`, buf)
            FfiConverterOptionalString.write(value.`font`, buf)
            FfiConverterTypeEncryptionSystem.write(value.`encryption`, buf)
            FfiConverterOptionalTypeIntent.write(value.`intent`, buf)
            FfiConverterBoolean.write(value.`hideScreensharing`, buf)
            FfiConverterOptionalString.write(value.`posthogUserId`, buf)
            FfiConverterOptionalString.write(value.`posthogApiHost`, buf)
            FfiConverterOptionalString.write(value.`posthogApiKey`, buf)
            FfiConverterOptionalString.write(value.`rageshakeSubmitUrl`, buf)
            FfiConverterOptionalString.write(value.`sentryDsn`, buf)
            FfiConverterOptionalString.write(value.`sentryEnvironment`, buf)
            FfiConverterBoolean.write(value.`controlledMediaDevices`, buf)
    }
}



/**
 * Settings for end-to-end encryption features.
 */

enum class BackupDownloadStrategy {
    
    /**
     * Automatically download all room keys from the backup when the backup
     * recovery key has been received. The backup recovery key can be received
     * in two ways:
     *
     * 1. Received as a `m.secret.send` to-device event, after a successful
     * interactive verification.
     * 2. Imported from secret storage (4S) using the
     * [`SecretStore::import_secrets()`] method.
     *
     * [`SecretStore::import_secrets()`]: crate::encryption::secret_storage::SecretStore::import_secrets
     */
    ONE_SHOT,
    /**
     * Attempt to download a single room key if an event fails to be decrypted.
     */
    AFTER_DECRYPTION_FAILURE,
    /**
     * Don't download any room keys automatically. The user can manually
     * download room keys using the [`Backups::download_room_key()`] methods.
     *
     * This is the default option.
     */
    MANUAL;
    companion object
}


/**
 * @suppress
 */
public object FfiConverterTypeBackupDownloadStrategy: FfiConverterRustBuffer<BackupDownloadStrategy> {
    override fun read(buf: ByteBuffer) = try {
        BackupDownloadStrategy.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: BackupDownloadStrategy) = 4UL

    override fun write(value: BackupDownloadStrategy, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}





/**
 * Defines if a call is encrypted and which encryption system should be used.
 *
 * This controls the url parameters: `perParticipantE2EE`, `password`.
 */
sealed class EncryptionSystem {
    
    /**
     * Equivalent to the element call url parameter: `perParticipantE2EE=false`
     * and no password.
     */
    object Unencrypted : EncryptionSystem()
    
    
    /**
     * Equivalent to the element call url parameters:
     * `perParticipantE2EE=true`
     */
    object PerParticipantKeys : EncryptionSystem()
    
    
    /**
     * Equivalent to the element call url parameters:
     * `password={secret}`
     */
    data class SharedSecret(
        /**
         * The secret/password which is used in the url.
         */
        val `secret`: kotlin.String) : EncryptionSystem() {
        companion object
    }
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeEncryptionSystem : FfiConverterRustBuffer<EncryptionSystem>{
    override fun read(buf: ByteBuffer): EncryptionSystem {
        return when(buf.getInt()) {
            1 -> EncryptionSystem.Unencrypted
            2 -> EncryptionSystem.PerParticipantKeys
            3 -> EncryptionSystem.SharedSecret(
                FfiConverterString.read(buf),
                )
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: EncryptionSystem) = when(value) {
        is EncryptionSystem.Unencrypted -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
            )
        }
        is EncryptionSystem.PerParticipantKeys -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
            )
        }
        is EncryptionSystem.SharedSecret -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterString.allocationSize(value.`secret`)
            )
        }
    }

    override fun write(value: EncryptionSystem, buf: ByteBuffer) {
        when(value) {
            is EncryptionSystem.Unencrypted -> {
                buf.putInt(1)
                Unit
            }
            is EncryptionSystem.PerParticipantKeys -> {
                buf.putInt(2)
                Unit
            }
            is EncryptionSystem.SharedSecret -> {
                buf.putInt(3)
                FfiConverterString.write(value.`secret`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}





/**
 * Defines how (if) element-call renders a header.
 */

enum class HeaderStyle {
    
    /**
     * The normal header with branding.
     */
    STANDARD,
    /**
     * Render a header with a back button (useful on mobile platforms).
     */
    APP_BAR,
    /**
     * No Header (useful for webapps).
     */
    NONE;
    companion object
}


/**
 * @suppress
 */
public object FfiConverterTypeHeaderStyle: FfiConverterRustBuffer<HeaderStyle> {
    override fun read(buf: ByteBuffer) = try {
        HeaderStyle.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: HeaderStyle) = 4UL

    override fun write(value: HeaderStyle, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}





/**
 * Defines the intent of showing the call.
 *
 * This controls whether to show or skip the lobby.
 */

enum class Intent {
    
    /**
     * The user wants to start a call.
     */
    START_CALL,
    /**
     * The user wants to join an existing call.
     */
    JOIN_EXISTING;
    companion object
}


/**
 * @suppress
 */
public object FfiConverterTypeIntent: FfiConverterRustBuffer<Intent> {
    override fun read(buf: ByteBuffer) = try {
        Intent.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: Intent) = 4UL

    override fun write(value: Intent, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}





/**
 * Current state of a [`Paginator`].
 */

enum class PaginatorState {
    
    /**
     * The initial state of the paginator.
     */
    INITIAL,
    /**
     * The paginator is fetching the target initial event.
     */
    FETCHING_TARGET_EVENT,
    /**
     * The target initial event could be found, zero or more paginations have
     * happened since then, and the paginator is at rest now.
     */
    IDLE,
    /**
     * The paginator is… paginating one direction or another.
     */
    PAGINATING;
    companion object
}


/**
 * @suppress
 */
public object FfiConverterTypePaginatorState: FfiConverterRustBuffer<PaginatorState> {
    override fun read(buf: ByteBuffer) = try {
        PaginatorState.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: PaginatorState) = 4UL

    override fun write(value: PaginatorState, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}







/**
 * The error type for failures while trying to log in a new device using a QR
 * code.
 */
sealed class QrCodeLoginException(message: String): kotlin.Exception(message) {
        
    /**
     * An error happened while we were communicating with the OAuth 2.0
     * authorization server.
     */
        class OAuth(message: String) : QrCodeLoginException(message)
        
    /**
     * The other device has signaled to us that the login has failed.
     */
        class LoginFailure(message: String) : QrCodeLoginException(message)
        
    /**
     * An unexpected message was received from the other device.
     */
        class UnexpectedMessage(message: String) : QrCodeLoginException(message)
        
    /**
     * An error happened while exchanging messages with the other device.
     */
        class SecureChannel(message: String) : QrCodeLoginException(message)
        
    /**
     * The cross-process refresh lock failed to be initialized.
     */
        class CrossProcessRefreshLock(message: String) : QrCodeLoginException(message)
        
    /**
     * An error happened while we were trying to discover our user and device
     * ID, after we have acquired an access token from the OAuth 2.0
     * authorization server.
     */
        class UserIdDiscovery(message: String) : QrCodeLoginException(message)
        
    /**
     * We failed to set the session tokens after we figured out our device and
     * user IDs.
     */
        class SessionTokens(message: String) : QrCodeLoginException(message)
        
    /**
     * The device keys failed to be uploaded after we successfully logged in.
     */
        class DeviceKeyUpload(message: String) : QrCodeLoginException(message)
        
    /**
     * The secrets bundle we received from the existing device failed to be
     * imported.
     */
        class SecretImport(message: String) : QrCodeLoginException(message)
        

    companion object ErrorHandler : UniffiRustCallStatusErrorHandler<QrCodeLoginException> {
        override fun lift(error_buf: RustBuffer.ByValue): QrCodeLoginException = FfiConverterTypeQRCodeLoginError.lift(error_buf)
    }
}

/**
 * @suppress
 */
public object FfiConverterTypeQRCodeLoginError : FfiConverterRustBuffer<QrCodeLoginException> {
    override fun read(buf: ByteBuffer): QrCodeLoginException {
        
            return when(buf.getInt()) {
            1 -> QrCodeLoginException.OAuth(FfiConverterString.read(buf))
            2 -> QrCodeLoginException.LoginFailure(FfiConverterString.read(buf))
            3 -> QrCodeLoginException.UnexpectedMessage(FfiConverterString.read(buf))
            4 -> QrCodeLoginException.SecureChannel(FfiConverterString.read(buf))
            5 -> QrCodeLoginException.CrossProcessRefreshLock(FfiConverterString.read(buf))
            6 -> QrCodeLoginException.UserIdDiscovery(FfiConverterString.read(buf))
            7 -> QrCodeLoginException.SessionTokens(FfiConverterString.read(buf))
            8 -> QrCodeLoginException.DeviceKeyUpload(FfiConverterString.read(buf))
            9 -> QrCodeLoginException.SecretImport(FfiConverterString.read(buf))
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
        
    }

    override fun allocationSize(value: QrCodeLoginException): ULong {
        return 4UL
    }

    override fun write(value: QrCodeLoginException, buf: ByteBuffer) {
        when(value) {
            is QrCodeLoginException.OAuth -> {
                buf.putInt(1)
                Unit
            }
            is QrCodeLoginException.LoginFailure -> {
                buf.putInt(2)
                Unit
            }
            is QrCodeLoginException.UnexpectedMessage -> {
                buf.putInt(3)
                Unit
            }
            is QrCodeLoginException.SecureChannel -> {
                buf.putInt(4)
                Unit
            }
            is QrCodeLoginException.CrossProcessRefreshLock -> {
                buf.putInt(5)
                Unit
            }
            is QrCodeLoginException.UserIdDiscovery -> {
                buf.putInt(6)
                Unit
            }
            is QrCodeLoginException.SessionTokens -> {
                buf.putInt(7)
                Unit
            }
            is QrCodeLoginException.DeviceKeyUpload -> {
                buf.putInt(8)
                Unit
            }
            is QrCodeLoginException.SecretImport -> {
                buf.putInt(9)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}



/**
 * The role of a member in a room.
 */

enum class RoomMemberRole {
    
    /**
     * The member is an administrator.
     */
    ADMINISTRATOR,
    /**
     * The member is a moderator.
     */
    MODERATOR,
    /**
     * The member is a regular user.
     */
    USER;
    companion object
}


/**
 * @suppress
 */
public object FfiConverterTypeRoomMemberRole: FfiConverterRustBuffer<RoomMemberRole> {
    override fun read(buf: ByteBuffer) = try {
        RoomMemberRole.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: RoomMemberRole) = 4UL

    override fun write(value: RoomMemberRole, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}





/**
 * Status for the back-pagination on a room event cache.
 */
sealed class RoomPaginationStatus {
    
    /**
     * No back-pagination is happening right now.
     */
    data class Idle(
        /**
         * Have we hit the start of the timeline, i.e. back-paginating wouldn't
         * have any effect?
         */
        val `hitTimelineStart`: kotlin.Boolean) : RoomPaginationStatus() {
        companion object
    }
    
    /**
     * Back-pagination is already running in the background.
     */
    object Paginating : RoomPaginationStatus()
    
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeRoomPaginationStatus : FfiConverterRustBuffer<RoomPaginationStatus>{
    override fun read(buf: ByteBuffer): RoomPaginationStatus {
        return when(buf.getInt()) {
            1 -> RoomPaginationStatus.Idle(
                FfiConverterBoolean.read(buf),
                )
            2 -> RoomPaginationStatus.Paginating
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: RoomPaginationStatus) = when(value) {
        is RoomPaginationStatus.Idle -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterBoolean.allocationSize(value.`hitTimelineStart`)
            )
        }
        is RoomPaginationStatus.Paginating -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
            )
        }
    }

    override fun write(value: RoomPaginationStatus, buf: ByteBuffer) {
        when(value) {
            is RoomPaginationStatus.Idle -> {
                buf.putInt(1)
                FfiConverterBoolean.write(value.`hitTimelineStart`, buf)
                Unit
            }
            is RoomPaginationStatus.Paginating -> {
                buf.putInt(2)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}






/**
 * @suppress
 */
public object FfiConverterOptionalLong: FfiConverterRustBuffer<kotlin.Long?> {
    override fun read(buf: ByteBuffer): kotlin.Long? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterLong.read(buf)
    }

    override fun allocationSize(value: kotlin.Long?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterLong.allocationSize(value)
        }
    }

    override fun write(value: kotlin.Long?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterLong.write(value, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterOptionalDouble: FfiConverterRustBuffer<kotlin.Double?> {
    override fun read(buf: ByteBuffer): kotlin.Double? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterDouble.read(buf)
    }

    override fun allocationSize(value: kotlin.Double?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterDouble.allocationSize(value)
        }
    }

    override fun write(value: kotlin.Double?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterDouble.write(value, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterOptionalBoolean: FfiConverterRustBuffer<kotlin.Boolean?> {
    override fun read(buf: ByteBuffer): kotlin.Boolean? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterBoolean.read(buf)
    }

    override fun allocationSize(value: kotlin.Boolean?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterBoolean.allocationSize(value)
        }
    }

    override fun write(value: kotlin.Boolean?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterBoolean.write(value, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterOptionalString: FfiConverterRustBuffer<kotlin.String?> {
    override fun read(buf: ByteBuffer): kotlin.String? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterString.read(buf)
    }

    override fun allocationSize(value: kotlin.String?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterString.allocationSize(value)
        }
    }

    override fun write(value: kotlin.String?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterString.write(value, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterOptionalTypeHeaderStyle: FfiConverterRustBuffer<HeaderStyle?> {
    override fun read(buf: ByteBuffer): HeaderStyle? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeHeaderStyle.read(buf)
    }

    override fun allocationSize(value: HeaderStyle?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeHeaderStyle.allocationSize(value)
        }
    }

    override fun write(value: HeaderStyle?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeHeaderStyle.write(value, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterOptionalTypeIntent: FfiConverterRustBuffer<Intent?> {
    override fun read(buf: ByteBuffer): Intent? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeIntent.read(buf)
    }

    override fun allocationSize(value: Intent?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeIntent.allocationSize(value)
        }
    }

    override fun write(value: Intent?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeIntent.write(value, buf)
        }
    }
}

