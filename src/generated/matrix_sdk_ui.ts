// This file was autogenerated by some hot garbage in the `uniffi-bindgen-react-native` crate.
// Trust me, you don't want to mess with it!
import nativeModule, {
  type UniffiRustFutureContinuationCallback,
  type UniffiForeignFuture,
  type UniffiForeignFutureStructU8,
  type UniffiForeignFutureCompleteU8,
  type UniffiForeignFutureStructI8,
  type UniffiForeignFutureCompleteI8,
  type UniffiForeignFutureStructU16,
  type UniffiForeignFutureCompleteU16,
  type UniffiForeignFutureStructI16,
  type UniffiForeignFutureCompleteI16,
  type UniffiForeignFutureStructU32,
  type UniffiForeignFutureCompleteU32,
  type UniffiForeignFutureStructI32,
  type UniffiForeignFutureCompleteI32,
  type UniffiForeignFutureStructU64,
  type UniffiForeignFutureCompleteU64,
  type UniffiForeignFutureStructI64,
  type UniffiForeignFutureCompleteI64,
  type UniffiForeignFutureStructF32,
  type UniffiForeignFutureCompleteF32,
  type UniffiForeignFutureStructF64,
  type UniffiForeignFutureCompleteF64,
  type UniffiForeignFutureStructPointer,
  type UniffiForeignFutureCompletePointer,
  type UniffiForeignFutureStructRustBuffer,
  type UniffiForeignFutureCompleteRustBuffer,
  type UniffiForeignFutureStructVoid,
  type UniffiForeignFutureCompleteVoid,
} from './matrix_sdk_ui-ffi';
import {
  type UniffiByteArray,
  AbstractFfiConverterByteArray,
  FfiConverterBool,
  FfiConverterInt32,
  RustBuffer,
  UniffiEnum,
  UniffiInternalError,
  UniffiRustCaller,
  uniffiCreateFfiConverterString,
  uniffiTypeNameSymbol,
} from 'uniffi-bindgen-react-native';

// Get converters from the other files, if any.
const uniffiCaller = new UniffiRustCaller(() => ({ code: 0 }));

const uniffiIsDebug =
  // @ts-ignore -- The process global might not be defined
  typeof process !== 'object' ||
  // @ts-ignore -- The process global might not be defined
  process?.env?.NODE_ENV !== 'production' ||
  false;
// Public interface members begin here.

const stringConverter = {
  stringToBytes: (s: string) =>
    uniffiCaller.rustCall((status) =>
      nativeModule().ubrn_uniffi_internal_fn_func_ffi__string_to_arraybuffer(
        s,
        status
      )
    ),
  bytesToString: (ab: UniffiByteArray) =>
    uniffiCaller.rustCall((status) =>
      nativeModule().ubrn_uniffi_internal_fn_func_ffi__arraybuffer_to_string(
        ab,
        status
      )
    ),
  stringByteLength: (s: string) =>
    uniffiCaller.rustCall((status) =>
      nativeModule().ubrn_uniffi_internal_fn_func_ffi__string_to_byte_length(
        s,
        status
      )
    ),
};
const FfiConverterString = uniffiCreateFfiConverterString(stringConverter);

/**
 * Where this event came.
 */
export enum EventItemOrigin {
  /**
   * The event was created locally.
   */
  Local,
  /**
   * The event came from a sync response.
   */
  Sync,
  /**
   * The event came from pagination.
   */
  Pagination,
  /**
   * The event came from a cache.
   */
  Cache,
}

const FfiConverterTypeEventItemOrigin = (() => {
  const ordinalConverter = FfiConverterInt32;
  type TypeName = EventItemOrigin;
  class FFIConverter extends AbstractFfiConverterByteArray<TypeName> {
    read(from: RustBuffer): TypeName {
      switch (ordinalConverter.read(from)) {
        case 1:
          return EventItemOrigin.Local;
        case 2:
          return EventItemOrigin.Sync;
        case 3:
          return EventItemOrigin.Pagination;
        case 4:
          return EventItemOrigin.Cache;
        default:
          throw new UniffiInternalError.UnexpectedEnumCase();
      }
    }
    write(value: TypeName, into: RustBuffer): void {
      switch (value) {
        case EventItemOrigin.Local:
          return ordinalConverter.write(1, into);
        case EventItemOrigin.Sync:
          return ordinalConverter.write(2, into);
        case EventItemOrigin.Pagination:
          return ordinalConverter.write(3, into);
        case EventItemOrigin.Cache:
          return ordinalConverter.write(4, into);
      }
    }
    allocationSize(value: TypeName): number {
      return ordinalConverter.allocationSize(0);
    }
  }
  return new FFIConverter();
})();

/**
 * The type of change between the previous and current pinned events.
 */
export enum RoomPinnedEventsChange {
  /**
   * Only new event ids were added.
   */
  Added,
  /**
   * Only event ids were removed.
   */
  Removed,
  /**
   * Some change other than only adding or only removing ids happened.
   */
  Changed,
}

const FfiConverterTypeRoomPinnedEventsChange = (() => {
  const ordinalConverter = FfiConverterInt32;
  type TypeName = RoomPinnedEventsChange;
  class FFIConverter extends AbstractFfiConverterByteArray<TypeName> {
    read(from: RustBuffer): TypeName {
      switch (ordinalConverter.read(from)) {
        case 1:
          return RoomPinnedEventsChange.Added;
        case 2:
          return RoomPinnedEventsChange.Removed;
        case 3:
          return RoomPinnedEventsChange.Changed;
        default:
          throw new UniffiInternalError.UnexpectedEnumCase();
      }
    }
    write(value: TypeName, into: RustBuffer): void {
      switch (value) {
        case RoomPinnedEventsChange.Added:
          return ordinalConverter.write(1, into);
        case RoomPinnedEventsChange.Removed:
          return ordinalConverter.write(2, into);
        case RoomPinnedEventsChange.Changed:
          return ordinalConverter.write(3, into);
      }
    }
    allocationSize(value: TypeName): number {
      return ordinalConverter.allocationSize(0);
    }
  }
  return new FFIConverter();
})();

// Enum: SpaceRoomListPaginationState
export enum SpaceRoomListPaginationState_Tags {
  Idle = 'Idle',
  Loading = 'Loading',
}
export const SpaceRoomListPaginationState = (() => {
  type Idle__interface = {
    tag: SpaceRoomListPaginationState_Tags.Idle;
    inner: Readonly<{ endReached: boolean }>;
  };

  class Idle_ extends UniffiEnum implements Idle__interface {
    /**
     * @private
     * This field is private and should not be used, use `tag` instead.
     */
    readonly [uniffiTypeNameSymbol] = 'SpaceRoomListPaginationState';
    readonly tag = SpaceRoomListPaginationState_Tags.Idle;
    readonly inner: Readonly<{ endReached: boolean }>;
    constructor(inner: { endReached: boolean }) {
      super('SpaceRoomListPaginationState', 'Idle');
      this.inner = Object.freeze(inner);
    }

    static new(inner: { endReached: boolean }): Idle_ {
      return new Idle_(inner);
    }

    static instanceOf(obj: any): obj is Idle_ {
      return obj.tag === SpaceRoomListPaginationState_Tags.Idle;
    }
  }

  type Loading__interface = {
    tag: SpaceRoomListPaginationState_Tags.Loading;
  };

  class Loading_ extends UniffiEnum implements Loading__interface {
    /**
     * @private
     * This field is private and should not be used, use `tag` instead.
     */
    readonly [uniffiTypeNameSymbol] = 'SpaceRoomListPaginationState';
    readonly tag = SpaceRoomListPaginationState_Tags.Loading;
    constructor() {
      super('SpaceRoomListPaginationState', 'Loading');
    }

    static new(): Loading_ {
      return new Loading_();
    }

    static instanceOf(obj: any): obj is Loading_ {
      return obj.tag === SpaceRoomListPaginationState_Tags.Loading;
    }
  }

  function instanceOf(obj: any): obj is SpaceRoomListPaginationState {
    return obj[uniffiTypeNameSymbol] === 'SpaceRoomListPaginationState';
  }

  return Object.freeze({
    instanceOf,
    Idle: Idle_,
    Loading: Loading_,
  });
})();

export type SpaceRoomListPaginationState = InstanceType<
  (typeof SpaceRoomListPaginationState)[keyof Omit<
    typeof SpaceRoomListPaginationState,
    'instanceOf'
  >]
>;

// FfiConverter for enum SpaceRoomListPaginationState
const FfiConverterTypeSpaceRoomListPaginationState = (() => {
  const ordinalConverter = FfiConverterInt32;
  type TypeName = SpaceRoomListPaginationState;
  class FFIConverter extends AbstractFfiConverterByteArray<TypeName> {
    read(from: RustBuffer): TypeName {
      switch (ordinalConverter.read(from)) {
        case 1:
          return new SpaceRoomListPaginationState.Idle({
            endReached: FfiConverterBool.read(from),
          });
        case 2:
          return new SpaceRoomListPaginationState.Loading();
        default:
          throw new UniffiInternalError.UnexpectedEnumCase();
      }
    }
    write(value: TypeName, into: RustBuffer): void {
      switch (value.tag) {
        case SpaceRoomListPaginationState_Tags.Idle: {
          ordinalConverter.write(1, into);
          const inner = value.inner;
          FfiConverterBool.write(inner.endReached, into);
          return;
        }
        case SpaceRoomListPaginationState_Tags.Loading: {
          ordinalConverter.write(2, into);
          return;
        }
        default:
          // Throwing from here means that SpaceRoomListPaginationState_Tags hasn't matched an ordinal.
          throw new UniffiInternalError.UnexpectedEnumCase();
      }
    }
    allocationSize(value: TypeName): number {
      switch (value.tag) {
        case SpaceRoomListPaginationState_Tags.Idle: {
          const inner = value.inner;
          let size = ordinalConverter.allocationSize(1);
          size += FfiConverterBool.allocationSize(inner.endReached);
          return size;
        }
        case SpaceRoomListPaginationState_Tags.Loading: {
          return ordinalConverter.allocationSize(2);
        }
        default:
          throw new UniffiInternalError.UnexpectedEnumCase();
      }
    }
  }
  return new FFIConverter();
})();

/**
 * This should be called before anything else.
 *
 * It is likely that this is being done for you by the library's `index.ts`.
 *
 * It checks versions of uniffi between when the Rust scaffolding was generated
 * and when the bindings were generated.
 *
 * It also initializes the machinery to enable Rust to talk back to Javascript.
 */
function uniffiEnsureInitialized() {
  // Get the bindings contract version from our ComponentInterface
  const bindingsContractVersion = 29;
  // Get the scaffolding contract version by calling the into the dylib
  const scaffoldingContractVersion =
    nativeModule().ubrn_ffi_matrix_sdk_ui_uniffi_contract_version();
  if (bindingsContractVersion !== scaffoldingContractVersion) {
    throw new UniffiInternalError.ContractVersionMismatch(
      scaffoldingContractVersion,
      bindingsContractVersion
    );
  }
}

export default Object.freeze({
  initialize: uniffiEnsureInitialized,
  converters: {
    FfiConverterTypeEventItemOrigin,
    FfiConverterTypeRoomPinnedEventsChange,
    FfiConverterTypeSpaceRoomListPaginationState,
  },
});
